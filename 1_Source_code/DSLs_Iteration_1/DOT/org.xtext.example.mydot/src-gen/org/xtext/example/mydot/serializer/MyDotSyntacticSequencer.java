/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydot.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydot.services.MyDotGrammarAccess;

@SuppressWarnings("all")
public class MyDotSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MyDotGrammarAccess grammarAccess;
	protected AbstractElementAlias match_AttrList___CommaKeyword_2_1_0_or_SemicolonKeyword_2_1_1__q;
	protected AbstractElementAlias match_Stmt_SemicolonKeyword_1_q;
	protected AbstractElementAlias match_Subgraph_SubgraphKeyword_1_0_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MyDotGrammarAccess) access;
		match_AttrList___CommaKeyword_2_1_0_or_SemicolonKeyword_2_1_1__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getAttrListAccess().getCommaKeyword_2_1_0()), new TokenAlias(false, false, grammarAccess.getAttrListAccess().getSemicolonKeyword_2_1_1()));
		match_Stmt_SemicolonKeyword_1_q = new TokenAlias(false, true, grammarAccess.getStmtAccess().getSemicolonKeyword_1());
		match_Subgraph_SubgraphKeyword_1_0_q = new TokenAlias(false, true, grammarAccess.getSubgraphAccess().getSubgraphKeyword_1_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_AttrList___CommaKeyword_2_1_0_or_SemicolonKeyword_2_1_1__q.equals(syntax))
				emit_AttrList___CommaKeyword_2_1_0_or_SemicolonKeyword_2_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Stmt_SemicolonKeyword_1_q.equals(syntax))
				emit_Stmt_SemicolonKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Subgraph_SubgraphKeyword_1_0_q.equals(syntax))
				emit_Subgraph_SubgraphKeyword_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     (',' | ';')?
	 *
	 * This ambiguous syntax occurs at:
	 *     attributes+=Attribute (ambiguity) ']' (rule end)
	 *     attributes+=Attribute (ambiguity) attributes+=Attribute
	 */
	protected void emit_AttrList___CommaKeyword_2_1_0_or_SemicolonKeyword_2_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'subgraph'? '{' '}' (ambiguity) (rule start)
	 *     attrLists+=AttrList (ambiguity) (rule end)
	 *     edgeRHS+=EdgeRhs (ambiguity) (rule end)
	 *     name=ID '{' '}' (ambiguity) (rule end)
	 *     node=NodeId (ambiguity) (rule end)
	 *     stmts+=Stmt '}' (ambiguity) (rule end)
	 *     value=EString (ambiguity) (rule end)
	 */
	protected void emit_Stmt_SemicolonKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'subgraph'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '{' '}' ';'? (rule start)
	 *     (rule start) (ambiguity) '{' '}' (rule start)
	 *     (rule start) (ambiguity) '{' stmts+=Stmt
	 */
	protected void emit_Subgraph_SubgraphKeyword_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
