/*
 * generated by Xtext 2.25.0
 */
package org.omg.qvt10.myqvto.formatting2

import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.omg.qvt10.myqvto.services.MyQvtoGrammarAccess
import qvtoperational.TopLevelGO

class MyQvtoFormatter extends AbstractFormatter2 {
	
	@Inject extension MyQvtoGrammarAccess

	def dispatch void format(TopLevelGO topLevelGO, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (module : topLevelGO.unit_element) {
			module.format
		}
		for (moduleImport : topLevelGO.moduleimport) {
			moduleImport.format
		}
	}

	def dispatch void format(qvtoperational.Module module, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (comment : module.ownedComment) {
			comment.format
		}
		for (type : module.ownedType) {
			type.format
		}
		for (_package : module.nestedPackage) {
			_package.format
		}
		for (tag : module.ownedTag) {
			tag.format
		}
		for (moduleImport : module.moduleImport) {
			moduleImport.format
		}
		for (expressionGO : module.ownedVariable) {
			expressionGO.format
		}
	}
	
	// TODO: implement for ModuleImport, Tag, Comment, Package, Operation, Property, ModelType, Helper, OperationalTransformation, MappingOperation, Constructor, ContextualProperty, EntryOperation, Library, TagGO, MetaModelGO, AccessDecl, TypeDef, ClassifierGO, Class, DataType, Enumeration, Parameter, EnumerationLiteral, PrimitiveType, PackageRefGO, ExpressionBlock, ExpressionList, ExpressionSemiList, ResolveExp, ResolveInExp, MappingParameter, ModelParameter, VarParameter, ObjectExp, Declarator, TypeSpec, InitPart, TypeReference, ComplexType, DeclaratorList, ConstructorBody, ImperativeOperation, OperationBody, HelperHeader, MappingBody, PopulationSection, CompleteSignature, SimpleSignature, ParamList, TransformationHeader, TransformationUsageRefine, ModuleUsageGO, ModuleRefGO, AccessUsage, ExtendsUsage, MappingFullHeader, MappingHeader, MappingExtra, MappingExtension, MappingRefinement, ScopedIdentifierList, ConstructorHeader, EntryHeader, LibraryHeader, MetaModelHeader, MetaModelElement, EnumerationGO, ClassifierHeader, ClassifierFeatureList, ClassifierExtension, ClassifierFeature, FeatureQualifier, OppositeProperty
}
