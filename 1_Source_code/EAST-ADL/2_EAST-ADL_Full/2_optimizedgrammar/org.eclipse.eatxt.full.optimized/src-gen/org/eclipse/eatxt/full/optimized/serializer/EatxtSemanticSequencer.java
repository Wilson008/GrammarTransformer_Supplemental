/*
 * generated by Xtext 2.25.0
 */
package org.eclipse.eatxt.full.optimized.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.eatop.eastadl22.AUTOSAREvent;
import org.eclipse.eatop.eastadl22.Actor;
import org.eclipse.eatop.eastadl22.Actuator;
import org.eclipse.eatop.eastadl22.AgeConstraint;
import org.eclipse.eatop.eastadl22.Allocation;
import org.eclipse.eatop.eastadl22.AnalysisFunctionPrototype;
import org.eclipse.eatop.eastadl22.AnalysisFunctionType;
import org.eclipse.eatop.eastadl22.AnalysisLevel;
import org.eclipse.eatop.eastadl22.ArbitraryConstraint;
import org.eclipse.eatop.eastadl22.ArchitecturalDescription;
import org.eclipse.eatop.eastadl22.ArchitecturalModel;
import org.eclipse.eatop.eastadl22.Architecture;
import org.eclipse.eatop.eastadl22.ArrayDatatype;
import org.eclipse.eatop.eastadl22.Attribute;
import org.eclipse.eatop.eastadl22.AttributeQuantificationConstraint;
import org.eclipse.eatop.eastadl22.BasicSoftwareFunctionType;
import org.eclipse.eatop.eastadl22.Behavior;
import org.eclipse.eatop.eastadl22.BehaviorAttributeBinding;
import org.eclipse.eatop.eastadl22.BehaviorConstraintBindingAttribute;
import org.eclipse.eatop.eastadl22.BehaviorConstraintBindingEvent;
import org.eclipse.eatop.eastadl22.BehaviorConstraintInternalBinding_bindingThroughFunctionConnector;
import org.eclipse.eatop.eastadl22.BehaviorConstraintInternalBinding_bindingThroughHardwareConnector;
import org.eclipse.eatop.eastadl22.BehaviorConstraintPrototype;
import org.eclipse.eatop.eastadl22.BehaviorConstraintPrototype_errorModelTarget;
import org.eclipse.eatop.eastadl22.BehaviorConstraintPrototype_functionTarget;
import org.eclipse.eatop.eastadl22.BehaviorConstraintPrototype_hardwareComponentTarget;
import org.eclipse.eatop.eastadl22.BehaviorConstraintTargetBinding;
import org.eclipse.eatop.eastadl22.BehaviorConstraintType;
import org.eclipse.eatop.eastadl22.BurstConstraint;
import org.eclipse.eatop.eastadl22.BusinessOpportunity;
import org.eclipse.eatop.eastadl22.Claim;
import org.eclipse.eatop.eastadl22.ClampConnector;
import org.eclipse.eatop.eastadl22.ClampConnector_port;
import org.eclipse.eatop.eastadl22.Comment;
import org.eclipse.eatop.eastadl22.CommunicationHardwarePin;
import org.eclipse.eatop.eastadl22.CompositeDatatype;
import org.eclipse.eatop.eastadl22.ComputationConstraint;
import org.eclipse.eatop.eastadl22.ConfigurableContainer;
import org.eclipse.eatop.eastadl22.ConfigurationDecision;
import org.eclipse.eatop.eastadl22.ConfigurationDecisionFolder;
import org.eclipse.eatop.eastadl22.ContainerConfiguration;
import org.eclipse.eatop.eastadl22.DelayConstraint;
import org.eclipse.eatop.eastadl22.Dependability;
import org.eclipse.eatop.eastadl22.DeriveRequirement;
import org.eclipse.eatop.eastadl22.DesignFunctionPrototype;
import org.eclipse.eatop.eastadl22.DesignFunctionType;
import org.eclipse.eatop.eastadl22.DesignLevel;
import org.eclipse.eatop.eastadl22.DeviationAttributeSet;
import org.eclipse.eatop.eastadl22.EAArrayValue;
import org.eclipse.eatop.eastadl22.EABoolean;
import org.eclipse.eatop.eastadl22.EABooleanValue;
import org.eclipse.eatop.eastadl22.EACompositeValue;
import org.eclipse.eatop.eastadl22.EADatatypePrototype;
import org.eclipse.eatop.eastadl22.EAEnumerationValue;
import org.eclipse.eatop.eastadl22.EAExpression;
import org.eclipse.eatop.eastadl22.EANumerical;
import org.eclipse.eatop.eastadl22.EANumericalValue;
import org.eclipse.eatop.eastadl22.EAPackage;
import org.eclipse.eatop.eastadl22.EAString;
import org.eclipse.eatop.eastadl22.EAStringValue;
import org.eclipse.eatop.eastadl22.EAXML;
import org.eclipse.eatop.eastadl22.Eastadl22Package;
import org.eclipse.eatop.eastadl22.ElectricalComponent;
import org.eclipse.eatop.eastadl22.Enumeration;
import org.eclipse.eatop.eastadl22.EnumerationLiteral;
import org.eclipse.eatop.eastadl22.Environment;
import org.eclipse.eatop.eastadl22.ErrorBehavior;
import org.eclipse.eatop.eastadl22.ErrorModelPrototype;
import org.eclipse.eatop.eastadl22.ErrorModelPrototype_functionTarget;
import org.eclipse.eatop.eastadl22.ErrorModelPrototype_hwTarget;
import org.eclipse.eatop.eastadl22.ErrorModelType;
import org.eclipse.eatop.eastadl22.EventChain;
import org.eclipse.eatop.eastadl22.EventFaultFailure;
import org.eclipse.eatop.eastadl22.EventFeatureFlaw;
import org.eclipse.eatop.eastadl22.EventFunction;
import org.eclipse.eatop.eastadl22.EventFunctionClientServerPort;
import org.eclipse.eatop.eastadl22.EventFunctionClientServerPort_port;
import org.eclipse.eatop.eastadl22.EventFunctionFlowPort;
import org.eclipse.eatop.eastadl22.EventFunctionFlowPort_port;
import org.eclipse.eatop.eastadl22.EventFunction_function;
import org.eclipse.eatop.eastadl22.ExecutionTimeConstraint;
import org.eclipse.eatop.eastadl22.Extend;
import org.eclipse.eatop.eastadl22.ExtensionPoint;
import org.eclipse.eatop.eastadl22.ExternalEvent;
import org.eclipse.eatop.eastadl22.FailureOutPort;
import org.eclipse.eatop.eastadl22.FaultFailure;
import org.eclipse.eatop.eastadl22.FaultFailurePort_functionTarget;
import org.eclipse.eatop.eastadl22.FaultFailurePort_hwTarget;
import org.eclipse.eatop.eastadl22.FaultFailurePropagationLink;
import org.eclipse.eatop.eastadl22.FaultFailurePropagationLink_fromPort;
import org.eclipse.eatop.eastadl22.FaultFailurePropagationLink_toPort;
import org.eclipse.eatop.eastadl22.FaultFailure_anomaly;
import org.eclipse.eatop.eastadl22.FaultInPort;
import org.eclipse.eatop.eastadl22.Feature;
import org.eclipse.eatop.eastadl22.FeatureConfiguration;
import org.eclipse.eatop.eastadl22.FeatureConstraint;
import org.eclipse.eatop.eastadl22.FeatureFlaw;
import org.eclipse.eatop.eastadl22.FeatureGroup;
import org.eclipse.eatop.eastadl22.FeatureLink;
import org.eclipse.eatop.eastadl22.FeatureModel;
import org.eclipse.eatop.eastadl22.FunctionAllocation;
import org.eclipse.eatop.eastadl22.FunctionAllocation_allocatedElement;
import org.eclipse.eatop.eastadl22.FunctionAllocation_target;
import org.eclipse.eatop.eastadl22.FunctionBehavior;
import org.eclipse.eatop.eastadl22.FunctionClientServerInterface;
import org.eclipse.eatop.eastadl22.FunctionClientServerPort;
import org.eclipse.eatop.eastadl22.FunctionConnector;
import org.eclipse.eatop.eastadl22.FunctionConnector_port;
import org.eclipse.eatop.eastadl22.FunctionFlowPort;
import org.eclipse.eatop.eastadl22.FunctionPowerPort;
import org.eclipse.eatop.eastadl22.FunctionTrigger;
import org.eclipse.eatop.eastadl22.FunctionalDevice;
import org.eclipse.eatop.eastadl22.FunctionalSafetyConcept;
import org.eclipse.eatop.eastadl22.GenericConstraint;
import org.eclipse.eatop.eastadl22.GenericConstraintSet;
import org.eclipse.eatop.eastadl22.Ground;
import org.eclipse.eatop.eastadl22.HardwareComponentPrototype;
import org.eclipse.eatop.eastadl22.HardwareComponentType;
import org.eclipse.eatop.eastadl22.HardwareConnector;
import org.eclipse.eatop.eastadl22.HardwareConnector_port;
import org.eclipse.eatop.eastadl22.HardwareFunctionType;
import org.eclipse.eatop.eastadl22.HardwarePort;
import org.eclipse.eatop.eastadl22.HardwarePortConnector;
import org.eclipse.eatop.eastadl22.HardwarePortConnector_port;
import org.eclipse.eatop.eastadl22.Hazard;
import org.eclipse.eatop.eastadl22.HazardousEvent;
import org.eclipse.eatop.eastadl22.IOHardwarePin;
import org.eclipse.eatop.eastadl22.ImplementationLevel;
import org.eclipse.eatop.eastadl22.Include;
import org.eclipse.eatop.eastadl22.InputSynchronizationConstraint;
import org.eclipse.eatop.eastadl22.Interact;
import org.eclipse.eatop.eastadl22.InternalBinding;
import org.eclipse.eatop.eastadl22.InternalFaultPrototype;
import org.eclipse.eatop.eastadl22.Item;
import org.eclipse.eatop.eastadl22.LocalDeviceManager;
import org.eclipse.eatop.eastadl22.LogicalEvent;
import org.eclipse.eatop.eastadl22.LogicalPath;
import org.eclipse.eatop.eastadl22.LogicalPortConnector;
import org.eclipse.eatop.eastadl22.LogicalTimeCondition;
import org.eclipse.eatop.eastadl22.LogicalTransformation;
import org.eclipse.eatop.eastadl22.Mission;
import org.eclipse.eatop.eastadl22.Mode;
import org.eclipse.eatop.eastadl22.ModeEvent;
import org.eclipse.eatop.eastadl22.ModeGroup;
import org.eclipse.eatop.eastadl22.Node;
import org.eclipse.eatop.eastadl22.NonConcurrenceConstraint;
import org.eclipse.eatop.eastadl22.NonConcurrentConstraint_exclusive;
import org.eclipse.eatop.eastadl22.NonPreemptiveConstraint;
import org.eclipse.eatop.eastadl22.Operation;
import org.eclipse.eatop.eastadl22.OrderConstraint;
import org.eclipse.eatop.eastadl22.OutputSynchronizationConstraint;
import org.eclipse.eatop.eastadl22.PatternConstraint;
import org.eclipse.eatop.eastadl22.PeriodicConstraint;
import org.eclipse.eatop.eastadl22.PortGroup;
import org.eclipse.eatop.eastadl22.PowerHardwarePin;
import org.eclipse.eatop.eastadl22.PrecedenceConstraint;
import org.eclipse.eatop.eastadl22.PrivateContent;
import org.eclipse.eatop.eastadl22.ProblemStatement;
import org.eclipse.eatop.eastadl22.ProcessFaultPrototype;
import org.eclipse.eatop.eastadl22.ProductPositioning;
import org.eclipse.eatop.eastadl22.QualityRequirement;
import org.eclipse.eatop.eastadl22.Quantification;
import org.eclipse.eatop.eastadl22.QuantitativeSafetyConstraint;
import org.eclipse.eatop.eastadl22.Quantity;
import org.eclipse.eatop.eastadl22.RangeableValueType;
import org.eclipse.eatop.eastadl22.Rationale;
import org.eclipse.eatop.eastadl22.ReactionConstraint;
import org.eclipse.eatop.eastadl22.Realization;
import org.eclipse.eatop.eastadl22.Realization_realized;
import org.eclipse.eatop.eastadl22.Realization_realizedBy;
import org.eclipse.eatop.eastadl22.Refine;
import org.eclipse.eatop.eastadl22.Refine_refinedBy;
import org.eclipse.eatop.eastadl22.RepetitionConstraint;
import org.eclipse.eatop.eastadl22.Requirement;
import org.eclipse.eatop.eastadl22.RequirementsHierarchy;
import org.eclipse.eatop.eastadl22.RequirementsLink;
import org.eclipse.eatop.eastadl22.RequirementsModel;
import org.eclipse.eatop.eastadl22.RequirementsRelationshipGroup;
import org.eclipse.eatop.eastadl22.ReuseMetaInformation;
import org.eclipse.eatop.eastadl22.SafetyCase;
import org.eclipse.eatop.eastadl22.SafetyConstraint;
import org.eclipse.eatop.eastadl22.SafetyGoal;
import org.eclipse.eatop.eastadl22.Satisfy;
import org.eclipse.eatop.eastadl22.Satisfy_satisfiedBy;
import org.eclipse.eatop.eastadl22.SelectionCriterion;
import org.eclipse.eatop.eastadl22.Sensor;
import org.eclipse.eatop.eastadl22.Situation;
import org.eclipse.eatop.eastadl22.SporadicConstraint;
import org.eclipse.eatop.eastadl22.Stakeholder;
import org.eclipse.eatop.eastadl22.StakeholderNeed;
import org.eclipse.eatop.eastadl22.State;
import org.eclipse.eatop.eastadl22.StateEvent;
import org.eclipse.eatop.eastadl22.StrongDelayConstraint;
import org.eclipse.eatop.eastadl22.StrongSynchronizationConstraint;
import org.eclipse.eatop.eastadl22.SynchronizationConstraint;
import org.eclipse.eatop.eastadl22.SynchronousTransition;
import org.eclipse.eatop.eastadl22.SystemModel;
import org.eclipse.eatop.eastadl22.TakeRateConstraint;
import org.eclipse.eatop.eastadl22.TechnicalSafetyConcept;
import org.eclipse.eatop.eastadl22.TemporalConstraint;
import org.eclipse.eatop.eastadl22.Timing;
import org.eclipse.eatop.eastadl22.TimingExpression;
import org.eclipse.eatop.eastadl22.TransformationOccurrence;
import org.eclipse.eatop.eastadl22.Transition;
import org.eclipse.eatop.eastadl22.TransitionEvent;
import org.eclipse.eatop.eastadl22.Unit;
import org.eclipse.eatop.eastadl22.UseCase;
import org.eclipse.eatop.eastadl22.UserAttributeDefinition;
import org.eclipse.eatop.eastadl22.UserAttributedElement;
import org.eclipse.eatop.eastadl22.UserElementType;
import org.eclipse.eatop.eastadl22.VVActualOutcome;
import org.eclipse.eatop.eastadl22.VVCase;
import org.eclipse.eatop.eastadl22.VVCase_vvSubject;
import org.eclipse.eatop.eastadl22.VVIntendedOutcome;
import org.eclipse.eatop.eastadl22.VVLog;
import org.eclipse.eatop.eastadl22.VVProcedure;
import org.eclipse.eatop.eastadl22.VVStimuli;
import org.eclipse.eatop.eastadl22.VVTarget;
import org.eclipse.eatop.eastadl22.VVTarget_element;
import org.eclipse.eatop.eastadl22.Variability;
import org.eclipse.eatop.eastadl22.VariableElement;
import org.eclipse.eatop.eastadl22.VariationGroup;
import org.eclipse.eatop.eastadl22.VehicleFeature;
import org.eclipse.eatop.eastadl22.VehicleLevel;
import org.eclipse.eatop.eastadl22.VehicleLevelBinding;
import org.eclipse.eatop.eastadl22.VehicleSystem;
import org.eclipse.eatop.eastadl22.VerificationValidation;
import org.eclipse.eatop.eastadl22.Verify;
import org.eclipse.eatop.eastadl22.Warrant;
import org.eclipse.eatxt.full.optimized.services.EatxtGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class EatxtSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private EatxtGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Eastadl22Package.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Eastadl22Package.AUTOSAR_EVENT:
				sequence_AUTOSAREvent(context, (AUTOSAREvent) semanticObject); 
				return; 
			case Eastadl22Package.ACTOR:
				sequence_Actor(context, (Actor) semanticObject); 
				return; 
			case Eastadl22Package.ACTUATOR:
				sequence_Actuator(context, (Actuator) semanticObject); 
				return; 
			case Eastadl22Package.AGE_CONSTRAINT:
				sequence_AgeConstraint(context, (AgeConstraint) semanticObject); 
				return; 
			case Eastadl22Package.ALLOCATION:
				sequence_Allocation(context, (Allocation) semanticObject); 
				return; 
			case Eastadl22Package.ANALYSIS_FUNCTION_PROTOTYPE:
				sequence_AnalysisFunctionPrototype(context, (AnalysisFunctionPrototype) semanticObject); 
				return; 
			case Eastadl22Package.ANALYSIS_FUNCTION_TYPE:
				sequence_AnalysisFunctionType_Impl(context, (AnalysisFunctionType) semanticObject); 
				return; 
			case Eastadl22Package.ANALYSIS_LEVEL:
				sequence_AnalysisLevel(context, (AnalysisLevel) semanticObject); 
				return; 
			case Eastadl22Package.ARBITRARY_CONSTRAINT:
				sequence_ArbitraryConstraint(context, (ArbitraryConstraint) semanticObject); 
				return; 
			case Eastadl22Package.ARCHITECTURAL_DESCRIPTION:
				sequence_ArchitecturalDescription(context, (ArchitecturalDescription) semanticObject); 
				return; 
			case Eastadl22Package.ARCHITECTURAL_MODEL:
				sequence_ArchitecturalModel(context, (ArchitecturalModel) semanticObject); 
				return; 
			case Eastadl22Package.ARCHITECTURE:
				sequence_Architecture(context, (Architecture) semanticObject); 
				return; 
			case Eastadl22Package.ARRAY_DATATYPE:
				sequence_ArrayDatatype(context, (ArrayDatatype) semanticObject); 
				return; 
			case Eastadl22Package.ATTRIBUTE:
				sequence_Attribute_Impl(context, (Attribute) semanticObject); 
				return; 
			case Eastadl22Package.ATTRIBUTE_QUANTIFICATION_CONSTRAINT:
				sequence_AttributeQuantificationConstraint(context, (AttributeQuantificationConstraint) semanticObject); 
				return; 
			case Eastadl22Package.BASIC_SOFTWARE_FUNCTION_TYPE:
				sequence_BasicSoftwareFunctionType(context, (BasicSoftwareFunctionType) semanticObject); 
				return; 
			case Eastadl22Package.BEHAVIOR:
				sequence_Behavior(context, (Behavior) semanticObject); 
				return; 
			case Eastadl22Package.BEHAVIOR_ATTRIBUTE_BINDING:
				sequence_BehaviorAttributeBinding(context, (BehaviorAttributeBinding) semanticObject); 
				return; 
			case Eastadl22Package.BEHAVIOR_CONSTRAINT_BINDING_ATTRIBUTE:
				sequence_BehaviorConstraintBindingAttribute(context, (BehaviorConstraintBindingAttribute) semanticObject); 
				return; 
			case Eastadl22Package.BEHAVIOR_CONSTRAINT_BINDING_EVENT:
				sequence_BehaviorConstraintBindingEvent(context, (BehaviorConstraintBindingEvent) semanticObject); 
				return; 
			case Eastadl22Package.BEHAVIOR_CONSTRAINT_INTERNAL_BINDING_BINDING_THROUGH_FUNCTION_CONNECTOR:
				sequence_BehaviorConstraintInternalBinding_bindingThroughFunctionConnector(context, (BehaviorConstraintInternalBinding_bindingThroughFunctionConnector) semanticObject); 
				return; 
			case Eastadl22Package.BEHAVIOR_CONSTRAINT_INTERNAL_BINDING_BINDING_THROUGH_HARDWARE_CONNECTOR:
				sequence_BehaviorConstraintInternalBinding_bindingThroughHardwareConnector(context, (BehaviorConstraintInternalBinding_bindingThroughHardwareConnector) semanticObject); 
				return; 
			case Eastadl22Package.BEHAVIOR_CONSTRAINT_PROTOTYPE:
				sequence_BehaviorConstraintPrototype(context, (BehaviorConstraintPrototype) semanticObject); 
				return; 
			case Eastadl22Package.BEHAVIOR_CONSTRAINT_PROTOTYPE_ERROR_MODEL_TARGET:
				sequence_BehaviorConstraintPrototype_errorModelTarget(context, (BehaviorConstraintPrototype_errorModelTarget) semanticObject); 
				return; 
			case Eastadl22Package.BEHAVIOR_CONSTRAINT_PROTOTYPE_FUNCTION_TARGET:
				sequence_BehaviorConstraintPrototype_functionTarget(context, (BehaviorConstraintPrototype_functionTarget) semanticObject); 
				return; 
			case Eastadl22Package.BEHAVIOR_CONSTRAINT_PROTOTYPE_HARDWARE_COMPONENT_TARGET:
				sequence_BehaviorConstraintPrototype_hardwareComponentTarget(context, (BehaviorConstraintPrototype_hardwareComponentTarget) semanticObject); 
				return; 
			case Eastadl22Package.BEHAVIOR_CONSTRAINT_TARGET_BINDING:
				sequence_BehaviorConstraintTargetBinding(context, (BehaviorConstraintTargetBinding) semanticObject); 
				return; 
			case Eastadl22Package.BEHAVIOR_CONSTRAINT_TYPE:
				sequence_BehaviorConstraintType(context, (BehaviorConstraintType) semanticObject); 
				return; 
			case Eastadl22Package.BURST_CONSTRAINT:
				sequence_BurstConstraint(context, (BurstConstraint) semanticObject); 
				return; 
			case Eastadl22Package.BUSINESS_OPPORTUNITY:
				sequence_BusinessOpportunity(context, (BusinessOpportunity) semanticObject); 
				return; 
			case Eastadl22Package.CLAIM:
				sequence_Claim(context, (Claim) semanticObject); 
				return; 
			case Eastadl22Package.CLAMP_CONNECTOR:
				sequence_ClampConnector(context, (ClampConnector) semanticObject); 
				return; 
			case Eastadl22Package.CLAMP_CONNECTOR_PORT:
				sequence_ClampConnector_port(context, (ClampConnector_port) semanticObject); 
				return; 
			case Eastadl22Package.COMMENT:
				sequence_Comment_Impl(context, (Comment) semanticObject); 
				return; 
			case Eastadl22Package.COMMUNICATION_HARDWARE_PIN:
				sequence_CommunicationHardwarePin(context, (CommunicationHardwarePin) semanticObject); 
				return; 
			case Eastadl22Package.COMPOSITE_DATATYPE:
				sequence_CompositeDatatype(context, (CompositeDatatype) semanticObject); 
				return; 
			case Eastadl22Package.COMPUTATION_CONSTRAINT:
				sequence_ComputationConstraint(context, (ComputationConstraint) semanticObject); 
				return; 
			case Eastadl22Package.CONFIGURABLE_CONTAINER:
				sequence_ConfigurableContainer(context, (ConfigurableContainer) semanticObject); 
				return; 
			case Eastadl22Package.CONFIGURATION_DECISION:
				sequence_ConfigurationDecision(context, (ConfigurationDecision) semanticObject); 
				return; 
			case Eastadl22Package.CONFIGURATION_DECISION_FOLDER:
				sequence_ConfigurationDecisionFolder(context, (ConfigurationDecisionFolder) semanticObject); 
				return; 
			case Eastadl22Package.CONTAINER_CONFIGURATION:
				sequence_ContainerConfiguration(context, (ContainerConfiguration) semanticObject); 
				return; 
			case Eastadl22Package.DELAY_CONSTRAINT:
				sequence_DelayConstraint(context, (DelayConstraint) semanticObject); 
				return; 
			case Eastadl22Package.DEPENDABILITY:
				sequence_Dependability(context, (Dependability) semanticObject); 
				return; 
			case Eastadl22Package.DERIVE_REQUIREMENT:
				sequence_DeriveRequirement(context, (DeriveRequirement) semanticObject); 
				return; 
			case Eastadl22Package.DESIGN_FUNCTION_PROTOTYPE:
				sequence_DesignFunctionPrototype(context, (DesignFunctionPrototype) semanticObject); 
				return; 
			case Eastadl22Package.DESIGN_FUNCTION_TYPE:
				sequence_DesignFunctionType_Impl(context, (DesignFunctionType) semanticObject); 
				return; 
			case Eastadl22Package.DESIGN_LEVEL:
				sequence_DesignLevel(context, (DesignLevel) semanticObject); 
				return; 
			case Eastadl22Package.DEVIATION_ATTRIBUTE_SET:
				sequence_DeviationAttributeSet(context, (DeviationAttributeSet) semanticObject); 
				return; 
			case Eastadl22Package.EA_ARRAY_VALUE:
				sequence_EAArrayValue(context, (EAArrayValue) semanticObject); 
				return; 
			case Eastadl22Package.EA_BOOLEAN:
				sequence_EABoolean(context, (EABoolean) semanticObject); 
				return; 
			case Eastadl22Package.EA_BOOLEAN_VALUE:
				sequence_EABooleanValue(context, (EABooleanValue) semanticObject); 
				return; 
			case Eastadl22Package.EA_COMPOSITE_VALUE:
				sequence_EACompositeValue(context, (EACompositeValue) semanticObject); 
				return; 
			case Eastadl22Package.EA_DATATYPE_PROTOTYPE:
				sequence_EADatatypePrototype(context, (EADatatypePrototype) semanticObject); 
				return; 
			case Eastadl22Package.EA_ENUMERATION_VALUE:
				sequence_EAEnumerationValue(context, (EAEnumerationValue) semanticObject); 
				return; 
			case Eastadl22Package.EA_EXPRESSION:
				sequence_EAExpression_Impl(context, (EAExpression) semanticObject); 
				return; 
			case Eastadl22Package.EA_NUMERICAL:
				sequence_EANumerical(context, (EANumerical) semanticObject); 
				return; 
			case Eastadl22Package.EA_NUMERICAL_VALUE:
				sequence_EANumericalValue(context, (EANumericalValue) semanticObject); 
				return; 
			case Eastadl22Package.EA_PACKAGE:
				sequence_EAPackage(context, (EAPackage) semanticObject); 
				return; 
			case Eastadl22Package.EA_STRING:
				sequence_EAString(context, (EAString) semanticObject); 
				return; 
			case Eastadl22Package.EA_STRING_VALUE:
				sequence_EAStringValue(context, (EAStringValue) semanticObject); 
				return; 
			case Eastadl22Package.EAXML:
				sequence_EAXML(context, (EAXML) semanticObject); 
				return; 
			case Eastadl22Package.ELECTRICAL_COMPONENT:
				sequence_ElectricalComponent(context, (ElectricalComponent) semanticObject); 
				return; 
			case Eastadl22Package.ENUMERATION:
				sequence_Enumeration(context, (Enumeration) semanticObject); 
				return; 
			case Eastadl22Package.ENUMERATION_LITERAL:
				sequence_EnumerationLiteral(context, (EnumerationLiteral) semanticObject); 
				return; 
			case Eastadl22Package.ENVIRONMENT:
				sequence_Environment(context, (Environment) semanticObject); 
				return; 
			case Eastadl22Package.ERROR_BEHAVIOR:
				sequence_ErrorBehavior(context, (ErrorBehavior) semanticObject); 
				return; 
			case Eastadl22Package.ERROR_MODEL_PROTOTYPE:
				sequence_ErrorModelPrototype(context, (ErrorModelPrototype) semanticObject); 
				return; 
			case Eastadl22Package.ERROR_MODEL_PROTOTYPE_FUNCTION_TARGET:
				sequence_ErrorModelPrototype_functionTarget(context, (ErrorModelPrototype_functionTarget) semanticObject); 
				return; 
			case Eastadl22Package.ERROR_MODEL_PROTOTYPE_HW_TARGET:
				sequence_ErrorModelPrototype_hwTarget(context, (ErrorModelPrototype_hwTarget) semanticObject); 
				return; 
			case Eastadl22Package.ERROR_MODEL_TYPE:
				sequence_ErrorModelType(context, (ErrorModelType) semanticObject); 
				return; 
			case Eastadl22Package.EVENT_CHAIN:
				sequence_EventChain(context, (EventChain) semanticObject); 
				return; 
			case Eastadl22Package.EVENT_FAULT_FAILURE:
				sequence_EventFaultFailure(context, (EventFaultFailure) semanticObject); 
				return; 
			case Eastadl22Package.EVENT_FEATURE_FLAW:
				sequence_EventFeatureFlaw(context, (EventFeatureFlaw) semanticObject); 
				return; 
			case Eastadl22Package.EVENT_FUNCTION:
				sequence_EventFunction(context, (EventFunction) semanticObject); 
				return; 
			case Eastadl22Package.EVENT_FUNCTION_CLIENT_SERVER_PORT:
				sequence_EventFunctionClientServerPort(context, (EventFunctionClientServerPort) semanticObject); 
				return; 
			case Eastadl22Package.EVENT_FUNCTION_CLIENT_SERVER_PORT_PORT:
				sequence_EventFunctionClientServerPort_port(context, (EventFunctionClientServerPort_port) semanticObject); 
				return; 
			case Eastadl22Package.EVENT_FUNCTION_FLOW_PORT:
				sequence_EventFunctionFlowPort(context, (EventFunctionFlowPort) semanticObject); 
				return; 
			case Eastadl22Package.EVENT_FUNCTION_FLOW_PORT_PORT:
				sequence_EventFunctionFlowPort_port(context, (EventFunctionFlowPort_port) semanticObject); 
				return; 
			case Eastadl22Package.EVENT_FUNCTION_FUNCTION:
				sequence_EventFunction_function(context, (EventFunction_function) semanticObject); 
				return; 
			case Eastadl22Package.EXECUTION_TIME_CONSTRAINT:
				sequence_ExecutionTimeConstraint(context, (ExecutionTimeConstraint) semanticObject); 
				return; 
			case Eastadl22Package.EXTEND:
				sequence_Extend(context, (Extend) semanticObject); 
				return; 
			case Eastadl22Package.EXTENSION_POINT:
				sequence_ExtensionPoint(context, (ExtensionPoint) semanticObject); 
				return; 
			case Eastadl22Package.EXTERNAL_EVENT:
				sequence_ExternalEvent(context, (ExternalEvent) semanticObject); 
				return; 
			case Eastadl22Package.FAILURE_OUT_PORT:
				sequence_FailureOutPort(context, (FailureOutPort) semanticObject); 
				return; 
			case Eastadl22Package.FAULT_FAILURE:
				sequence_FaultFailure(context, (FaultFailure) semanticObject); 
				return; 
			case Eastadl22Package.FAULT_FAILURE_PORT_FUNCTION_TARGET:
				sequence_FaultFailurePort_functionTarget(context, (FaultFailurePort_functionTarget) semanticObject); 
				return; 
			case Eastadl22Package.FAULT_FAILURE_PORT_HW_TARGET:
				sequence_FaultFailurePort_hwTarget(context, (FaultFailurePort_hwTarget) semanticObject); 
				return; 
			case Eastadl22Package.FAULT_FAILURE_PROPAGATION_LINK:
				sequence_FaultFailurePropagationLink(context, (FaultFailurePropagationLink) semanticObject); 
				return; 
			case Eastadl22Package.FAULT_FAILURE_PROPAGATION_LINK_FROM_PORT:
				sequence_FaultFailurePropagationLink_fromPort(context, (FaultFailurePropagationLink_fromPort) semanticObject); 
				return; 
			case Eastadl22Package.FAULT_FAILURE_PROPAGATION_LINK_TO_PORT:
				sequence_FaultFailurePropagationLink_toPort(context, (FaultFailurePropagationLink_toPort) semanticObject); 
				return; 
			case Eastadl22Package.FAULT_FAILURE_ANOMALY:
				sequence_FaultFailure_anomaly(context, (FaultFailure_anomaly) semanticObject); 
				return; 
			case Eastadl22Package.FAULT_IN_PORT:
				sequence_FaultInPort(context, (FaultInPort) semanticObject); 
				return; 
			case Eastadl22Package.FEATURE:
				sequence_Feature_Impl(context, (Feature) semanticObject); 
				return; 
			case Eastadl22Package.FEATURE_CONFIGURATION:
				sequence_FeatureConfiguration(context, (FeatureConfiguration) semanticObject); 
				return; 
			case Eastadl22Package.FEATURE_CONSTRAINT:
				sequence_FeatureConstraint(context, (FeatureConstraint) semanticObject); 
				return; 
			case Eastadl22Package.FEATURE_FLAW:
				sequence_FeatureFlaw(context, (FeatureFlaw) semanticObject); 
				return; 
			case Eastadl22Package.FEATURE_GROUP:
				sequence_FeatureGroup(context, (FeatureGroup) semanticObject); 
				return; 
			case Eastadl22Package.FEATURE_LINK:
				sequence_FeatureLink(context, (FeatureLink) semanticObject); 
				return; 
			case Eastadl22Package.FEATURE_MODEL:
				sequence_FeatureModel(context, (FeatureModel) semanticObject); 
				return; 
			case Eastadl22Package.FUNCTION_ALLOCATION:
				sequence_FunctionAllocation(context, (FunctionAllocation) semanticObject); 
				return; 
			case Eastadl22Package.FUNCTION_ALLOCATION_ALLOCATED_ELEMENT:
				sequence_FunctionAllocation_allocatedElement(context, (FunctionAllocation_allocatedElement) semanticObject); 
				return; 
			case Eastadl22Package.FUNCTION_ALLOCATION_TARGET:
				sequence_FunctionAllocation_target(context, (FunctionAllocation_target) semanticObject); 
				return; 
			case Eastadl22Package.FUNCTION_BEHAVIOR:
				sequence_FunctionBehavior(context, (FunctionBehavior) semanticObject); 
				return; 
			case Eastadl22Package.FUNCTION_CLIENT_SERVER_INTERFACE:
				sequence_FunctionClientServerInterface(context, (FunctionClientServerInterface) semanticObject); 
				return; 
			case Eastadl22Package.FUNCTION_CLIENT_SERVER_PORT:
				sequence_FunctionClientServerPort(context, (FunctionClientServerPort) semanticObject); 
				return; 
			case Eastadl22Package.FUNCTION_CONNECTOR:
				sequence_FunctionConnector(context, (FunctionConnector) semanticObject); 
				return; 
			case Eastadl22Package.FUNCTION_CONNECTOR_PORT:
				sequence_FunctionConnector_port(context, (FunctionConnector_port) semanticObject); 
				return; 
			case Eastadl22Package.FUNCTION_FLOW_PORT:
				sequence_FunctionFlowPort(context, (FunctionFlowPort) semanticObject); 
				return; 
			case Eastadl22Package.FUNCTION_POWER_PORT:
				sequence_FunctionPowerPort(context, (FunctionPowerPort) semanticObject); 
				return; 
			case Eastadl22Package.FUNCTION_TRIGGER:
				sequence_FunctionTrigger(context, (FunctionTrigger) semanticObject); 
				return; 
			case Eastadl22Package.FUNCTIONAL_DEVICE:
				sequence_FunctionalDevice(context, (FunctionalDevice) semanticObject); 
				return; 
			case Eastadl22Package.FUNCTIONAL_SAFETY_CONCEPT:
				sequence_FunctionalSafetyConcept(context, (FunctionalSafetyConcept) semanticObject); 
				return; 
			case Eastadl22Package.GENERIC_CONSTRAINT:
				sequence_GenericConstraint_Impl(context, (GenericConstraint) semanticObject); 
				return; 
			case Eastadl22Package.GENERIC_CONSTRAINT_SET:
				sequence_GenericConstraintSet(context, (GenericConstraintSet) semanticObject); 
				return; 
			case Eastadl22Package.GROUND:
				sequence_Ground(context, (Ground) semanticObject); 
				return; 
			case Eastadl22Package.HARDWARE_COMPONENT_PROTOTYPE:
				sequence_HardwareComponentPrototype(context, (HardwareComponentPrototype) semanticObject); 
				return; 
			case Eastadl22Package.HARDWARE_COMPONENT_TYPE:
				sequence_HardwareComponentType_Impl(context, (HardwareComponentType) semanticObject); 
				return; 
			case Eastadl22Package.HARDWARE_CONNECTOR:
				sequence_HardwareConnector(context, (HardwareConnector) semanticObject); 
				return; 
			case Eastadl22Package.HARDWARE_CONNECTOR_PORT:
				sequence_HardwareConnector_port(context, (HardwareConnector_port) semanticObject); 
				return; 
			case Eastadl22Package.HARDWARE_FUNCTION_TYPE:
				sequence_HardwareFunctionType(context, (HardwareFunctionType) semanticObject); 
				return; 
			case Eastadl22Package.HARDWARE_PORT:
				sequence_HardwarePort(context, (HardwarePort) semanticObject); 
				return; 
			case Eastadl22Package.HARDWARE_PORT_CONNECTOR:
				sequence_HardwarePortConnector(context, (HardwarePortConnector) semanticObject); 
				return; 
			case Eastadl22Package.HARDWARE_PORT_CONNECTOR_PORT:
				sequence_HardwarePortConnector_port(context, (HardwarePortConnector_port) semanticObject); 
				return; 
			case Eastadl22Package.HAZARD:
				sequence_Hazard(context, (Hazard) semanticObject); 
				return; 
			case Eastadl22Package.HAZARDOUS_EVENT:
				sequence_HazardousEvent(context, (HazardousEvent) semanticObject); 
				return; 
			case Eastadl22Package.IO_HARDWARE_PIN:
				sequence_IOHardwarePin(context, (IOHardwarePin) semanticObject); 
				return; 
			case Eastadl22Package.IMPLEMENTATION_LEVEL:
				sequence_ImplementationLevel(context, (ImplementationLevel) semanticObject); 
				return; 
			case Eastadl22Package.INCLUDE:
				sequence_Include(context, (Include) semanticObject); 
				return; 
			case Eastadl22Package.INPUT_SYNCHRONIZATION_CONSTRAINT:
				sequence_InputSynchronizationConstraint(context, (InputSynchronizationConstraint) semanticObject); 
				return; 
			case Eastadl22Package.INTERACT:
				sequence_Interact(context, (Interact) semanticObject); 
				return; 
			case Eastadl22Package.INTERNAL_BINDING:
				sequence_InternalBinding(context, (InternalBinding) semanticObject); 
				return; 
			case Eastadl22Package.INTERNAL_FAULT_PROTOTYPE:
				sequence_InternalFaultPrototype(context, (InternalFaultPrototype) semanticObject); 
				return; 
			case Eastadl22Package.ITEM:
				sequence_Item(context, (Item) semanticObject); 
				return; 
			case Eastadl22Package.LOCAL_DEVICE_MANAGER:
				sequence_LocalDeviceManager(context, (LocalDeviceManager) semanticObject); 
				return; 
			case Eastadl22Package.LOGICAL_EVENT:
				sequence_LogicalEvent(context, (LogicalEvent) semanticObject); 
				return; 
			case Eastadl22Package.LOGICAL_PATH:
				sequence_LogicalPath(context, (LogicalPath) semanticObject); 
				return; 
			case Eastadl22Package.LOGICAL_PORT_CONNECTOR:
				sequence_LogicalPortConnector(context, (LogicalPortConnector) semanticObject); 
				return; 
			case Eastadl22Package.LOGICAL_TIME_CONDITION:
				sequence_LogicalTimeCondition(context, (LogicalTimeCondition) semanticObject); 
				return; 
			case Eastadl22Package.LOGICAL_TRANSFORMATION:
				sequence_LogicalTransformation(context, (LogicalTransformation) semanticObject); 
				return; 
			case Eastadl22Package.MISSION:
				sequence_Mission(context, (Mission) semanticObject); 
				return; 
			case Eastadl22Package.MODE:
				sequence_Mode(context, (Mode) semanticObject); 
				return; 
			case Eastadl22Package.MODE_EVENT:
				sequence_ModeEvent(context, (ModeEvent) semanticObject); 
				return; 
			case Eastadl22Package.MODE_GROUP:
				sequence_ModeGroup(context, (ModeGroup) semanticObject); 
				return; 
			case Eastadl22Package.NODE:
				sequence_Node(context, (Node) semanticObject); 
				return; 
			case Eastadl22Package.NON_CONCURRENCE_CONSTRAINT:
				sequence_NonConcurrenceConstraint(context, (NonConcurrenceConstraint) semanticObject); 
				return; 
			case Eastadl22Package.NON_CONCURRENT_CONSTRAINT_EXCLUSIVE:
				sequence_NonConcurrentConstraint_exclusive(context, (NonConcurrentConstraint_exclusive) semanticObject); 
				return; 
			case Eastadl22Package.NON_PREEMPTIVE_CONSTRAINT:
				sequence_NonPreemptiveConstraint(context, (NonPreemptiveConstraint) semanticObject); 
				return; 
			case Eastadl22Package.OPERATION:
				sequence_Operation(context, (Operation) semanticObject); 
				return; 
			case Eastadl22Package.ORDER_CONSTRAINT:
				sequence_OrderConstraint(context, (OrderConstraint) semanticObject); 
				return; 
			case Eastadl22Package.OUTPUT_SYNCHRONIZATION_CONSTRAINT:
				sequence_OutputSynchronizationConstraint(context, (OutputSynchronizationConstraint) semanticObject); 
				return; 
			case Eastadl22Package.PATTERN_CONSTRAINT:
				sequence_PatternConstraint(context, (PatternConstraint) semanticObject); 
				return; 
			case Eastadl22Package.PERIODIC_CONSTRAINT:
				sequence_PeriodicConstraint(context, (PeriodicConstraint) semanticObject); 
				return; 
			case Eastadl22Package.PORT_GROUP:
				sequence_PortGroup(context, (PortGroup) semanticObject); 
				return; 
			case Eastadl22Package.POWER_HARDWARE_PIN:
				sequence_PowerHardwarePin(context, (PowerHardwarePin) semanticObject); 
				return; 
			case Eastadl22Package.PRECEDENCE_CONSTRAINT:
				sequence_PrecedenceConstraint(context, (PrecedenceConstraint) semanticObject); 
				return; 
			case Eastadl22Package.PRIVATE_CONTENT:
				sequence_PrivateContent(context, (PrivateContent) semanticObject); 
				return; 
			case Eastadl22Package.PROBLEM_STATEMENT:
				sequence_ProblemStatement(context, (ProblemStatement) semanticObject); 
				return; 
			case Eastadl22Package.PROCESS_FAULT_PROTOTYPE:
				sequence_ProcessFaultPrototype(context, (ProcessFaultPrototype) semanticObject); 
				return; 
			case Eastadl22Package.PRODUCT_POSITIONING:
				sequence_ProductPositioning(context, (ProductPositioning) semanticObject); 
				return; 
			case Eastadl22Package.QUALITY_REQUIREMENT:
				sequence_QualityRequirement(context, (QualityRequirement) semanticObject); 
				return; 
			case Eastadl22Package.QUANTIFICATION:
				sequence_Quantification_Impl(context, (Quantification) semanticObject); 
				return; 
			case Eastadl22Package.QUANTITATIVE_SAFETY_CONSTRAINT:
				sequence_QuantitativeSafetyConstraint(context, (QuantitativeSafetyConstraint) semanticObject); 
				return; 
			case Eastadl22Package.QUANTITY:
				sequence_Quantity(context, (Quantity) semanticObject); 
				return; 
			case Eastadl22Package.RANGEABLE_VALUE_TYPE:
				sequence_RangeableValueType(context, (RangeableValueType) semanticObject); 
				return; 
			case Eastadl22Package.RATIONALE:
				sequence_Rationale(context, (Rationale) semanticObject); 
				return; 
			case Eastadl22Package.REACTION_CONSTRAINT:
				sequence_ReactionConstraint(context, (ReactionConstraint) semanticObject); 
				return; 
			case Eastadl22Package.REALIZATION:
				sequence_Realization(context, (Realization) semanticObject); 
				return; 
			case Eastadl22Package.REALIZATION_REALIZED:
				sequence_Realization_realized(context, (Realization_realized) semanticObject); 
				return; 
			case Eastadl22Package.REALIZATION_REALIZED_BY:
				sequence_Realization_realizedBy(context, (Realization_realizedBy) semanticObject); 
				return; 
			case Eastadl22Package.REFINE:
				sequence_Refine(context, (Refine) semanticObject); 
				return; 
			case Eastadl22Package.REFINE_REFINED_BY:
				sequence_Refine_refinedBy(context, (Refine_refinedBy) semanticObject); 
				return; 
			case Eastadl22Package.REPETITION_CONSTRAINT:
				sequence_RepetitionConstraint(context, (RepetitionConstraint) semanticObject); 
				return; 
			case Eastadl22Package.REQUIREMENT:
				sequence_Requirement_Impl(context, (Requirement) semanticObject); 
				return; 
			case Eastadl22Package.REQUIREMENTS_HIERARCHY:
				sequence_RequirementsHierarchy_Impl(context, (RequirementsHierarchy) semanticObject); 
				return; 
			case Eastadl22Package.REQUIREMENTS_LINK:
				sequence_RequirementsLink(context, (RequirementsLink) semanticObject); 
				return; 
			case Eastadl22Package.REQUIREMENTS_MODEL:
				sequence_RequirementsModel(context, (RequirementsModel) semanticObject); 
				return; 
			case Eastadl22Package.REQUIREMENTS_RELATIONSHIP_GROUP:
				sequence_RequirementsRelationshipGroup(context, (RequirementsRelationshipGroup) semanticObject); 
				return; 
			case Eastadl22Package.REUSE_META_INFORMATION:
				sequence_ReuseMetaInformation(context, (ReuseMetaInformation) semanticObject); 
				return; 
			case Eastadl22Package.SAFETY_CASE:
				sequence_SafetyCase(context, (SafetyCase) semanticObject); 
				return; 
			case Eastadl22Package.SAFETY_CONSTRAINT:
				sequence_SafetyConstraint(context, (SafetyConstraint) semanticObject); 
				return; 
			case Eastadl22Package.SAFETY_GOAL:
				sequence_SafetyGoal(context, (SafetyGoal) semanticObject); 
				return; 
			case Eastadl22Package.SATISFY:
				sequence_Satisfy(context, (Satisfy) semanticObject); 
				return; 
			case Eastadl22Package.SATISFY_SATISFIED_BY:
				sequence_Satisfy_satisfiedBy(context, (Satisfy_satisfiedBy) semanticObject); 
				return; 
			case Eastadl22Package.SELECTION_CRITERION:
				sequence_SelectionCriterion(context, (SelectionCriterion) semanticObject); 
				return; 
			case Eastadl22Package.SENSOR:
				sequence_Sensor(context, (Sensor) semanticObject); 
				return; 
			case Eastadl22Package.SITUATION:
				sequence_Situation(context, (Situation) semanticObject); 
				return; 
			case Eastadl22Package.SPORADIC_CONSTRAINT:
				sequence_SporadicConstraint(context, (SporadicConstraint) semanticObject); 
				return; 
			case Eastadl22Package.STAKEHOLDER:
				sequence_Stakeholder(context, (Stakeholder) semanticObject); 
				return; 
			case Eastadl22Package.STAKEHOLDER_NEED:
				sequence_StakeholderNeed(context, (StakeholderNeed) semanticObject); 
				return; 
			case Eastadl22Package.STATE:
				sequence_State(context, (State) semanticObject); 
				return; 
			case Eastadl22Package.STATE_EVENT:
				sequence_StateEvent(context, (StateEvent) semanticObject); 
				return; 
			case Eastadl22Package.STRONG_DELAY_CONSTRAINT:
				sequence_StrongDelayConstraint(context, (StrongDelayConstraint) semanticObject); 
				return; 
			case Eastadl22Package.STRONG_SYNCHRONIZATION_CONSTRAINT:
				sequence_StrongSynchronizationConstraint(context, (StrongSynchronizationConstraint) semanticObject); 
				return; 
			case Eastadl22Package.SYNCHRONIZATION_CONSTRAINT:
				sequence_SynchronizationConstraint(context, (SynchronizationConstraint) semanticObject); 
				return; 
			case Eastadl22Package.SYNCHRONOUS_TRANSITION:
				sequence_SynchronousTransition(context, (SynchronousTransition) semanticObject); 
				return; 
			case Eastadl22Package.SYSTEM_MODEL:
				sequence_SystemModel(context, (SystemModel) semanticObject); 
				return; 
			case Eastadl22Package.TAKE_RATE_CONSTRAINT:
				sequence_TakeRateConstraint(context, (TakeRateConstraint) semanticObject); 
				return; 
			case Eastadl22Package.TECHNICAL_SAFETY_CONCEPT:
				sequence_TechnicalSafetyConcept(context, (TechnicalSafetyConcept) semanticObject); 
				return; 
			case Eastadl22Package.TEMPORAL_CONSTRAINT:
				sequence_TemporalConstraint(context, (TemporalConstraint) semanticObject); 
				return; 
			case Eastadl22Package.TIMING:
				sequence_Timing(context, (Timing) semanticObject); 
				return; 
			case Eastadl22Package.TIMING_EXPRESSION:
				sequence_TimingExpression(context, (TimingExpression) semanticObject); 
				return; 
			case Eastadl22Package.TRANSFORMATION_OCCURRENCE:
				sequence_TransformationOccurrence(context, (TransformationOccurrence) semanticObject); 
				return; 
			case Eastadl22Package.TRANSITION:
				sequence_Transition_Impl(context, (Transition) semanticObject); 
				return; 
			case Eastadl22Package.TRANSITION_EVENT:
				sequence_TransitionEvent_Impl(context, (TransitionEvent) semanticObject); 
				return; 
			case Eastadl22Package.UNIT:
				sequence_Unit(context, (Unit) semanticObject); 
				return; 
			case Eastadl22Package.USE_CASE:
				sequence_UseCase(context, (UseCase) semanticObject); 
				return; 
			case Eastadl22Package.USER_ATTRIBUTE_DEFINITION:
				sequence_UserAttributeDefinition(context, (UserAttributeDefinition) semanticObject); 
				return; 
			case Eastadl22Package.USER_ATTRIBUTED_ELEMENT:
				sequence_UserAttributedElement(context, (UserAttributedElement) semanticObject); 
				return; 
			case Eastadl22Package.USER_ELEMENT_TYPE:
				sequence_UserElementType(context, (UserElementType) semanticObject); 
				return; 
			case Eastadl22Package.VV_ACTUAL_OUTCOME:
				sequence_VVActualOutcome(context, (VVActualOutcome) semanticObject); 
				return; 
			case Eastadl22Package.VV_CASE:
				sequence_VVCase(context, (VVCase) semanticObject); 
				return; 
			case Eastadl22Package.VV_CASE_VV_SUBJECT:
				sequence_VVCase_vvSubject(context, (VVCase_vvSubject) semanticObject); 
				return; 
			case Eastadl22Package.VV_INTENDED_OUTCOME:
				sequence_VVIntendedOutcome(context, (VVIntendedOutcome) semanticObject); 
				return; 
			case Eastadl22Package.VV_LOG:
				sequence_VVLog(context, (VVLog) semanticObject); 
				return; 
			case Eastadl22Package.VV_PROCEDURE:
				sequence_VVProcedure(context, (VVProcedure) semanticObject); 
				return; 
			case Eastadl22Package.VV_STIMULI:
				sequence_VVStimuli(context, (VVStimuli) semanticObject); 
				return; 
			case Eastadl22Package.VV_TARGET:
				sequence_VVTarget(context, (VVTarget) semanticObject); 
				return; 
			case Eastadl22Package.VV_TARGET_ELEMENT:
				sequence_VVTarget_element(context, (VVTarget_element) semanticObject); 
				return; 
			case Eastadl22Package.VARIABILITY:
				sequence_Variability(context, (Variability) semanticObject); 
				return; 
			case Eastadl22Package.VARIABLE_ELEMENT:
				sequence_VariableElement(context, (VariableElement) semanticObject); 
				return; 
			case Eastadl22Package.VARIATION_GROUP:
				sequence_VariationGroup(context, (VariationGroup) semanticObject); 
				return; 
			case Eastadl22Package.VEHICLE_FEATURE:
				sequence_VehicleFeature(context, (VehicleFeature) semanticObject); 
				return; 
			case Eastadl22Package.VEHICLE_LEVEL:
				sequence_VehicleLevel(context, (VehicleLevel) semanticObject); 
				return; 
			case Eastadl22Package.VEHICLE_LEVEL_BINDING:
				sequence_VehicleLevelBinding(context, (VehicleLevelBinding) semanticObject); 
				return; 
			case Eastadl22Package.VEHICLE_SYSTEM:
				sequence_VehicleSystem(context, (VehicleSystem) semanticObject); 
				return; 
			case Eastadl22Package.VERIFICATION_VALIDATION:
				sequence_VerificationValidation(context, (VerificationValidation) semanticObject); 
				return; 
			case Eastadl22Package.VERIFY:
				sequence_Verify(context, (Verify) semanticObject); 
				return; 
			case Eastadl22Package.WARRANT:
				sequence_Warrant(context, (Warrant) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     TimingDescription returns AUTOSAREvent
	 *     Identifiable returns AUTOSAREvent
	 *     Event returns AUTOSAREvent
	 *     EAElement returns AUTOSAREvent
	 *     AUTOSAREvent returns AUTOSAREvent
	 *
	 * Constraint:
	 *     (shortName=Identifier category=Identifier? uuid=UUID? name=String0? (ownedComment+=Comment ownedComment+=Comment*)?)
	 */
	protected void sequence_AUTOSAREvent(ISerializationContext context, AUTOSAREvent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns Actor
	 *     TraceableSpecification returns Actor
	 *     Identifiable returns Actor
	 *     EAElement returns Actor
	 *     Actor returns Actor
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_Actor(ISerializationContext context, Actor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns Actuator
	 *     HardwareComponentType returns Actuator
	 *     Identifiable returns Actuator
	 *     EAElement returns Actuator
	 *     Actuator returns Actuator
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (traceableSpecification+=[TraceableSpecification|EString] traceableSpecification+=[TraceableSpecification|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (ownedRelationship+=Relationship ownedRelationship+=Relationship*)? 
	 *         (pin+=HardwarePin pin+=HardwarePin*)? 
	 *         (part+=HardwareComponentPrototype part+=HardwareComponentPrototype*)? 
	 *         (connector+=HardwareConnector connector+=HardwareConnector*)? 
	 *         (port+=HardwarePort port+=HardwarePort*)? 
	 *         (portConnector+=PortConnector portConnector+=PortConnector*)?
	 *     )
	 */
	protected void sequence_Actuator(ISerializationContext context, Actuator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimingConstraint returns AgeConstraint
	 *     Identifiable returns AgeConstraint
	 *     EAElement returns AgeConstraint
	 *     AgeConstraint returns AgeConstraint
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         mode=[Mode|EString]? 
	 *         scope=[EventChain|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         minimum=TimingExpression? 
	 *         maximum=TimingExpression?
	 *     )
	 */
	protected void sequence_AgeConstraint(ISerializationContext context, AgeConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns Allocation
	 *     EAElement returns Allocation
	 *     Allocation returns Allocation
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (functionAllocation+=FunctionAllocation functionAllocation+=FunctionAllocation*)?
	 *     )
	 */
	protected void sequence_Allocation(ISerializationContext context, Allocation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionPrototype returns AnalysisFunctionPrototype
	 *     Identifiable returns AnalysisFunctionPrototype
	 *     EAElement returns AnalysisFunctionPrototype
	 *     AnalysisFunctionPrototype returns AnalysisFunctionPrototype
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         type=[AnalysisFunctionType|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_AnalysisFunctionPrototype(ISerializationContext context, AnalysisFunctionPrototype semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns AnalysisFunctionType
	 *     FunctionType returns AnalysisFunctionType
	 *     Identifiable returns AnalysisFunctionType
	 *     AnalysisFunctionType returns AnalysisFunctionType
	 *     EAElement returns AnalysisFunctionType
	 *     AnalysisFunctionType_Impl returns AnalysisFunctionType
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         isElementary=Boolean? 
	 *         (traceableSpecification+=[TraceableSpecification|EString] traceableSpecification+=[TraceableSpecification|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (ownedRelationship+=Relationship ownedRelationship+=Relationship*)? 
	 *         (portGroup+=PortGroup portGroup+=PortGroup*)? 
	 *         (connector+=FunctionConnector connector+=FunctionConnector*)? 
	 *         (port+=FunctionPort port+=FunctionPort*)? 
	 *         (part+=AnalysisFunctionPrototype part+=AnalysisFunctionPrototype*)?
	 *     )
	 */
	protected void sequence_AnalysisFunctionType_Impl(ISerializationContext context, AnalysisFunctionType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns AnalysisLevel
	 *     Identifiable returns AnalysisLevel
	 *     EAElement returns AnalysisLevel
	 *     AnalysisLevel returns AnalysisLevel
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (traceableSpecification+=[TraceableSpecification|EString] traceableSpecification+=[TraceableSpecification|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (ownedRelationship+=Relationship ownedRelationship+=Relationship*)? 
	 *         functionalAnalysisArchitecture=AnalysisFunctionPrototype?
	 *     )
	 */
	protected void sequence_AnalysisLevel(ISerializationContext context, AnalysisLevel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimingConstraint returns ArbitraryConstraint
	 *     Identifiable returns ArbitraryConstraint
	 *     EAElement returns ArbitraryConstraint
	 *     ArbitraryConstraint returns ArbitraryConstraint
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         mode=[Mode|EString]? 
	 *         event=[Event|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         minimum+=TimingExpression 
	 *         minimum+=TimingExpression* 
	 *         maximum+=TimingExpression 
	 *         maximum+=TimingExpression*
	 *     )
	 */
	protected void sequence_ArbitraryConstraint(ISerializationContext context, ArbitraryConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns ArchitecturalDescription
	 *     EAElement returns ArchitecturalDescription
	 *     ArchitecturalDescription returns ArchitecturalDescription
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         identifies+=[Stakeholder|EString] 
	 *         identifies+=[Stakeholder|EString]* 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         aggregates+=ArchitecturalModel 
	 *         aggregates+=ArchitecturalModel*
	 *     )
	 */
	protected void sequence_ArchitecturalDescription(ISerializationContext context, ArchitecturalDescription semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns ArchitecturalModel
	 *     EAElement returns ArchitecturalModel
	 *     ArchitecturalModel returns ArchitecturalModel
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (isConceptFor+=[SystemModel|EString] isConceptFor+=[SystemModel|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_ArchitecturalModel(ISerializationContext context, ArchitecturalModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns Architecture
	 *     EAElement returns Architecture
	 *     Architecture returns Architecture
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         describedBy=[ArchitecturalDescription|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_Architecture(ISerializationContext context, Architecture semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns ArrayDatatype
	 *     TraceableSpecification returns ArrayDatatype
	 *     EADatatype returns ArrayDatatype
	 *     Identifiable returns ArrayDatatype
	 *     EAElement returns ArrayDatatype
	 *     ArrayDatatype returns ArrayDatatype
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         maxLength=Integer? 
	 *         minLength=Integer? 
	 *         elementType=[EADatatype|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_ArrayDatatype(ISerializationContext context, ArrayDatatype semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns AttributeQuantificationConstraint
	 *     EAElement returns AttributeQuantificationConstraint
	 *     AttributeQuantificationConstraint returns AttributeQuantificationConstraint
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (attribute+=Attribute attribute+=Attribute*)? 
	 *         (quantification+=Quantification quantification+=Quantification*)?
	 *     )
	 */
	protected void sequence_AttributeQuantificationConstraint(ISerializationContext context, AttributeQuantificationConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns Attribute
	 *     BehaviorConstraintParameter returns Attribute
	 *     Attribute returns Attribute
	 *     EAElement returns Attribute
	 *     Attribute_Impl returns Attribute
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         isExternVisible=Boolean 
	 *         type=[EADatatype|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_Attribute_Impl(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns BasicSoftwareFunctionType
	 *     FunctionType returns BasicSoftwareFunctionType
	 *     Identifiable returns BasicSoftwareFunctionType
	 *     DesignFunctionType returns BasicSoftwareFunctionType
	 *     EAElement returns BasicSoftwareFunctionType
	 *     BasicSoftwareFunctionType returns BasicSoftwareFunctionType
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         isElementary=Boolean? 
	 *         (traceableSpecification+=[TraceableSpecification|EString] traceableSpecification+=[TraceableSpecification|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (ownedRelationship+=Relationship ownedRelationship+=Relationship*)? 
	 *         (portGroup+=PortGroup portGroup+=PortGroup*)? 
	 *         (connector+=FunctionConnector connector+=FunctionConnector*)? 
	 *         (port+=FunctionPort port+=FunctionPort*)? 
	 *         (part+=DesignFunctionPrototype part+=DesignFunctionPrototype*)?
	 *     )
	 */
	protected void sequence_BasicSoftwareFunctionType(ISerializationContext context, BasicSoftwareFunctionType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Relationship returns BehaviorAttributeBinding
	 *     Identifiable returns BehaviorAttributeBinding
	 *     EAElement returns BehaviorAttributeBinding
	 *     BehaviorAttributeBinding returns BehaviorAttributeBinding
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         attribute+=[Attribute|EString] 
	 *         attribute+=[Attribute|EString]* 
	 *         (visibleThroughAnomaly+=[Anomaly|EString] visibleThroughAnomaly+=[Anomaly|EString]*)? 
	 *         (visibleThroughHardwarePort+=[HardwarePort|EString] visibleThroughHardwarePort+=[HardwarePort|EString]*)? 
	 *         (visibleThroughHardwarePin+=[HardwarePin|EString] visibleThroughHardwarePin+=[HardwarePin|EString]*)? 
	 *         (visibleThroughFunctionPort+=[FunctionPort|EString] visibleThroughFunctionPort+=[FunctionPort|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_BehaviorAttributeBinding(ISerializationContext context, BehaviorAttributeBinding semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns BehaviorConstraintBindingAttribute
	 *     BehaviorConstraintInternalBinding returns BehaviorConstraintBindingAttribute
	 *     BehaviorConstraintParameter returns BehaviorConstraintBindingAttribute
	 *     Attribute returns BehaviorConstraintBindingAttribute
	 *     EAElement returns BehaviorConstraintBindingAttribute
	 *     BehaviorConstraintBindingAttribute returns BehaviorConstraintBindingAttribute
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         isExternVisible=Boolean 
	 *         type=[EADatatype|EString] 
	 *         (bindingThroughClampConnector+=[ClampConnector|EString] bindingThroughClampConnector+=[ClampConnector|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (
	 *             bindingThroughHardwareConnector+=BehaviorConstraintInternalBinding_bindingThroughHardwareConnector 
	 *             bindingThroughHardwareConnector+=BehaviorConstraintInternalBinding_bindingThroughHardwareConnector*
	 *         )? 
	 *         (
	 *             bindingThroughFunctionConnector+=BehaviorConstraintInternalBinding_bindingThroughFunctionConnector 
	 *             bindingThroughFunctionConnector+=BehaviorConstraintInternalBinding_bindingThroughFunctionConnector*
	 *         )?
	 *     )
	 */
	protected void sequence_BehaviorConstraintBindingAttribute(ISerializationContext context, BehaviorConstraintBindingAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns BehaviorConstraintBindingEvent
	 *     BehaviorConstraintInternalBinding returns BehaviorConstraintBindingEvent
	 *     BehaviorConstraintParameter returns BehaviorConstraintBindingEvent
	 *     TransitionEvent returns BehaviorConstraintBindingEvent
	 *     EAElement returns BehaviorConstraintBindingEvent
	 *     BehaviorConstraintBindingEvent returns BehaviorConstraintBindingEvent
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (occurredLogicalEvent+=[LogicalEvent|EString] occurredLogicalEvent+=[LogicalEvent|EString]*)? 
	 *         (occurredFaultFailure+=[FaultFailure|EString] occurredFaultFailure+=[FaultFailure|EString]*)? 
	 *         (occurredHazardousEvent+=[HazardousEvent|EString] occurredHazardousEvent+=[HazardousEvent|EString]*)? 
	 *         (occurredFeatureFlaw+=[FeatureFlaw|EString] occurredFeatureFlaw+=[FeatureFlaw|EString]*)? 
	 *         (occurredExecutionEvent+=[Event|EString] occurredExecutionEvent+=[Event|EString]*)? 
	 *         (bindingThroughClampConnector+=[ClampConnector|EString] bindingThroughClampConnector+=[ClampConnector|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (
	 *             bindingThroughHardwareConnector+=BehaviorConstraintInternalBinding_bindingThroughHardwareConnector 
	 *             bindingThroughHardwareConnector+=BehaviorConstraintInternalBinding_bindingThroughHardwareConnector*
	 *         )? 
	 *         (
	 *             bindingThroughFunctionConnector+=BehaviorConstraintInternalBinding_bindingThroughFunctionConnector 
	 *             bindingThroughFunctionConnector+=BehaviorConstraintInternalBinding_bindingThroughFunctionConnector*
	 *         )?
	 *     )
	 */
	protected void sequence_BehaviorConstraintBindingEvent(ISerializationContext context, BehaviorConstraintBindingEvent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BehaviorConstraintInternalBinding_bindingThroughFunctionConnector returns BehaviorConstraintInternalBinding_bindingThroughFunctionConnector
	 *
	 * Constraint:
	 *     (
	 *         (functionPrototype+=[FunctionPrototype|EString] functionPrototype+=[FunctionPrototype|EString]*)? 
	 *         functionConnector=[FunctionConnector|EString]
	 *     )
	 */
	protected void sequence_BehaviorConstraintInternalBinding_bindingThroughFunctionConnector(ISerializationContext context, BehaviorConstraintInternalBinding_bindingThroughFunctionConnector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BehaviorConstraintInternalBinding_bindingThroughHardwareConnector returns BehaviorConstraintInternalBinding_bindingThroughHardwareConnector
	 *
	 * Constraint:
	 *     (
	 *         (hardwareComponentPrototype+=[HardwareComponentPrototype|EString] hardwareComponentPrototype+=[HardwareComponentPrototype|EString]*)? 
	 *         hardwareConnector=[HardwareConnector|EString]
	 *     )
	 */
	protected void sequence_BehaviorConstraintInternalBinding_bindingThroughHardwareConnector(ISerializationContext context, BehaviorConstraintInternalBinding_bindingThroughHardwareConnector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns BehaviorConstraintPrototype
	 *     TraceableSpecification returns BehaviorConstraintPrototype
	 *     Identifiable returns BehaviorConstraintPrototype
	 *     EAElement returns BehaviorConstraintPrototype
	 *     BehaviorConstraintPrototype returns BehaviorConstraintPrototype
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         type=[BehaviorConstraintType|EString] 
	 *         (instantiationVariable+=[BehaviorConstraintInternalBinding|EString] instantiationVariable+=[BehaviorConstraintInternalBinding|EString]*)? 
	 *         (targetedVehicleFeatureElement+=[VehicleFeature|EString] targetedVehicleFeatureElement+=[VehicleFeature|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (errorModelTarget+=BehaviorConstraintPrototype_errorModelTarget errorModelTarget+=BehaviorConstraintPrototype_errorModelTarget*)? 
	 *         (functionTarget+=BehaviorConstraintPrototype_functionTarget functionTarget+=BehaviorConstraintPrototype_functionTarget*)? 
	 *         (
	 *             hardwareComponentTarget+=BehaviorConstraintPrototype_hardwareComponentTarget 
	 *             hardwareComponentTarget+=BehaviorConstraintPrototype_hardwareComponentTarget*
	 *         )?
	 *     )
	 */
	protected void sequence_BehaviorConstraintPrototype(ISerializationContext context, BehaviorConstraintPrototype semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BehaviorConstraintPrototype_errorModelTarget returns BehaviorConstraintPrototype_errorModelTarget
	 *
	 * Constraint:
	 *     (
	 *         (errorModelPrototype_context+=[ErrorModelPrototype|EString] errorModelPrototype_context+=[ErrorModelPrototype|EString]*)? 
	 *         errorModelPrototype_target=[ErrorModelPrototype|EString]
	 *     )
	 */
	protected void sequence_BehaviorConstraintPrototype_errorModelTarget(ISerializationContext context, BehaviorConstraintPrototype_errorModelTarget semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BehaviorConstraintPrototype_functionTarget returns BehaviorConstraintPrototype_functionTarget
	 *
	 * Constraint:
	 *     (
	 *         functionPrototype_target=[FunctionPrototype|EString] 
	 *         (functionPrototype_context+=[FunctionPrototype|EString] functionPrototype_context+=[FunctionPrototype|EString]*)?
	 *     )
	 */
	protected void sequence_BehaviorConstraintPrototype_functionTarget(ISerializationContext context, BehaviorConstraintPrototype_functionTarget semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BehaviorConstraintPrototype_hardwareComponentTarget returns BehaviorConstraintPrototype_hardwareComponentTarget
	 *
	 * Constraint:
	 *     (
	 *         hardwareComponentPrototype_target=[HardwareComponentPrototype|EString] 
	 *         (
	 *             hardwareComponentPrototype_context+=[HardwareComponentPrototype|EString] 
	 *             hardwareComponentPrototype_context+=[HardwareComponentPrototype|EString]*
	 *         )?
	 *     )
	 */
	protected void sequence_BehaviorConstraintPrototype_hardwareComponentTarget(ISerializationContext context, BehaviorConstraintPrototype_hardwareComponentTarget semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Relationship returns BehaviorConstraintTargetBinding
	 *     Identifiable returns BehaviorConstraintTargetBinding
	 *     EAElement returns BehaviorConstraintTargetBinding
	 *     BehaviorConstraintTargetBinding returns BehaviorConstraintTargetBinding
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         behaviorConstraintType=[BehaviorConstraintType|EString] 
	 *         (constrainedErrorModel+=[ErrorModelType|EString] constrainedErrorModel+=[ErrorModelType|EString]*)? 
	 *         (constrainedFunctionTriggering+=[FunctionTrigger|EString] constrainedFunctionTriggering+=[FunctionTrigger|EString]*)? 
	 *         (constrainedFunctionBehavior+=[FunctionBehavior|EString] constrainedFunctionBehavior+=[FunctionBehavior|EString]*)? 
	 *         (constrainedModeBehavior+=[Mode|EString] constrainedModeBehavior+=[Mode|EString]*)? 
	 *         (targetedHardwareComponentType+=[HardwareComponentType|EString] targetedHardwareComponentType+=[HardwareComponentType|EString]*)? 
	 *         (targetedFunctionType+=[FunctionType|EString] targetedFunctionType+=[FunctionType|EString]*)? 
	 *         (targetedVehicleFeature+=[VehicleFeature|EString] targetedVehicleFeature+=[VehicleFeature|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_BehaviorConstraintTargetBinding(ISerializationContext context, BehaviorConstraintTargetBinding semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns BehaviorConstraintType
	 *     Identifiable returns BehaviorConstraintType
	 *     EAElement returns BehaviorConstraintType
	 *     BehaviorConstraintType returns BehaviorConstraintType
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (traceableSpecification+=[TraceableSpecification|EString] traceableSpecification+=[TraceableSpecification|EString]*)? 
	 *         (interfaceVariable+=[BehaviorConstraintParameter|EString] interfaceVariable+=[BehaviorConstraintParameter|EString]*)? 
	 *         (sharedVariable+=[BehaviorConstraintInternalBinding|EString] sharedVariable+=[BehaviorConstraintInternalBinding|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (ownedRelationship+=Relationship ownedRelationship+=Relationship*)? 
	 *         (part+=BehaviorConstraintPrototype part+=BehaviorConstraintPrototype*)? 
	 *         (attributeQuantificationConstraint+=AttributeQuantificationConstraint attributeQuantificationConstraint+=AttributeQuantificationConstraint*)? 
	 *         (computationConstraint+=ComputationConstraint computationConstraint+=ComputationConstraint*)? 
	 *         (temporalConstraint+=TemporalConstraint temporalConstraint+=TemporalConstraint*)?
	 *     )
	 */
	protected void sequence_BehaviorConstraintType(ISerializationContext context, BehaviorConstraintType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns Behavior
	 *     Identifiable returns Behavior
	 *     EAElement returns Behavior
	 *     Behavior returns Behavior
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (traceableSpecification+=[TraceableSpecification|EString] traceableSpecification+=[TraceableSpecification|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (ownedRelationship+=Relationship ownedRelationship+=Relationship*)? 
	 *         (modeGroup+=ModeGroup modeGroup+=ModeGroup*)? 
	 *         (behavior+=FunctionBehavior behavior+=FunctionBehavior*)? 
	 *         (functionTrigger+=FunctionTrigger functionTrigger+=FunctionTrigger*)?
	 *     )
	 */
	protected void sequence_Behavior(ISerializationContext context, Behavior semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimingConstraint returns BurstConstraint
	 *     Identifiable returns BurstConstraint
	 *     EAElement returns BurstConstraint
	 *     BurstConstraint returns BurstConstraint
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         maxOccurrences=Integer 
	 *         mode=[Mode|EString]? 
	 *         event=[Event|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         minimum=TimingExpression? 
	 *         length=TimingExpression
	 *     )
	 */
	protected void sequence_BurstConstraint(ISerializationContext context, BurstConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns BusinessOpportunity
	 *     TraceableSpecification returns BusinessOpportunity
	 *     Identifiable returns BusinessOpportunity
	 *     EAElement returns BusinessOpportunity
	 *     BusinessOpportunity returns BusinessOpportunity
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         businessOpportunity=String0 
	 *         (productPositioning+=[ProductPositioning|EString] productPositioning+=[ProductPositioning|EString]*)? 
	 *         (problemStatement+=[ProblemStatement|EString] problemStatement+=[ProblemStatement|EString]*)? 
	 *         motivatesDevelopmentOf+=[SystemModel|EString] 
	 *         motivatesDevelopmentOf+=[SystemModel|EString]* 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_BusinessOpportunity(ISerializationContext context, BusinessOpportunity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns Claim
	 *     TraceableSpecification returns Claim
	 *     Identifiable returns Claim
	 *     EAElement returns Claim
	 *     Claim returns Claim
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         (safetyRequirement+=[TraceableSpecification|EString] safetyRequirement+=[TraceableSpecification|EString]*)? 
	 *         evidence+=[Ground|EString] 
	 *         evidence+=[Ground|EString]* 
	 *         (supportedArgument+=[Warrant|EString] supportedArgument+=[Warrant|EString]*)? 
	 *         (goalDecompositionStrategy+=[Warrant|EString] goalDecompositionStrategy+=[Warrant|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (justification+=Rationale justification+=Rationale*)?
	 *     )
	 */
	protected void sequence_Claim(ISerializationContext context, Claim semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns ClampConnector
	 *     EAElement returns ClampConnector
	 *     ClampConnector returns ClampConnector
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         port+=ClampConnector_port 
	 *         port+=ClampConnector_port*
	 *     )
	 */
	protected void sequence_ClampConnector(ISerializationContext context, ClampConnector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ClampConnector_port returns ClampConnector_port
	 *
	 * Constraint:
	 *     ((functionPrototype+=[FunctionPrototype|EString] functionPrototype+=[FunctionPrototype|EString]*)? functionPort=[FunctionPort|EString])
	 */
	protected void sequence_ClampConnector_port(ISerializationContext context, ClampConnector_port semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Comment returns Comment
	 *     Comment_Impl returns Comment
	 *
	 * Constraint:
	 *     body=String0
	 */
	protected void sequence_Comment_Impl(ISerializationContext context, Comment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Eastadl22Package.eINSTANCE.getComment_Body()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Eastadl22Package.eINSTANCE.getComment_Body()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComment_ImplAccess().getBodyString0ParserRuleCall_3_0(), semanticObject.getBody());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HardwarePin returns CommunicationHardwarePin
	 *     Identifiable returns CommunicationHardwarePin
	 *     AllocationTarget returns CommunicationHardwarePin
	 *     EAElement returns CommunicationHardwarePin
	 *     CommunicationHardwarePin returns CommunicationHardwarePin
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         direction=EADirectionKind? 
	 *         isGround=Boolean? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_CommunicationHardwarePin(ISerializationContext context, CommunicationHardwarePin semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns CompositeDatatype
	 *     TraceableSpecification returns CompositeDatatype
	 *     EADatatype returns CompositeDatatype
	 *     Identifiable returns CompositeDatatype
	 *     EAElement returns CompositeDatatype
	 *     CompositeDatatype returns CompositeDatatype
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         datatypePrototype+=EADatatypePrototype 
	 *         datatypePrototype+=EADatatypePrototype*
	 *     )
	 */
	protected void sequence_CompositeDatatype(ISerializationContext context, CompositeDatatype semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns ComputationConstraint
	 *     EAElement returns ComputationConstraint
	 *     ComputationConstraint returns ComputationConstraint
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (logicalPath+=LogicalPath logicalPath+=LogicalPath*)? 
	 *         (logicalTransformation+=LogicalTransformation logicalTransformation+=LogicalTransformation*)?
	 *     )
	 */
	protected void sequence_ComputationConstraint(ISerializationContext context, ComputationConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns ConfigurableContainer
	 *     EAElement returns ConfigurableContainer
	 *     ConfigurableContainer returns ConfigurableContainer
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         configurableElement=[Identifiable|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (variationGroup+=VariationGroup variationGroup+=VariationGroup*)? 
	 *         internalBinding=InternalBinding? 
	 *         publicFeatureModel=FeatureModel? 
	 *         (privateContent+=PrivateContent privateContent+=PrivateContent*)?
	 *     )
	 */
	protected void sequence_ConfigurableContainer(ISerializationContext context, ConfigurableContainer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns ConfigurationDecisionFolder
	 *     ConfigurationDecisionModelEntry returns ConfigurationDecisionFolder
	 *     EAElement returns ConfigurationDecisionFolder
	 *     ConfigurationDecisionFolder returns ConfigurationDecisionFolder
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         isActive=Boolean 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (childEntry+=ConfigurationDecisionModelEntry childEntry+=ConfigurationDecisionModelEntry*)?
	 *     )
	 */
	protected void sequence_ConfigurationDecisionFolder(ISerializationContext context, ConfigurationDecisionFolder semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns ConfigurationDecision
	 *     ConfigurationDecisionModelEntry returns ConfigurationDecision
	 *     EAElement returns ConfigurationDecision
	 *     ConfigurationDecision returns ConfigurationDecision
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         isActive=Boolean 
	 *         criterion=String0? 
	 *         effect=String0? 
	 *         isEquivalence=Boolean 
	 *         (target+=[Identifiable|EString] target+=[Identifiable|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         selectionCriterion=SelectionCriterion?
	 *     )
	 */
	protected void sequence_ConfigurationDecision(ISerializationContext context, ConfigurationDecision semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns ContainerConfiguration
	 *     EAElement returns ContainerConfiguration
	 *     ContainerConfiguration returns ContainerConfiguration
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         configuredContainer=[ConfigurableContainer|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (rootEntry+=ConfigurationDecisionModelEntry rootEntry+=ConfigurationDecisionModelEntry*)?
	 *     )
	 */
	protected void sequence_ContainerConfiguration(ISerializationContext context, ContainerConfiguration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimingConstraint returns DelayConstraint
	 *     Identifiable returns DelayConstraint
	 *     EAElement returns DelayConstraint
	 *     DelayConstraint returns DelayConstraint
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         mode=[Mode|EString]? 
	 *         source=[Event|EString] 
	 *         target=[Event|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         upper=TimingExpression? 
	 *         lower=TimingExpression?
	 *     )
	 */
	protected void sequence_DelayConstraint(ISerializationContext context, DelayConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns Dependability
	 *     Identifiable returns Dependability
	 *     EAElement returns Dependability
	 *     Dependability returns Dependability
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (traceableSpecification+=[TraceableSpecification|EString] traceableSpecification+=[TraceableSpecification|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (ownedRelationship+=Relationship ownedRelationship+=Relationship*)? 
	 *         (hazardousEvent+=HazardousEvent hazardousEvent+=HazardousEvent*)? 
	 *         (safetyConstraint+=SafetyConstraint safetyConstraint+=SafetyConstraint*)? 
	 *         (safetyGoal+=SafetyGoal safetyGoal+=SafetyGoal*)? 
	 *         (item+=Item item+=Item*)? 
	 *         (featureFlaw+=FeatureFlaw featureFlaw+=FeatureFlaw*)? 
	 *         (errorModelType+=ErrorModelType errorModelType+=ErrorModelType*)? 
	 *         (faultFailure+=FaultFailure faultFailure+=FaultFailure*)? 
	 *         (functionalSafetyConcept+=FunctionalSafetyConcept functionalSafetyConcept+=FunctionalSafetyConcept*)? 
	 *         (hazard+=Hazard hazard+=Hazard*)? 
	 *         (quantitativeSafetyConstraint+=QuantitativeSafetyConstraint quantitativeSafetyConstraint+=QuantitativeSafetyConstraint*)? 
	 *         (safetyCase+=SafetyCase safetyCase+=SafetyCase*)? 
	 *         (eaDatatype+=EADatatype eaDatatype+=EADatatype*)? 
	 *         (technicalSafetyConcept+=TechnicalSafetyConcept technicalSafetyConcept+=TechnicalSafetyConcept*)?
	 *     )
	 */
	protected void sequence_Dependability(ISerializationContext context, Dependability semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Relationship returns DeriveRequirement
	 *     RequirementsRelationship returns DeriveRequirement
	 *     Identifiable returns DeriveRequirement
	 *     EAElement returns DeriveRequirement
	 *     DeriveRequirement returns DeriveRequirement
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         derived+=[Requirement|EString] 
	 *         derived+=[Requirement|EString]* 
	 *         derivedFrom+=[Requirement|EString] 
	 *         derivedFrom+=[Requirement|EString]* 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_DeriveRequirement(ISerializationContext context, DeriveRequirement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionPrototype returns DesignFunctionPrototype
	 *     Identifiable returns DesignFunctionPrototype
	 *     AllocateableElement returns DesignFunctionPrototype
	 *     EAElement returns DesignFunctionPrototype
	 *     DesignFunctionPrototype returns DesignFunctionPrototype
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         type=[DesignFunctionType|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_DesignFunctionPrototype(ISerializationContext context, DesignFunctionPrototype semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns DesignFunctionType
	 *     FunctionType returns DesignFunctionType
	 *     Identifiable returns DesignFunctionType
	 *     DesignFunctionType returns DesignFunctionType
	 *     EAElement returns DesignFunctionType
	 *     DesignFunctionType_Impl returns DesignFunctionType
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         isElementary=Boolean? 
	 *         (traceableSpecification+=[TraceableSpecification|EString] traceableSpecification+=[TraceableSpecification|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (ownedRelationship+=Relationship ownedRelationship+=Relationship*)? 
	 *         (portGroup+=PortGroup portGroup+=PortGroup*)? 
	 *         (connector+=FunctionConnector connector+=FunctionConnector*)? 
	 *         (port+=FunctionPort port+=FunctionPort*)? 
	 *         (part+=DesignFunctionPrototype part+=DesignFunctionPrototype*)?
	 *     )
	 */
	protected void sequence_DesignFunctionType_Impl(ISerializationContext context, DesignFunctionType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns DesignLevel
	 *     Identifiable returns DesignLevel
	 *     EAElement returns DesignLevel
	 *     DesignLevel returns DesignLevel
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (traceableSpecification+=[TraceableSpecification|EString] traceableSpecification+=[TraceableSpecification|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (ownedRelationship+=Relationship ownedRelationship+=Relationship*)? 
	 *         (allocation+=Allocation allocation+=Allocation*)? 
	 *         functionalDesignArchitecture=DesignFunctionPrototype? 
	 *         hardwareDesignArchitecture=HardwareComponentPrototype?
	 *     )
	 */
	protected void sequence_DesignLevel(ISerializationContext context, DesignLevel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns DeviationAttributeSet
	 *     EAElement returns DeviationAttributeSet
	 *     DeviationAttributeSet returns DeviationAttributeSet
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         allowChangeAttribute=DeviationPermissionKind 
	 *         allowChangeCardinality=DeviationPermissionKind 
	 *         allowChangeDescription=DeviationPermissionKind 
	 *         allowChangeName=DeviationPermissionKind 
	 *         allowMove=DeviationPermissionKind 
	 *         allowReduction=DeviationPermissionKind 
	 *         allowRefinement=DeviationPermissionKind 
	 *         allowRegrouping=DeviationPermissionKind 
	 *         allowRemoval=DeviationPermissionKind 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_DeviationAttributeSet(ISerializationContext context, DeviationAttributeSet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAValue returns EAArrayValue
	 *     EAArrayValue returns EAArrayValue
	 *
	 * Constraint:
	 *     (type=[EADatatype|EString] (value+=EAValue value+=EAValue*)?)
	 */
	protected void sequence_EAArrayValue(ISerializationContext context, EAArrayValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAValue returns EABooleanValue
	 *     EABooleanValue returns EABooleanValue
	 *
	 * Constraint:
	 *     (value=Boolean type=[EADatatype|EString])
	 */
	protected void sequence_EABooleanValue(ISerializationContext context, EABooleanValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Eastadl22Package.eINSTANCE.getEABooleanValue_Value()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Eastadl22Package.eINSTANCE.getEABooleanValue_Value()));
			if (transientValues.isValueTransient(semanticObject, Eastadl22Package.eINSTANCE.getEAValue_Type()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Eastadl22Package.eINSTANCE.getEAValue_Type()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEABooleanValueAccess().getValueBooleanParserRuleCall_3_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getEABooleanValueAccess().getTypeEADatatypeEStringParserRuleCall_6_0_1(), semanticObject.eGet(Eastadl22Package.eINSTANCE.getEAValue_Type(), false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns EABoolean
	 *     TraceableSpecification returns EABoolean
	 *     EADatatype returns EABoolean
	 *     Identifiable returns EABoolean
	 *     EAElement returns EABoolean
	 *     EABoolean returns EABoolean
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_EABoolean(ISerializationContext context, EABoolean semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAValue returns EACompositeValue
	 *     EACompositeValue returns EACompositeValue
	 *
	 * Constraint:
	 *     (type=[EADatatype|EString] value+=EAValue value+=EAValue*)
	 */
	protected void sequence_EACompositeValue(ISerializationContext context, EACompositeValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns EADatatypePrototype
	 *     EAElement returns EADatatypePrototype
	 *     EADatatypePrototype returns EADatatypePrototype
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         type=[EADatatype|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_EADatatypePrototype(ISerializationContext context, EADatatypePrototype semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAValue returns EAEnumerationValue
	 *     EAEnumerationValue returns EAEnumerationValue
	 *
	 * Constraint:
	 *     (type=[EADatatype|EString] value+=[EnumerationLiteral|EString] value+=[EnumerationLiteral|EString]*)
	 */
	protected void sequence_EAEnumerationValue(ISerializationContext context, EAEnumerationValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAValue returns EAExpression
	 *     EAExpression returns EAExpression
	 *     EAExpression_Impl returns EAExpression
	 *
	 * Constraint:
	 *     (type=[EADatatype|EString] (value+=EAValue value+=EAValue*)?)
	 */
	protected void sequence_EAExpression_Impl(ISerializationContext context, EAExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAValue returns EANumericalValue
	 *     EANumericalValue returns EANumericalValue
	 *
	 * Constraint:
	 *     (value=Numerical type=[EADatatype|EString])
	 */
	protected void sequence_EANumericalValue(ISerializationContext context, EANumericalValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Eastadl22Package.eINSTANCE.getEANumericalValue_Value()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Eastadl22Package.eINSTANCE.getEANumericalValue_Value()));
			if (transientValues.isValueTransient(semanticObject, Eastadl22Package.eINSTANCE.getEAValue_Type()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Eastadl22Package.eINSTANCE.getEAValue_Type()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEANumericalValueAccess().getValueNumericalParserRuleCall_3_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getEANumericalValueAccess().getTypeEADatatypeEStringParserRuleCall_6_0_1(), semanticObject.eGet(Eastadl22Package.eINSTANCE.getEAValue_Type(), false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns EANumerical
	 *     TraceableSpecification returns EANumerical
	 *     EADatatype returns EANumerical
	 *     Identifiable returns EANumerical
	 *     EAElement returns EANumerical
	 *     EANumerical returns EANumerical
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         max=Numerical? 
	 *         min=Numerical? 
	 *         unit=[Unit|EString]? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_EANumerical(ISerializationContext context, EANumerical semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns EAPackage
	 *     EAElement returns EAPackage
	 *     EAPackage returns EAPackage
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (subPackage+=EAPackage subPackage+=EAPackage*)? 
	 *         (element+=EAPackageableElement element+=EAPackageableElement*)?
	 *     )
	 */
	protected void sequence_EAPackage(ISerializationContext context, EAPackage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAValue returns EAStringValue
	 *     EAStringValue returns EAStringValue
	 *
	 * Constraint:
	 *     (value=String0 type=[EADatatype|EString])
	 */
	protected void sequence_EAStringValue(ISerializationContext context, EAStringValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Eastadl22Package.eINSTANCE.getEAStringValue_Value()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Eastadl22Package.eINSTANCE.getEAStringValue_Value()));
			if (transientValues.isValueTransient(semanticObject, Eastadl22Package.eINSTANCE.getEAValue_Type()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Eastadl22Package.eINSTANCE.getEAValue_Type()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEAStringValueAccess().getValueString0ParserRuleCall_3_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getEAStringValueAccess().getTypeEADatatypeEStringParserRuleCall_6_0_1(), semanticObject.eGet(Eastadl22Package.eINSTANCE.getEAValue_Type(), false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns EAString
	 *     TraceableSpecification returns EAString
	 *     EADatatype returns EAString
	 *     Identifiable returns EAString
	 *     EAElement returns EAString
	 *     EAString returns EAString
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_EAString(ISerializationContext context, EAString semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAXML returns EAXML
	 *
	 * Constraint:
	 *     (topLevelPackage+=EAPackage topLevelPackage+=EAPackage*)?
	 */
	protected void sequence_EAXML(ISerializationContext context, EAXML semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns ElectricalComponent
	 *     HardwareComponentType returns ElectricalComponent
	 *     Identifiable returns ElectricalComponent
	 *     EAElement returns ElectricalComponent
	 *     ElectricalComponent returns ElectricalComponent
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         isActive=Boolean? 
	 *         (traceableSpecification+=[TraceableSpecification|EString] traceableSpecification+=[TraceableSpecification|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (ownedRelationship+=Relationship ownedRelationship+=Relationship*)? 
	 *         (pin+=HardwarePin pin+=HardwarePin*)? 
	 *         (part+=HardwareComponentPrototype part+=HardwareComponentPrototype*)? 
	 *         (connector+=HardwareConnector connector+=HardwareConnector*)? 
	 *         (port+=HardwarePort port+=HardwarePort*)? 
	 *         (portConnector+=PortConnector portConnector+=PortConnector*)?
	 *     )
	 */
	protected void sequence_ElectricalComponent(ISerializationContext context, ElectricalComponent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns EnumerationLiteral
	 *     EAElement returns EnumerationLiteral
	 *     EnumerationLiteral returns EnumerationLiteral
	 *
	 * Constraint:
	 *     (shortName=Identifier category=Identifier? uuid=UUID? name=String0? (ownedComment+=Comment ownedComment+=Comment*)?)
	 */
	protected void sequence_EnumerationLiteral(ISerializationContext context, EnumerationLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns Enumeration
	 *     TraceableSpecification returns Enumeration
	 *     EADatatype returns Enumeration
	 *     Identifiable returns Enumeration
	 *     EAElement returns Enumeration
	 *     Enumeration returns Enumeration
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         isMultiValued=Boolean 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         literal+=EnumerationLiteral 
	 *         literal+=EnumerationLiteral*
	 *     )
	 */
	protected void sequence_Enumeration(ISerializationContext context, Enumeration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns Environment
	 *     Identifiable returns Environment
	 *     EAElement returns Environment
	 *     Environment returns Environment
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (traceableSpecification+=[TraceableSpecification|EString] traceableSpecification+=[TraceableSpecification|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (ownedRelationship+=Relationship ownedRelationship+=Relationship*)? 
	 *         (clampConnector+=ClampConnector clampConnector+=ClampConnector*)? 
	 *         environmentModel=FunctionPrototype?
	 *     )
	 */
	protected void sequence_Environment(ISerializationContext context, Environment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns ErrorBehavior
	 *     EAElement returns ErrorBehavior
	 *     ErrorBehavior returns ErrorBehavior
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         failureLogic=String0? 
	 *         type=ErrorBehaviorKind 
	 *         (externalFault+=[FaultInPort|EString] externalFault+=[FaultInPort|EString]*)? 
	 *         externalFailure+=[FailureOutPort|EString] 
	 *         externalFailure+=[FailureOutPort|EString]* 
	 *         (internalFailure+=[FailureOutPort|EString] internalFailure+=[FailureOutPort|EString]*)? 
	 *         (processFault+=[ProcessFaultPrototype|EString] processFault+=[ProcessFaultPrototype|EString]*)? 
	 *         (internalFault+=[InternalFaultPrototype|EString] internalFault+=[InternalFaultPrototype|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_ErrorBehavior(ISerializationContext context, ErrorBehavior semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns ErrorModelPrototype
	 *     EAElement returns ErrorModelPrototype
	 *     ErrorModelPrototype returns ErrorModelPrototype
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         target=[Identifiable|EString] 
	 *         type=[ErrorModelType|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (functionTarget+=ErrorModelPrototype_functionTarget functionTarget+=ErrorModelPrototype_functionTarget*)? 
	 *         (hwTarget+=ErrorModelPrototype_hwTarget hwTarget+=ErrorModelPrototype_hwTarget*)?
	 *     )
	 */
	protected void sequence_ErrorModelPrototype(ISerializationContext context, ErrorModelPrototype semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ErrorModelPrototype_functionTarget returns ErrorModelPrototype_functionTarget
	 *
	 * Constraint:
	 *     (
	 *         (functionPrototype_context+=[FunctionPrototype|EString] functionPrototype_context+=[FunctionPrototype|EString]*)? 
	 *         functionPrototype=[FunctionPrototype|EString]
	 *     )
	 */
	protected void sequence_ErrorModelPrototype_functionTarget(ISerializationContext context, ErrorModelPrototype_functionTarget semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ErrorModelPrototype_hwTarget returns ErrorModelPrototype_hwTarget
	 *
	 * Constraint:
	 *     (
	 *         hardwareComponentPrototype=[HardwareComponentPrototype|EString] 
	 *         (
	 *             hardwareComponentPrototype_context+=[HardwareComponentPrototype|EString] 
	 *             hardwareComponentPrototype_context+=[HardwareComponentPrototype|EString]*
	 *         )?
	 *     )
	 */
	protected void sequence_ErrorModelPrototype_hwTarget(ISerializationContext context, ErrorModelPrototype_hwTarget semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns ErrorModelType
	 *     TraceableSpecification returns ErrorModelType
	 *     Identifiable returns ErrorModelType
	 *     EAElement returns ErrorModelType
	 *     ErrorModelType returns ErrorModelType
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         (hwTarget+=[HardwareComponentType|EString] hwTarget+=[HardwareComponentType|EString]*)? 
	 *         (target+=[FunctionType|EString] target+=[FunctionType|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (errorBehaviorDescription+=ErrorBehavior errorBehaviorDescription+=ErrorBehavior*)? 
	 *         (externalFault+=FaultInPort externalFault+=FaultInPort*)? 
	 *         (part+=ErrorModelPrototype part+=ErrorModelPrototype*)? 
	 *         (faultFailureConnector+=FaultFailurePropagationLink faultFailureConnector+=FaultFailurePropagationLink*)? 
	 *         (failure+=FailureOutPort failure+=FailureOutPort*)? 
	 *         (internalFault+=InternalFaultPrototype internalFault+=InternalFaultPrototype*)? 
	 *         (processFault+=ProcessFaultPrototype processFault+=ProcessFaultPrototype*)?
	 *     )
	 */
	protected void sequence_ErrorModelType(ISerializationContext context, ErrorModelType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimingDescription returns EventChain
	 *     Identifiable returns EventChain
	 *     EAElement returns EventChain
	 *     EventChain returns EventChain
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (segment+=[EventChain|EString] segment+=[EventChain|EString]*)? 
	 *         response=[Event|EString] 
	 *         stimulus=[Event|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_EventChain(ISerializationContext context, EventChain semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimingDescription returns EventFaultFailure
	 *     Identifiable returns EventFaultFailure
	 *     Event returns EventFaultFailure
	 *     EAElement returns EventFaultFailure
	 *     EventFaultFailure returns EventFaultFailure
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         faultFailure=[FaultFailure|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_EventFaultFailure(ISerializationContext context, EventFaultFailure semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimingDescription returns EventFeatureFlaw
	 *     Identifiable returns EventFeatureFlaw
	 *     Event returns EventFeatureFlaw
	 *     EAElement returns EventFeatureFlaw
	 *     EventFeatureFlaw returns EventFeatureFlaw
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         featureFlaw=[FeatureFlaw|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_EventFeatureFlaw(ISerializationContext context, EventFeatureFlaw semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAValue returns EventFunctionClientServerPort
	 *     TimingDescription returns EventFunctionClientServerPort
	 *     Identifiable returns EventFunctionClientServerPort
	 *     Event returns EventFunctionClientServerPort
	 *     EAExpression returns EventFunctionClientServerPort
	 *     EAElement returns EventFunctionClientServerPort
	 *     EventFunctionClientServerPort returns EventFunctionClientServerPort
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         eventKind=EventFunctionClientServerPortKind 
	 *         type=[EADatatype|EString] 
	 *         (value+=EAValue value+=EAValue*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         port=EventFunctionClientServerPort_port
	 *     )
	 */
	protected void sequence_EventFunctionClientServerPort(ISerializationContext context, EventFunctionClientServerPort semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EventFunctionClientServerPort_port returns EventFunctionClientServerPort_port
	 *
	 * Constraint:
	 *     (
	 *         functionClientServerPort=[FunctionClientServerPort|EString] 
	 *         (functionPrototype+=[FunctionPrototype|EString] functionPrototype+=[FunctionPrototype|EString]*)?
	 *     )
	 */
	protected void sequence_EventFunctionClientServerPort_port(ISerializationContext context, EventFunctionClientServerPort_port semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAValue returns EventFunctionFlowPort
	 *     TimingDescription returns EventFunctionFlowPort
	 *     Identifiable returns EventFunctionFlowPort
	 *     Event returns EventFunctionFlowPort
	 *     EAExpression returns EventFunctionFlowPort
	 *     EAElement returns EventFunctionFlowPort
	 *     EventFunctionFlowPort returns EventFunctionFlowPort
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         type=[EADatatype|EString] 
	 *         (value+=EAValue value+=EAValue*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         port=EventFunctionFlowPort_port
	 *     )
	 */
	protected void sequence_EventFunctionFlowPort(ISerializationContext context, EventFunctionFlowPort semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EventFunctionFlowPort_port returns EventFunctionFlowPort_port
	 *
	 * Constraint:
	 *     (functionFlowPort=[FunctionFlowPort|EString] (functionPrototype+=[FunctionPrototype|EString] functionPrototype+=[FunctionPrototype|EString]*)?)
	 */
	protected void sequence_EventFunctionFlowPort_port(ISerializationContext context, EventFunctionFlowPort_port semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimingDescription returns EventFunction
	 *     Identifiable returns EventFunction
	 *     Event returns EventFunction
	 *     EAElement returns EventFunction
	 *     EventFunction returns EventFunction
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         eventKind=EventFunctionKind 
	 *         functionType=[FunctionType|EString]? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         function=EventFunction_function
	 *     )
	 */
	protected void sequence_EventFunction(ISerializationContext context, EventFunction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EventFunction_function returns EventFunction_function
	 *
	 * Constraint:
	 *     (
	 *         (functionPrototype_context+=[FunctionPrototype|EString] functionPrototype_context+=[FunctionPrototype|EString]*)? 
	 *         functionPrototype_target=[FunctionPrototype|EString]
	 *     )
	 */
	protected void sequence_EventFunction_function(ISerializationContext context, EventFunction_function semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimingConstraint returns ExecutionTimeConstraint
	 *     Identifiable returns ExecutionTimeConstraint
	 *     EAElement returns ExecutionTimeConstraint
	 *     ExecutionTimeConstraint returns ExecutionTimeConstraint
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         mode=[Mode|EString]? 
	 *         resume=[Event|EString]? 
	 *         start=[Event|EString] 
	 *         stop=[Event|EString] 
	 *         preemption=[Event|EString]? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         lower=TimingExpression? 
	 *         upper=TimingExpression?
	 *     )
	 */
	protected void sequence_ExecutionTimeConstraint(ISerializationContext context, ExecutionTimeConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Relationship returns Extend
	 *     Identifiable returns Extend
	 *     EAElement returns Extend
	 *     Extend returns Extend
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         extendedCase=[UseCase|EString] 
	 *         extensionLocation+=[ExtensionPoint|EString] 
	 *         extensionLocation+=[ExtensionPoint|EString]* 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_Extend(ISerializationContext context, Extend semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns ExtensionPoint
	 *     EAElement returns ExtensionPoint
	 *     ExtensionPoint returns ExtensionPoint
	 *
	 * Constraint:
	 *     (shortName=Identifier category=Identifier? uuid=UUID? name=String0? (ownedComment+=Comment ownedComment+=Comment*)?)
	 */
	protected void sequence_ExtensionPoint(ISerializationContext context, ExtensionPoint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimingDescription returns ExternalEvent
	 *     Identifiable returns ExternalEvent
	 *     Event returns ExternalEvent
	 *     EAElement returns ExternalEvent
	 *     ExternalEvent returns ExternalEvent
	 *
	 * Constraint:
	 *     (shortName=Identifier category=Identifier? uuid=UUID? name=String0? (ownedComment+=Comment ownedComment+=Comment*)?)
	 */
	protected void sequence_ExternalEvent(ISerializationContext context, ExternalEvent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns FailureOutPort
	 *     Anomaly returns FailureOutPort
	 *     FaultFailurePort returns FailureOutPort
	 *     EAElement returns FailureOutPort
	 *     FailureOutPort returns FailureOutPort
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         type=[EADatatype|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (functionTarget+=FaultFailurePort_functionTarget functionTarget+=FaultFailurePort_functionTarget*)? 
	 *         (hwTarget+=FaultFailurePort_hwTarget hwTarget+=FaultFailurePort_hwTarget*)?
	 *     )
	 */
	protected void sequence_FailureOutPort(ISerializationContext context, FailureOutPort semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FaultFailurePort_functionTarget returns FaultFailurePort_functionTarget
	 *
	 * Constraint:
	 *     ((functionPrototype+=[FunctionPrototype|EString] functionPrototype+=[FunctionPrototype|EString]*)? functionPort=[FunctionPort|EString])
	 */
	protected void sequence_FaultFailurePort_functionTarget(ISerializationContext context, FaultFailurePort_functionTarget semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FaultFailurePort_hwTarget returns FaultFailurePort_hwTarget
	 *
	 * Constraint:
	 *     (
	 *         hardwarePort=[HardwarePin|EString] 
	 *         (hardwareComponentPrototype+=[HardwareComponentPrototype|EString] hardwareComponentPrototype+=[HardwareComponentPrototype|EString]*)?
	 *     )
	 */
	protected void sequence_FaultFailurePort_hwTarget(ISerializationContext context, FaultFailurePort_hwTarget semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns FaultFailurePropagationLink
	 *     EAElement returns FaultFailurePropagationLink
	 *     FaultFailurePropagationLink returns FaultFailurePropagationLink
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         immediatePropagation=Boolean 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         fromPort=FaultFailurePropagationLink_fromPort 
	 *         toPort=FaultFailurePropagationLink_toPort
	 *     )
	 */
	protected void sequence_FaultFailurePropagationLink(ISerializationContext context, FaultFailurePropagationLink semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FaultFailurePropagationLink_fromPort returns FaultFailurePropagationLink_fromPort
	 *
	 * Constraint:
	 *     (
	 *         faultFailurePort=[FaultFailurePort|EString] 
	 *         (errorModelPrototype+=[ErrorModelPrototype|EString] errorModelPrototype+=[ErrorModelPrototype|EString]*)?
	 *     )
	 */
	protected void sequence_FaultFailurePropagationLink_fromPort(ISerializationContext context, FaultFailurePropagationLink_fromPort semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FaultFailurePropagationLink_toPort returns FaultFailurePropagationLink_toPort
	 *
	 * Constraint:
	 *     (
	 *         faultFailurePort=[FaultFailurePort|EString] 
	 *         (errorModelPrototype+=[ErrorModelPrototype|EString] errorModelPrototype+=[ErrorModelPrototype|EString]*)?
	 *     )
	 */
	protected void sequence_FaultFailurePropagationLink_toPort(ISerializationContext context, FaultFailurePropagationLink_toPort semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns FaultFailure
	 *     TraceableSpecification returns FaultFailure
	 *     Identifiable returns FaultFailure
	 *     EAElement returns FaultFailure
	 *     FaultFailure returns FaultFailure
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         anomaly=FaultFailure_anomaly? 
	 *         faultFailureValue=EAValue
	 *     )
	 */
	protected void sequence_FaultFailure(ISerializationContext context, FaultFailure semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FaultFailure_anomaly returns FaultFailure_anomaly
	 *
	 * Constraint:
	 *     ((errorModelPrototype+=[ErrorModelPrototype|EString] errorModelPrototype+=[ErrorModelPrototype|EString]*)? anomaly=[Anomaly|EString])
	 */
	protected void sequence_FaultFailure_anomaly(ISerializationContext context, FaultFailure_anomaly semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns FaultInPort
	 *     Anomaly returns FaultInPort
	 *     FaultFailurePort returns FaultInPort
	 *     EAElement returns FaultInPort
	 *     FaultInPort returns FaultInPort
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         type=[EADatatype|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (functionTarget+=FaultFailurePort_functionTarget functionTarget+=FaultFailurePort_functionTarget*)? 
	 *         (hwTarget+=FaultFailurePort_hwTarget hwTarget+=FaultFailurePort_hwTarget*)?
	 *     )
	 */
	protected void sequence_FaultInPort(ISerializationContext context, FaultInPort semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns FeatureConfiguration
	 *     EAElement returns FeatureConfiguration
	 *     FeatureConfiguration returns FeatureConfiguration
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         configuredFeatureModel=[FeatureModel|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (rootEntry+=ConfigurationDecisionModelEntry rootEntry+=ConfigurationDecisionModelEntry*)?
	 *     )
	 */
	protected void sequence_FeatureConfiguration(ISerializationContext context, FeatureConfiguration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns FeatureConstraint
	 *     EAElement returns FeatureConstraint
	 *     FeatureConstraint returns FeatureConstraint
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         criterion=String0 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_FeatureConstraint(ISerializationContext context, FeatureConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns FeatureFlaw
	 *     TraceableSpecification returns FeatureFlaw
	 *     Identifiable returns FeatureFlaw
	 *     EAElement returns FeatureFlaw
	 *     FeatureFlaw returns FeatureFlaw
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         item+=[Item|EString] 
	 *         item+=[Item|EString]* 
	 *         (nonFulfilledRequirement+=[Requirement|EString] nonFulfilledRequirement+=[Requirement|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_FeatureFlaw(ISerializationContext context, FeatureFlaw semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns FeatureGroup
	 *     FeatureTreeNode returns FeatureGroup
	 *     Identifiable returns FeatureGroup
	 *     EAElement returns FeatureGroup
	 *     FeatureGroup returns FeatureGroup
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         cardinality=String0 
	 *         (traceableSpecification+=[TraceableSpecification|EString] traceableSpecification+=[TraceableSpecification|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (ownedRelationship+=Relationship ownedRelationship+=Relationship*)? 
	 *         childFeature+=Feature 
	 *         childFeature+=Feature*
	 *     )
	 */
	protected void sequence_FeatureGroup(ISerializationContext context, FeatureGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Relationship returns FeatureLink
	 *     Identifiable returns FeatureLink
	 *     EAElement returns FeatureLink
	 *     FeatureLink returns FeatureLink
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         customType=String0? 
	 *         isBidirectional=Boolean? 
	 *         kind=VariabilityDependencyKind 
	 *         end=[Feature|EString] 
	 *         start=[Feature|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_FeatureLink(ISerializationContext context, FeatureLink semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns FeatureModel
	 *     Identifiable returns FeatureModel
	 *     EAElement returns FeatureModel
	 *     FeatureModel returns FeatureModel
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (traceableSpecification+=[TraceableSpecification|EString] traceableSpecification+=[TraceableSpecification|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (ownedRelationship+=Relationship ownedRelationship+=Relationship*)? 
	 *         (rootFeature+=Feature rootFeature+=Feature*)? 
	 *         (featureConstraint+=FeatureConstraint featureConstraint+=FeatureConstraint*)? 
	 *         (featureLink+=FeatureLink featureLink+=FeatureLink*)?
	 *     )
	 */
	protected void sequence_FeatureModel(ISerializationContext context, FeatureModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns Feature
	 *     FeatureTreeNode returns Feature
	 *     Feature returns Feature
	 *     Identifiable returns Feature
	 *     EAElement returns Feature
	 *     Feature_Impl returns Feature
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         cardinality=String0 
	 *         actualBindingTime=BindingTimeKind? 
	 *         requiredBindingTime=BindingTimeKind? 
	 *         (traceableSpecification+=[TraceableSpecification|EString] traceableSpecification+=[TraceableSpecification|EString]*)? 
	 *         featureParameter=[EAValue|EString]? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (ownedRelationship+=Relationship ownedRelationship+=Relationship*)? 
	 *         (childNode+=FeatureTreeNode childNode+=FeatureTreeNode*)?
	 *     )
	 */
	protected void sequence_Feature_Impl(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns FunctionAllocation
	 *     EAElement returns FunctionAllocation
	 *     FunctionAllocation returns FunctionAllocation
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         allocatedElement=FunctionAllocation_allocatedElement 
	 *         target=FunctionAllocation_target
	 *     )
	 */
	protected void sequence_FunctionAllocation(ISerializationContext context, FunctionAllocation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionAllocation_allocatedElement returns FunctionAllocation_allocatedElement
	 *
	 * Constraint:
	 *     (
	 *         (allocateableElement_context+=[AllocateableElement|EString] allocateableElement_context+=[AllocateableElement|EString]*)? 
	 *         allocateableElement=[AllocateableElement|EString]
	 *     )
	 */
	protected void sequence_FunctionAllocation_allocatedElement(ISerializationContext context, FunctionAllocation_allocatedElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionAllocation_target returns FunctionAllocation_target
	 *
	 * Constraint:
	 *     (
	 *         (allocationTarget_context+=[AllocationTarget|EString] allocationTarget_context+=[AllocationTarget|EString]*)? 
	 *         allocationTarget=[AllocationTarget|EString]
	 *     )
	 */
	protected void sequence_FunctionAllocation_target(ISerializationContext context, FunctionAllocation_target semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns FunctionBehavior
	 *     Identifiable returns FunctionBehavior
	 *     EAElement returns FunctionBehavior
	 *     FunctionBehavior returns FunctionBehavior
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         path=String0 
	 *         representation=FunctionBehaviorKind 
	 *         (traceableSpecification+=[TraceableSpecification|EString] traceableSpecification+=[TraceableSpecification|EString]*)? 
	 *         (mode+=[Mode|EString] mode+=[Mode|EString]*)? 
	 *         function=[FunctionType|EString]? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (ownedRelationship+=Relationship ownedRelationship+=Relationship*)?
	 *     )
	 */
	protected void sequence_FunctionBehavior(ISerializationContext context, FunctionBehavior semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns FunctionClientServerInterface
	 *     TraceableSpecification returns FunctionClientServerInterface
	 *     Identifiable returns FunctionClientServerInterface
	 *     EAElement returns FunctionClientServerInterface
	 *     FunctionClientServerInterface returns FunctionClientServerInterface
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (operation+=Operation operation+=Operation*)?
	 *     )
	 */
	protected void sequence_FunctionClientServerInterface(ISerializationContext context, FunctionClientServerInterface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionPort returns FunctionClientServerPort
	 *     Identifiable returns FunctionClientServerPort
	 *     AllocateableElement returns FunctionClientServerPort
	 *     EAElement returns FunctionClientServerPort
	 *     FunctionClientServerPort returns FunctionClientServerPort
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         kind=ClientServerKind 
	 *         type=[FunctionClientServerInterface|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_FunctionClientServerPort(ISerializationContext context, FunctionClientServerPort semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns FunctionConnector
	 *     AllocateableElement returns FunctionConnector
	 *     EAElement returns FunctionConnector
	 *     FunctionConnector returns FunctionConnector
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         port+=FunctionConnector_port 
	 *         port+=FunctionConnector_port*
	 *     )
	 */
	protected void sequence_FunctionConnector(ISerializationContext context, FunctionConnector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionConnector_port returns FunctionConnector_port
	 *
	 * Constraint:
	 *     (functionPrototype=[FunctionPrototype|EString]? functionPort=[FunctionPort|EString])
	 */
	protected void sequence_FunctionConnector_port(ISerializationContext context, FunctionConnector_port semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionPort returns FunctionFlowPort
	 *     Identifiable returns FunctionFlowPort
	 *     AllocateableElement returns FunctionFlowPort
	 *     EAElement returns FunctionFlowPort
	 *     FunctionFlowPort returns FunctionFlowPort
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         direction=EADirectionKind 
	 *         type=[EADatatype|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         defaultValue=EAValue?
	 *     )
	 */
	protected void sequence_FunctionFlowPort(ISerializationContext context, FunctionFlowPort semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionPort returns FunctionPowerPort
	 *     Identifiable returns FunctionPowerPort
	 *     AllocateableElement returns FunctionPowerPort
	 *     EAElement returns FunctionPowerPort
	 *     FunctionPowerPort returns FunctionPowerPort
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         type=[CompositeDatatype|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_FunctionPowerPort(ISerializationContext context, FunctionPowerPort semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAValue returns FunctionTrigger
	 *     Identifiable returns FunctionTrigger
	 *     EAExpression returns FunctionTrigger
	 *     EAElement returns FunctionTrigger
	 *     FunctionTrigger returns FunctionTrigger
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         triggerPolicy=TriggerPolicyKind 
	 *         type=[EADatatype|EString] 
	 *         (mode+=[Mode|EString] mode+=[Mode|EString]*)? 
	 *         functionPrototype=[FunctionPrototype|EString]? 
	 *         function=[FunctionType|EString]? 
	 *         (port+=[FunctionPort|EString] port+=[FunctionPort|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (value+=EAValue value+=EAValue*)?
	 *     )
	 */
	protected void sequence_FunctionTrigger(ISerializationContext context, FunctionTrigger semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns FunctionalDevice
	 *     FunctionType returns FunctionalDevice
	 *     Identifiable returns FunctionalDevice
	 *     AnalysisFunctionType returns FunctionalDevice
	 *     EAElement returns FunctionalDevice
	 *     FunctionalDevice returns FunctionalDevice
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         isElementary=Boolean? 
	 *         (traceableSpecification+=[TraceableSpecification|EString] traceableSpecification+=[TraceableSpecification|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (ownedRelationship+=Relationship ownedRelationship+=Relationship*)? 
	 *         (portGroup+=PortGroup portGroup+=PortGroup*)? 
	 *         (connector+=FunctionConnector connector+=FunctionConnector*)? 
	 *         (port+=FunctionPort port+=FunctionPort*)? 
	 *         (part+=AnalysisFunctionPrototype part+=AnalysisFunctionPrototype*)?
	 *     )
	 */
	protected void sequence_FunctionalDevice(ISerializationContext context, FunctionalDevice semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns FunctionalSafetyConcept
	 *     TraceableSpecification returns FunctionalSafetyConcept
	 *     RequirementsHierarchy returns FunctionalSafetyConcept
	 *     Identifiable returns FunctionalSafetyConcept
	 *     EAElement returns FunctionalSafetyConcept
	 *     FunctionalSafetyConcept returns FunctionalSafetyConcept
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         (containedRequirement+=[Requirement|EString] containedRequirement+=[Requirement|EString]*)? 
	 *         (functionalSafetyRequirement+=[Requirement|EString] functionalSafetyRequirement+=[Requirement|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (childHierarchy+=RequirementsHierarchy childHierarchy+=RequirementsHierarchy*)?
	 *     )
	 */
	protected void sequence_FunctionalSafetyConcept(ISerializationContext context, FunctionalSafetyConcept semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns GenericConstraintSet
	 *     Identifiable returns GenericConstraintSet
	 *     EAElement returns GenericConstraintSet
	 *     GenericConstraintSet returns GenericConstraintSet
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (traceableSpecification+=[TraceableSpecification|EString] traceableSpecification+=[TraceableSpecification|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (ownedRelationship+=Relationship ownedRelationship+=Relationship*)? 
	 *         (genericConstraint+=GenericConstraint genericConstraint+=GenericConstraint*)?
	 *     )
	 */
	protected void sequence_GenericConstraintSet(ISerializationContext context, GenericConstraintSet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns GenericConstraint
	 *     TraceableSpecification returns GenericConstraint
	 *     Identifiable returns GenericConstraint
	 *     GenericConstraint returns GenericConstraint
	 *     EAElement returns GenericConstraint
	 *     GenericConstraint_Impl returns GenericConstraint
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         kind=GenericConstraintKind 
	 *         (target+=[Identifiable|EString] target+=[Identifiable|EString]*)? 
	 *         (mode+=[Mode|EString] mode+=[Mode|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         value=EAValue?
	 *     )
	 */
	protected void sequence_GenericConstraint_Impl(ISerializationContext context, GenericConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns Ground
	 *     TraceableSpecification returns Ground
	 *     Identifiable returns Ground
	 *     EAElement returns Ground
	 *     Ground returns Ground
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         (safetyEvidence+=[Identifiable|EString] safetyEvidence+=[Identifiable|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (justification+=Rationale justification+=Rationale*)?
	 *     )
	 */
	protected void sequence_Ground(ISerializationContext context, Ground semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns HardwareComponentPrototype
	 *     AllocationTarget returns HardwareComponentPrototype
	 *     EAElement returns HardwareComponentPrototype
	 *     HardwareComponentPrototype returns HardwareComponentPrototype
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         type=[HardwareComponentType|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_HardwareComponentPrototype(ISerializationContext context, HardwareComponentPrototype semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns HardwareComponentType
	 *     HardwareComponentType returns HardwareComponentType
	 *     Identifiable returns HardwareComponentType
	 *     EAElement returns HardwareComponentType
	 *     HardwareComponentType_Impl returns HardwareComponentType
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (traceableSpecification+=[TraceableSpecification|EString] traceableSpecification+=[TraceableSpecification|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (ownedRelationship+=Relationship ownedRelationship+=Relationship*)? 
	 *         (pin+=HardwarePin pin+=HardwarePin*)? 
	 *         (part+=HardwareComponentPrototype part+=HardwareComponentPrototype*)? 
	 *         (connector+=HardwareConnector connector+=HardwareConnector*)? 
	 *         (port+=HardwarePort port+=HardwarePort*)? 
	 *         (portConnector+=PortConnector portConnector+=PortConnector*)?
	 *     )
	 */
	protected void sequence_HardwareComponentType_Impl(ISerializationContext context, HardwareComponentType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns HardwareConnector
	 *     EAElement returns HardwareConnector
	 *     HardwareConnector returns HardwareConnector
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         port+=HardwareConnector_port 
	 *         port+=HardwareConnector_port*
	 *     )
	 */
	protected void sequence_HardwareConnector(ISerializationContext context, HardwareConnector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HardwareConnector_port returns HardwareConnector_port
	 *
	 * Constraint:
	 *     (hardwarePin=[HardwarePin|EString] hardwareComponentPrototype=[HardwareComponentPrototype|EString]?)
	 */
	protected void sequence_HardwareConnector_port(ISerializationContext context, HardwareConnector_port semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns HardwareFunctionType
	 *     FunctionType returns HardwareFunctionType
	 *     Identifiable returns HardwareFunctionType
	 *     DesignFunctionType returns HardwareFunctionType
	 *     EAElement returns HardwareFunctionType
	 *     HardwareFunctionType returns HardwareFunctionType
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         isElementary=Boolean? 
	 *         (traceableSpecification+=[TraceableSpecification|EString] traceableSpecification+=[TraceableSpecification|EString]*)? 
	 *         hardwareComponent=[HardwareComponentType|EString]? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (ownedRelationship+=Relationship ownedRelationship+=Relationship*)? 
	 *         (portGroup+=PortGroup portGroup+=PortGroup*)? 
	 *         (connector+=FunctionConnector connector+=FunctionConnector*)? 
	 *         (port+=FunctionPort port+=FunctionPort*)? 
	 *         (part+=DesignFunctionPrototype part+=DesignFunctionPrototype*)?
	 *     )
	 */
	protected void sequence_HardwareFunctionType(ISerializationContext context, HardwareFunctionType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PortConnector returns HardwarePortConnector
	 *     Identifiable returns HardwarePortConnector
	 *     AllocationTarget returns HardwarePortConnector
	 *     EAElement returns HardwarePortConnector
	 *     HardwarePortConnector returns HardwarePortConnector
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         port+=HardwarePortConnector_port 
	 *         port+=HardwarePortConnector_port* 
	 *         (connector+=HardwareConnector connector+=HardwareConnector*)?
	 *     )
	 */
	protected void sequence_HardwarePortConnector(ISerializationContext context, HardwarePortConnector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HardwarePortConnector_port returns HardwarePortConnector_port
	 *
	 * Constraint:
	 *     (hardwarePort=[HardwarePort|EString] hardwareComponentPrototype=[HardwareComponentPrototype|EString]?)
	 */
	protected void sequence_HardwarePortConnector_port(ISerializationContext context, HardwarePortConnector_port semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns HardwarePort
	 *     AllocationTarget returns HardwarePort
	 *     EAElement returns HardwarePort
	 *     HardwarePort returns HardwarePort
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         isShield=Boolean? 
	 *         (referencedPin+=[HardwarePin|EString] referencedPin+=[HardwarePin|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (containedPin+=HardwarePin containedPin+=HardwarePin*)? 
	 *         (containedPort+=HardwarePort containedPort+=HardwarePort*)?
	 *     )
	 */
	protected void sequence_HardwarePort(ISerializationContext context, HardwarePort semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns Hazard
	 *     TraceableSpecification returns Hazard
	 *     Identifiable returns Hazard
	 *     EAElement returns Hazard
	 *     Hazard returns Hazard
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         malfunction+=[FeatureFlaw|EString] 
	 *         malfunction+=[FeatureFlaw|EString]* 
	 *         item+=[Item|EString] 
	 *         item+=[Item|EString]* 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_Hazard(ISerializationContext context, Hazard semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns HazardousEvent
	 *     TraceableSpecification returns HazardousEvent
	 *     Identifiable returns HazardousEvent
	 *     EAElement returns HazardousEvent
	 *     HazardousEvent returns HazardousEvent
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         classificationAssumptions=String0? 
	 *         controllability=ControllabilityClassKind 
	 *         exposure=ExposureClassKind 
	 *         hazardClassification=ASILKind 
	 *         severity=SeverityClassKind 
	 *         hazard+=[Hazard|EString] 
	 *         hazard+=[Hazard|EString]* 
	 *         useCase+=[UseCase|EString] 
	 *         useCase+=[UseCase|EString]* 
	 *         (environment+=[Situation|EString] environment+=[Situation|EString]*)? 
	 *         (traffic+=[Situation|EString] traffic+=[Situation|EString]*)? 
	 *         (externalMeasures+=[RequirementsRelationship|EString] externalMeasures+=[RequirementsRelationship|EString]*)? 
	 *         (operatingMode+=[Mode|EString] operatingMode+=[Mode|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_HazardousEvent(ISerializationContext context, HazardousEvent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HardwarePin returns IOHardwarePin
	 *     Identifiable returns IOHardwarePin
	 *     AllocationTarget returns IOHardwarePin
	 *     EAElement returns IOHardwarePin
	 *     IOHardwarePin returns IOHardwarePin
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         direction=EADirectionKind? 
	 *         isGround=Boolean? 
	 *         kind=IOHardwarePinKind? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_IOHardwarePin(ISerializationContext context, IOHardwarePin semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns ImplementationLevel
	 *     Identifiable returns ImplementationLevel
	 *     EAElement returns ImplementationLevel
	 *     ImplementationLevel returns ImplementationLevel
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (traceableSpecification+=[TraceableSpecification|EString] traceableSpecification+=[TraceableSpecification|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (ownedRelationship+=Relationship ownedRelationship+=Relationship*)?
	 *     )
	 */
	protected void sequence_ImplementationLevel(ISerializationContext context, ImplementationLevel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Relationship returns Include
	 *     Identifiable returns Include
	 *     EAElement returns Include
	 *     Include returns Include
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         addition=[UseCase|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_Include(ISerializationContext context, Include semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimingConstraint returns InputSynchronizationConstraint
	 *     Identifiable returns InputSynchronizationConstraint
	 *     EAElement returns InputSynchronizationConstraint
	 *     InputSynchronizationConstraint returns InputSynchronizationConstraint
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         mode=[Mode|EString]? 
	 *         scope+=[EventChain|EString] 
	 *         scope+=[EventChain|EString]* 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         tolerance=TimingExpression?
	 *     )
	 */
	protected void sequence_InputSynchronizationConstraint(ISerializationContext context, InputSynchronizationConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Relationship returns Interact
	 *     Identifiable returns Interact
	 *     EAElement returns Interact
	 *     Interact returns Interact
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         actor=[Actor|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_Interact(ISerializationContext context, Interact semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns InternalBinding
	 *     EAElement returns InternalBinding
	 *     InternalBinding returns InternalBinding
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (rootEntry+=ConfigurationDecisionModelEntry rootEntry+=ConfigurationDecisionModelEntry*)?
	 *     )
	 */
	protected void sequence_InternalBinding(ISerializationContext context, InternalBinding semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns InternalFaultPrototype
	 *     Anomaly returns InternalFaultPrototype
	 *     EAElement returns InternalFaultPrototype
	 *     InternalFaultPrototype returns InternalFaultPrototype
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         type=[EADatatype|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_InternalFaultPrototype(ISerializationContext context, InternalFaultPrototype semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns Item
	 *     TraceableSpecification returns Item
	 *     Identifiable returns Item
	 *     EAElement returns Item
	 *     Item returns Item
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         developmentCategory=DevelopmentCategoryKind 
	 *         vehicleFeature+=[VehicleFeature|EString] 
	 *         vehicleFeature+=[VehicleFeature|EString]* 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_Item(ISerializationContext context, Item semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns LocalDeviceManager
	 *     FunctionType returns LocalDeviceManager
	 *     Identifiable returns LocalDeviceManager
	 *     DesignFunctionType returns LocalDeviceManager
	 *     EAElement returns LocalDeviceManager
	 *     LocalDeviceManager returns LocalDeviceManager
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         isElementary=Boolean? 
	 *         (traceableSpecification+=[TraceableSpecification|EString] traceableSpecification+=[TraceableSpecification|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (ownedRelationship+=Relationship ownedRelationship+=Relationship*)? 
	 *         (portGroup+=PortGroup portGroup+=PortGroup*)? 
	 *         (connector+=FunctionConnector connector+=FunctionConnector*)? 
	 *         (port+=FunctionPort port+=FunctionPort*)? 
	 *         (part+=DesignFunctionPrototype part+=DesignFunctionPrototype*)?
	 *     )
	 */
	protected void sequence_LocalDeviceManager(ISerializationContext context, LocalDeviceManager semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAValue returns LogicalEvent
	 *     Identifiable returns LogicalEvent
	 *     Quantification returns LogicalEvent
	 *     EAExpression returns LogicalEvent
	 *     EAElement returns LogicalEvent
	 *     LogicalEvent returns LogicalEvent
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         isExternVisible=Boolean 
	 *         type=[EADatatype|EString] 
	 *         timeCondition=[LogicalTimeCondition|EString]? 
	 *         operand+=[Attribute|EString] 
	 *         operand+=[Attribute|EString]* 
	 *         (visibleThroughFunctionPort+=[FunctionPort|EString] visibleThroughFunctionPort+=[FunctionPort|EString]*)? 
	 *         (value+=EAValue value+=EAValue*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_LogicalEvent(ISerializationContext context, LogicalEvent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns LogicalPath
	 *     EAElement returns LogicalPath
	 *     LogicalPath returns LogicalPath
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (segment+=[LogicalPath|EString] segment+=[LogicalPath|EString]*)? 
	 *         (strand+=[LogicalPath|EString] strand+=[LogicalPath|EString]*)? 
	 *         (logicalStimulus+=[LogicalEvent|EString] logicalStimulus+=[LogicalEvent|EString]*)? 
	 *         (logicalResponse+=[LogicalEvent|EString] logicalResponse+=[LogicalEvent|EString]*)? 
	 *         (correspondingExecutionEventChain+=[EventChain|EString] correspondingExecutionEventChain+=[EventChain|EString]*)? 
	 *         (succeedingExecutionEventChain+=[EventChain|EString] succeedingExecutionEventChain+=[EventChain|EString]*)? 
	 *         (precedingExecutionEventChain+=[EventChain|EString] precedingExecutionEventChain+=[EventChain|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         transformationOccurrence=TransformationOccurrence?
	 *     )
	 */
	protected void sequence_LogicalPath(ISerializationContext context, LogicalPath semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PortConnector returns LogicalPortConnector
	 *     Identifiable returns LogicalPortConnector
	 *     AllocationTarget returns LogicalPortConnector
	 *     EAElement returns LogicalPortConnector
	 *     LogicalPortConnector returns LogicalPortConnector
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         kind=HardwareBusKind? 
	 *         busSpeed=Float? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         port+=HardwarePortConnector_port 
	 *         port+=HardwarePortConnector_port*
	 *     )
	 */
	protected void sequence_LogicalPortConnector(ISerializationContext context, LogicalPortConnector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns LogicalTimeCondition
	 *     EAElement returns LogicalTimeCondition
	 *     LogicalTimeCondition returns LogicalTimeCondition
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         isLogicalTimeSuspended=Boolean 
	 *         consecutiveTimeCondition=[LogicalTimeCondition|EString]? 
	 *         startPointReference=[TransitionEvent|EString]? 
	 *         endPointReference=[TransitionEvent|EString]? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         upper=EAValue? 
	 *         lower=EAValue? 
	 *         width=EAValue?
	 *     )
	 */
	protected void sequence_LogicalTimeCondition(ISerializationContext context, LogicalTimeCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns LogicalTransformation
	 *     EAElement returns LogicalTransformation
	 *     LogicalTransformation returns LogicalTransformation
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         isClientServerInterface=Boolean 
	 *         timeInvariant=[LogicalTimeCondition|EString]? 
	 *         (postCondition+=[Quantification|EString] postCondition+=[Quantification|EString]*)? 
	 *         (preCondition+=[Quantification|EString] preCondition+=[Quantification|EString]*)? 
	 *         (quantificationInvariant+=[Quantification|EString] quantificationInvariant+=[Quantification|EString]*)? 
	 *         (in+=[Attribute|EString] in+=[Attribute|EString]*)? 
	 *         (out+=[Attribute|EString] out+=[Attribute|EString]*)? 
	 *         (contained+=[Attribute|EString] contained+=[Attribute|EString]*)? 
	 *         (clientServerInterfaceOperation+=[Operation|EString] clientServerInterfaceOperation+=[Operation|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         expression=EAExpression?
	 *     )
	 */
	protected void sequence_LogicalTransformation(ISerializationContext context, LogicalTransformation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns Mission
	 *     EAElement returns Mission
	 *     Mission returns Mission
	 *
	 * Constraint:
	 *     (shortName=Identifier category=Identifier? uuid=UUID? name=String0? (ownedComment+=Comment ownedComment+=Comment*)?)
	 */
	protected void sequence_Mission(ISerializationContext context, Mission semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimingDescription returns ModeEvent
	 *     Identifiable returns ModeEvent
	 *     Event returns ModeEvent
	 *     EAElement returns ModeEvent
	 *     ModeEvent returns ModeEvent
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (end+=[Mode|EString] end+=[Mode|EString]*)? 
	 *         (start+=[Mode|EString] start+=[Mode|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_ModeEvent(ISerializationContext context, ModeEvent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns ModeGroup
	 *     TraceableSpecification returns ModeGroup
	 *     Identifiable returns ModeGroup
	 *     EAElement returns ModeGroup
	 *     ModeGroup returns ModeGroup
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         precondition=EString 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         mode+=Mode 
	 *         mode+=Mode*
	 *     )
	 */
	protected void sequence_ModeGroup(ISerializationContext context, ModeGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns Mode
	 *     EAElement returns Mode
	 *     Mode returns Mode
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         condition=EString 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_Mode(ISerializationContext context, Mode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns Node
	 *     HardwareComponentType returns Node
	 *     Identifiable returns Node
	 *     EAElement returns Node
	 *     Node returns Node
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         executionRate=Float? 
	 *         (traceableSpecification+=[TraceableSpecification|EString] traceableSpecification+=[TraceableSpecification|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (ownedRelationship+=Relationship ownedRelationship+=Relationship*)? 
	 *         (pin+=HardwarePin pin+=HardwarePin*)? 
	 *         (part+=HardwareComponentPrototype part+=HardwareComponentPrototype*)? 
	 *         (connector+=HardwareConnector connector+=HardwareConnector*)? 
	 *         (port+=HardwarePort port+=HardwarePort*)? 
	 *         (portConnector+=PortConnector portConnector+=PortConnector*)?
	 *     )
	 */
	protected void sequence_Node(ISerializationContext context, Node semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimingConstraint returns NonConcurrenceConstraint
	 *     Identifiable returns NonConcurrenceConstraint
	 *     EAElement returns NonConcurrenceConstraint
	 *     NonConcurrenceConstraint returns NonConcurrenceConstraint
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         mode=[Mode|EString]? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         exclusive+=NonConcurrentConstraint_exclusive 
	 *         exclusive+=NonConcurrentConstraint_exclusive*
	 *     )
	 */
	protected void sequence_NonConcurrenceConstraint(ISerializationContext context, NonConcurrenceConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonConcurrentConstraint_exclusive returns NonConcurrentConstraint_exclusive
	 *
	 * Constraint:
	 *     (NameWasNotSet_0=[FunctionPrototype|EString] (NameWasNotSet_1+=[FunctionPrototype|EString] NameWasNotSet_1+=[FunctionPrototype|EString]*)?)
	 */
	protected void sequence_NonConcurrentConstraint_exclusive(ISerializationContext context, NonConcurrentConstraint_exclusive semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimingConstraint returns NonPreemptiveConstraint
	 *     Identifiable returns NonPreemptiveConstraint
	 *     EAElement returns NonPreemptiveConstraint
	 *     NonPreemptiveConstraint returns NonPreemptiveConstraint
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         mode=[Mode|EString]? 
	 *         eventChain=[EventChain|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_NonPreemptiveConstraint(ISerializationContext context, NonPreemptiveConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns Operation
	 *     EAElement returns Operation
	 *     Operation returns Operation
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         return=EADatatypePrototype? 
	 *         (argument+=EADatatypePrototype argument+=EADatatypePrototype*)?
	 *     )
	 */
	protected void sequence_Operation(ISerializationContext context, Operation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimingConstraint returns OrderConstraint
	 *     Identifiable returns OrderConstraint
	 *     EAElement returns OrderConstraint
	 *     OrderConstraint returns OrderConstraint
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         mode=[Mode|EString]? 
	 *         target=[Event|EString] 
	 *         source=[Event|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_OrderConstraint(ISerializationContext context, OrderConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimingConstraint returns OutputSynchronizationConstraint
	 *     Identifiable returns OutputSynchronizationConstraint
	 *     EAElement returns OutputSynchronizationConstraint
	 *     OutputSynchronizationConstraint returns OutputSynchronizationConstraint
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         mode=[Mode|EString]? 
	 *         scope+=[EventChain|EString] 
	 *         scope+=[EventChain|EString]* 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         tolerance=TimingExpression?
	 *     )
	 */
	protected void sequence_OutputSynchronizationConstraint(ISerializationContext context, OutputSynchronizationConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimingConstraint returns PatternConstraint
	 *     Identifiable returns PatternConstraint
	 *     EAElement returns PatternConstraint
	 *     PatternConstraint returns PatternConstraint
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         mode=[Mode|EString]? 
	 *         event=[Event|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         period=TimingExpression 
	 *         offset+=TimingExpression 
	 *         offset+=TimingExpression* 
	 *         minimum=TimingExpression? 
	 *         jitter=TimingExpression?
	 *     )
	 */
	protected void sequence_PatternConstraint(ISerializationContext context, PatternConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimingConstraint returns PeriodicConstraint
	 *     Identifiable returns PeriodicConstraint
	 *     EAElement returns PeriodicConstraint
	 *     PeriodicConstraint returns PeriodicConstraint
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         mode=[Mode|EString]? 
	 *         event=[Event|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         jitter=TimingExpression? 
	 *         period=TimingExpression 
	 *         minimum=TimingExpression?
	 *     )
	 */
	protected void sequence_PeriodicConstraint(ISerializationContext context, PeriodicConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns PortGroup
	 *     EAElement returns PortGroup
	 *     PortGroup returns PortGroup
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (port+=[FunctionPort|EString] port+=[FunctionPort|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (portGroup+=PortGroup portGroup+=PortGroup*)?
	 *     )
	 */
	protected void sequence_PortGroup(ISerializationContext context, PortGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HardwarePin returns PowerHardwarePin
	 *     Identifiable returns PowerHardwarePin
	 *     AllocationTarget returns PowerHardwarePin
	 *     EAElement returns PowerHardwarePin
	 *     PowerHardwarePin returns PowerHardwarePin
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         direction=EADirectionKind? 
	 *         isGround=Boolean? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_PowerHardwarePin(ISerializationContext context, PowerHardwarePin semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimingConstraint returns PrecedenceConstraint
	 *     Identifiable returns PrecedenceConstraint
	 *     EAElement returns PrecedenceConstraint
	 *     PrecedenceConstraint returns PrecedenceConstraint
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         mode=[Mode|EString]? 
	 *         eventChain=[EventChain|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_PrecedenceConstraint(ISerializationContext context, PrecedenceConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns PrivateContent
	 *     EAElement returns PrivateContent
	 *     PrivateContent returns PrivateContent
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         privateElement=[Identifiable|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_PrivateContent(ISerializationContext context, PrivateContent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns ProblemStatement
	 *     TraceableSpecification returns ProblemStatement
	 *     Identifiable returns ProblemStatement
	 *     EAElement returns ProblemStatement
	 *     ProblemStatement returns ProblemStatement
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         impact=String0 
	 *         problem=String0 
	 *         solutionBenefits=String0 
	 *         (affects+=[Stakeholder|EString] affects+=[Stakeholder|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_ProblemStatement(ISerializationContext context, ProblemStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns ProcessFaultPrototype
	 *     Anomaly returns ProcessFaultPrototype
	 *     EAElement returns ProcessFaultPrototype
	 *     ProcessFaultPrototype returns ProcessFaultPrototype
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         type=[EADatatype|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_ProcessFaultPrototype(ISerializationContext context, ProcessFaultPrototype semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns ProductPositioning
	 *     TraceableSpecification returns ProductPositioning
	 *     Identifiable returns ProductPositioning
	 *     EAElement returns ProductPositioning
	 *     ProductPositioning returns ProductPositioning
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         drivingNeeds=String0 
	 *         keyCapabilities=String0 
	 *         primaryCompetitiveAlternative=String0 
	 *         primaryDifferentiation=String0 
	 *         targetCustomers=String0 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_ProductPositioning(ISerializationContext context, ProductPositioning semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns QualityRequirement
	 *     TraceableSpecification returns QualityRequirement
	 *     Requirement returns QualityRequirement
	 *     Identifiable returns QualityRequirement
	 *     EAElement returns QualityRequirement
	 *     QualityRequirement returns QualityRequirement
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         formalism=String0? 
	 *         kind=QualityRequirementKind 
	 *         (mode+=[Mode|EString] mode+=[Mode|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_QualityRequirement(ISerializationContext context, QualityRequirement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAValue returns Quantification
	 *     Identifiable returns Quantification
	 *     Quantification returns Quantification
	 *     EAExpression returns Quantification
	 *     EAElement returns Quantification
	 *     Quantification_Impl returns Quantification
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         type=[EADatatype|EString] 
	 *         timeCondition=[LogicalTimeCondition|EString]? 
	 *         operand+=[Attribute|EString] 
	 *         operand+=[Attribute|EString]* 
	 *         (value+=EAValue value+=EAValue*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_Quantification_Impl(ISerializationContext context, Quantification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns QuantitativeSafetyConstraint
	 *     TraceableSpecification returns QuantitativeSafetyConstraint
	 *     Identifiable returns QuantitativeSafetyConstraint
	 *     EAElement returns QuantitativeSafetyConstraint
	 *     QuantitativeSafetyConstraint returns QuantitativeSafetyConstraint
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         failureRate=Float 
	 *         repairRate=Float 
	 *         constrainedFaultFailure+=[FaultFailure|EString] 
	 *         constrainedFaultFailure+=[FaultFailure|EString]* 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_QuantitativeSafetyConstraint(ISerializationContext context, QuantitativeSafetyConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns Quantity
	 *     Identifiable returns Quantity
	 *     EAElement returns Quantity
	 *     Quantity returns Quantity
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         amountOfSubstanceExp=Integer 
	 *         electricCurrentExp=Integer 
	 *         lengthExp=Integer 
	 *         luminousIntensityExp=Integer 
	 *         massExp=Integer 
	 *         thermodynamicTemperatureExp=Integer 
	 *         timeExp=Integer 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_Quantity(ISerializationContext context, Quantity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns RangeableValueType
	 *     TraceableSpecification returns RangeableValueType
	 *     EADatatype returns RangeableValueType
	 *     Identifiable returns RangeableValueType
	 *     EAElement returns RangeableValueType
	 *     RangeableValueType returns RangeableValueType
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         accuracy=Float 
	 *         resolution=Float 
	 *         significantDigits=Integer? 
	 *         baseRangeable=[EANumerical|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_RangeableValueType(ISerializationContext context, RangeableValueType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Comment returns Rationale
	 *     Rationale returns Rationale
	 *
	 * Constraint:
	 *     body=String0
	 */
	protected void sequence_Rationale(ISerializationContext context, Rationale semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Eastadl22Package.eINSTANCE.getComment_Body()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Eastadl22Package.eINSTANCE.getComment_Body()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRationaleAccess().getBodyString0ParserRuleCall_3_0(), semanticObject.getBody());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TimingConstraint returns ReactionConstraint
	 *     Identifiable returns ReactionConstraint
	 *     EAElement returns ReactionConstraint
	 *     ReactionConstraint returns ReactionConstraint
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         mode=[Mode|EString]? 
	 *         scope=[EventChain|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         minimum=TimingExpression? 
	 *         maximum=TimingExpression?
	 *     )
	 */
	protected void sequence_ReactionConstraint(ISerializationContext context, ReactionConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Relationship returns Realization
	 *     Identifiable returns Realization
	 *     EAElement returns Realization
	 *     Realization returns Realization
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         realized+=Realization_realized 
	 *         realized+=Realization_realized* 
	 *         realizedBy+=Realization_realizedBy 
	 *         realizedBy+=Realization_realizedBy*
	 *     )
	 */
	protected void sequence_Realization(ISerializationContext context, Realization semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Realization_realizedBy returns Realization_realizedBy
	 *
	 * Constraint:
	 *     (identifiable_target=[Identifiable|EString] (identifiable_context+=[Identifiable|EString] identifiable_context+=[Identifiable|EString]*)?)
	 */
	protected void sequence_Realization_realizedBy(ISerializationContext context, Realization_realizedBy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Realization_realized returns Realization_realized
	 *
	 * Constraint:
	 *     (identifiable_target=[EAElement|EString] (identifiable_context+=[EAElement|EString] identifiable_context+=[EAElement|EString]*)?)
	 */
	protected void sequence_Realization_realized(ISerializationContext context, Realization_realized semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Relationship returns Refine
	 *     RequirementsRelationship returns Refine
	 *     Identifiable returns Refine
	 *     EAElement returns Refine
	 *     Refine returns Refine
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         refinedRequirement+=[Requirement|EString] 
	 *         refinedRequirement+=[Requirement|EString]* 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         refinedBy+=Refine_refinedBy 
	 *         refinedBy+=Refine_refinedBy*
	 *     )
	 */
	protected void sequence_Refine(ISerializationContext context, Refine semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Refine_refinedBy returns Refine_refinedBy
	 *
	 * Constraint:
	 *     (identifiable_target=[Identifiable|EString] (identifiable_context+=[Identifiable|EString] identifiable_context+=[Identifiable|EString]*)?)
	 */
	protected void sequence_Refine_refinedBy(ISerializationContext context, Refine_refinedBy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimingConstraint returns RepetitionConstraint
	 *     Identifiable returns RepetitionConstraint
	 *     EAElement returns RepetitionConstraint
	 *     RepetitionConstraint returns RepetitionConstraint
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         span=Integer 
	 *         mode=[Mode|EString]? 
	 *         event=[Event|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         upper=TimingExpression? 
	 *         lower=TimingExpression? 
	 *         jitter=TimingExpression?
	 *     )
	 */
	protected void sequence_RepetitionConstraint(ISerializationContext context, RepetitionConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns Requirement
	 *     TraceableSpecification returns Requirement
	 *     Requirement returns Requirement
	 *     Identifiable returns Requirement
	 *     EAElement returns Requirement
	 *     Requirement_Impl returns Requirement
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=EString? 
	 *         uri=String0? 
	 *         formalism=String0? 
	 *         (mode+=[Mode|EString] mode+=[Mode|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_Requirement_Impl(ISerializationContext context, Requirement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns RequirementsHierarchy
	 *     TraceableSpecification returns RequirementsHierarchy
	 *     RequirementsHierarchy returns RequirementsHierarchy
	 *     Identifiable returns RequirementsHierarchy
	 *     EAElement returns RequirementsHierarchy
	 *     RequirementsHierarchy_Impl returns RequirementsHierarchy
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         (containedRequirement+=[Requirement|EString] containedRequirement+=[Requirement|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (childHierarchy+=RequirementsHierarchy childHierarchy+=RequirementsHierarchy*)?
	 *     )
	 */
	protected void sequence_RequirementsHierarchy_Impl(ISerializationContext context, RequirementsHierarchy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Relationship returns RequirementsLink
	 *     RequirementsRelationship returns RequirementsLink
	 *     Identifiable returns RequirementsLink
	 *     EAElement returns RequirementsLink
	 *     RequirementsLink returns RequirementsLink
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         isBidirectional=Boolean 
	 *         source+=[Requirement|EString] 
	 *         source+=[Requirement|EString]* 
	 *         target+=[Requirement|EString] 
	 *         target+=[Requirement|EString]* 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_RequirementsLink(ISerializationContext context, RequirementsLink semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns RequirementsModel
	 *     Identifiable returns RequirementsModel
	 *     EAElement returns RequirementsModel
	 *     RequirementsModel returns RequirementsModel
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (traceableSpecification+=[TraceableSpecification|EString] traceableSpecification+=[TraceableSpecification|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (ownedRelationship+=Relationship ownedRelationship+=Relationship*)? 
	 *         (useCase+=UseCase useCase+=UseCase*)? 
	 *         (operationalSituation+=Situation operationalSituation+=Situation*)? 
	 *         (requirementsHierarchy+=RequirementsHierarchy requirementsHierarchy+=RequirementsHierarchy*)? 
	 *         (requirement+=Requirement requirement+=Requirement*)? 
	 *         (requirementsRelationshipGroup+=RequirementsRelationshipGroup requirementsRelationshipGroup+=RequirementsRelationshipGroup*)? 
	 *         (requirementType+=UserElementType requirementType+=UserElementType*)?
	 *     )
	 */
	protected void sequence_RequirementsModel(ISerializationContext context, RequirementsModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns RequirementsRelationshipGroup
	 *     TraceableSpecification returns RequirementsRelationshipGroup
	 *     Identifiable returns RequirementsRelationshipGroup
	 *     EAElement returns RequirementsRelationshipGroup
	 *     RequirementsRelationshipGroup returns RequirementsRelationshipGroup
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         requirementsRelationship+=[RequirementsRelationship|EString] 
	 *         requirementsRelationship+=[RequirementsRelationship|EString]* 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_RequirementsRelationshipGroup(ISerializationContext context, RequirementsRelationshipGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns ReuseMetaInformation
	 *     TraceableSpecification returns ReuseMetaInformation
	 *     Identifiable returns ReuseMetaInformation
	 *     EAElement returns ReuseMetaInformation
	 *     ReuseMetaInformation returns ReuseMetaInformation
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         information=String0 
	 *         isReusable=Boolean 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_ReuseMetaInformation(ISerializationContext context, ReuseMetaInformation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns SafetyCase
	 *     TraceableSpecification returns SafetyCase
	 *     Identifiable returns SafetyCase
	 *     EAElement returns SafetyCase
	 *     SafetyCase returns SafetyCase
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         context=String0 
	 *         stage=LifecycleStageKind 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         claim+=Claim 
	 *         claim+=Claim* 
	 *         ground+=Ground 
	 *         ground+=Ground* 
	 *         (warrant+=Warrant warrant+=Warrant*)? 
	 *         (safetyCase+=SafetyCase safetyCase+=SafetyCase*)?
	 *     )
	 */
	protected void sequence_SafetyCase(ISerializationContext context, SafetyCase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns SafetyConstraint
	 *     TraceableSpecification returns SafetyConstraint
	 *     Identifiable returns SafetyConstraint
	 *     EAElement returns SafetyConstraint
	 *     SafetyConstraint returns SafetyConstraint
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         asilValue=ASILKind 
	 *         constrainedFaultFailure+=[FaultFailure|EString] 
	 *         constrainedFaultFailure+=[FaultFailure|EString]* 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_SafetyConstraint(ISerializationContext context, SafetyConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns SafetyGoal
	 *     EAElement returns SafetyGoal
	 *     SafetyGoal returns SafetyGoal
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         hazardClassification=ASILKind 
	 *         derivedFrom+=[HazardousEvent|EString] 
	 *         derivedFrom+=[HazardousEvent|EString]* 
	 *         requirement+=[Requirement|EString] 
	 *         requirement+=[Requirement|EString]* 
	 *         (safeState+=[Mode|EString] safeState+=[Mode|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_SafetyGoal(ISerializationContext context, SafetyGoal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Relationship returns Satisfy
	 *     RequirementsRelationship returns Satisfy
	 *     Identifiable returns Satisfy
	 *     EAElement returns Satisfy
	 *     Satisfy returns Satisfy
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (satisfiedUseCase+=[UseCase|EString] satisfiedUseCase+=[UseCase|EString]*)? 
	 *         (satisfiedRequirement+=[Requirement|EString] satisfiedRequirement+=[Requirement|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (satisfiedBy+=Satisfy_satisfiedBy satisfiedBy+=Satisfy_satisfiedBy*)?
	 *     )
	 */
	protected void sequence_Satisfy(ISerializationContext context, Satisfy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Satisfy_satisfiedBy returns Satisfy_satisfiedBy
	 *
	 * Constraint:
	 *     (identifiable_target=[Identifiable|EString] (identifiable_context+=[Identifiable|EString] identifiable_context+=[Identifiable|EString]*)?)
	 */
	protected void sequence_Satisfy_satisfiedBy(ISerializationContext context, Satisfy_satisfiedBy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAValue returns SelectionCriterion
	 *     EAExpression returns SelectionCriterion
	 *     SelectionCriterion returns SelectionCriterion
	 *
	 * Constraint:
	 *     (type=[EADatatype|EString] (source+=[Identifiable|EString] source+=[Identifiable|EString]*)? (value+=EAValue value+=EAValue*)?)
	 */
	protected void sequence_SelectionCriterion(ISerializationContext context, SelectionCriterion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns Sensor
	 *     HardwareComponentType returns Sensor
	 *     Identifiable returns Sensor
	 *     EAElement returns Sensor
	 *     Sensor returns Sensor
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (traceableSpecification+=[TraceableSpecification|EString] traceableSpecification+=[TraceableSpecification|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (ownedRelationship+=Relationship ownedRelationship+=Relationship*)? 
	 *         (pin+=HardwarePin pin+=HardwarePin*)? 
	 *         (part+=HardwareComponentPrototype part+=HardwareComponentPrototype*)? 
	 *         (connector+=HardwareConnector connector+=HardwareConnector*)? 
	 *         (port+=HardwarePort port+=HardwarePort*)? 
	 *         (portConnector+=PortConnector portConnector+=PortConnector*)?
	 *     )
	 */
	protected void sequence_Sensor(ISerializationContext context, Sensor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns Situation
	 *     TraceableSpecification returns Situation
	 *     Identifiable returns Situation
	 *     EAElement returns Situation
	 *     Situation returns Situation
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_Situation(ISerializationContext context, Situation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimingConstraint returns SporadicConstraint
	 *     Identifiable returns SporadicConstraint
	 *     EAElement returns SporadicConstraint
	 *     SporadicConstraint returns SporadicConstraint
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         mode=[Mode|EString]? 
	 *         event=[Event|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         jitter=TimingExpression? 
	 *         upper=TimingExpression? 
	 *         minimum=TimingExpression? 
	 *         lower=TimingExpression?
	 *     )
	 */
	protected void sequence_SporadicConstraint(ISerializationContext context, SporadicConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns StakeholderNeed
	 *     TraceableSpecification returns StakeholderNeed
	 *     Identifiable returns StakeholderNeed
	 *     EAElement returns StakeholderNeed
	 *     StakeholderNeed returns StakeholderNeed
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         need=String0 
	 *         priority=Integer 
	 *         stakeholder+=[Stakeholder|EString] 
	 *         stakeholder+=[Stakeholder|EString]* 
	 *         problemStatement+=[ProblemStatement|EString] 
	 *         problemStatement+=[ProblemStatement|EString]* 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_StakeholderNeed(ISerializationContext context, StakeholderNeed semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns Stakeholder
	 *     TraceableSpecification returns Stakeholder
	 *     Identifiable returns Stakeholder
	 *     EAElement returns Stakeholder
	 *     Stakeholder returns Stakeholder
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         responsibilities=String0 
	 *         successCriteria=String0? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_Stakeholder(ISerializationContext context, Stakeholder semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimingDescription returns StateEvent
	 *     Identifiable returns StateEvent
	 *     Event returns StateEvent
	 *     EAElement returns StateEvent
	 *     StateEvent returns StateEvent
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         start=[State|EString]? 
	 *         end=[State|EString]? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_StateEvent(ISerializationContext context, StateEvent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns State
	 *     EAElement returns State
	 *     State returns State
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         isErrorState=Boolean 
	 *         isHazard=Boolean 
	 *         isInitState=Boolean 
	 *         isMode=Boolean 
	 *         (timeInvariant+=[LogicalTimeCondition|EString] timeInvariant+=[LogicalTimeCondition|EString]*)? 
	 *         (quantificationInvariant+=[Quantification|EString] quantificationInvariant+=[Quantification|EString]*)? 
	 *         (hazardDeclaration+=[Hazard|EString] hazardDeclaration+=[Hazard|EString]*)? 
	 *         (modeDeclaration+=[Mode|EString] modeDeclaration+=[Mode|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_State(ISerializationContext context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimingConstraint returns StrongDelayConstraint
	 *     Identifiable returns StrongDelayConstraint
	 *     EAElement returns StrongDelayConstraint
	 *     StrongDelayConstraint returns StrongDelayConstraint
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         mode=[Mode|EString]? 
	 *         target=[Event|EString] 
	 *         source=[Event|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         upper=TimingExpression? 
	 *         lower=TimingExpression?
	 *     )
	 */
	protected void sequence_StrongDelayConstraint(ISerializationContext context, StrongDelayConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimingConstraint returns StrongSynchronizationConstraint
	 *     Identifiable returns StrongSynchronizationConstraint
	 *     EAElement returns StrongSynchronizationConstraint
	 *     StrongSynchronizationConstraint returns StrongSynchronizationConstraint
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         mode=[Mode|EString]? 
	 *         event+=[Event|EString] 
	 *         event+=[Event|EString]* 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         tolerance=TimingExpression?
	 *     )
	 */
	protected void sequence_StrongSynchronizationConstraint(ISerializationContext context, StrongSynchronizationConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimingConstraint returns SynchronizationConstraint
	 *     Identifiable returns SynchronizationConstraint
	 *     EAElement returns SynchronizationConstraint
	 *     SynchronizationConstraint returns SynchronizationConstraint
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         mode=[Mode|EString]? 
	 *         event+=[Event|EString] 
	 *         event+=[Event|EString]* 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         tolerance=TimingExpression?
	 *     )
	 */
	protected void sequence_SynchronizationConstraint(ISerializationContext context, SynchronizationConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns SynchronousTransition
	 *     Transition returns SynchronousTransition
	 *     EAElement returns SynchronousTransition
	 *     SynchronousTransition returns SynchronousTransition
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         from=[State|EString] 
	 *         to=[State|EString] 
	 *         (timeGuard+=[LogicalTimeCondition|EString] timeGuard+=[LogicalTimeCondition|EString]*)? 
	 *         effect=[TransformationOccurrence|EString]? 
	 *         (quantificationGuard+=[Quantification|EString] quantificationGuard+=[Quantification|EString]*)? 
	 *         readTransitionEvent=[TransitionEvent|EString]? 
	 *         writeTransitionEvent=[TransitionEvent|EString]? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_SynchronousTransition(ISerializationContext context, SynchronousTransition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns SystemModel
	 *     Identifiable returns SystemModel
	 *     EAElement returns SystemModel
	 *     SystemModel returns SystemModel
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (traceableSpecification+=[TraceableSpecification|EString] traceableSpecification+=[TraceableSpecification|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (ownedRelationship+=Relationship ownedRelationship+=Relationship*)? 
	 *         vehicleLevel=VehicleLevel? 
	 *         analysisLevel=AnalysisLevel? 
	 *         designLevel=DesignLevel? 
	 *         implementationLevel=ImplementationLevel?
	 *     )
	 */
	protected void sequence_SystemModel(ISerializationContext context, SystemModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns TakeRateConstraint
	 *     TraceableSpecification returns TakeRateConstraint
	 *     Identifiable returns TakeRateConstraint
	 *     GenericConstraint returns TakeRateConstraint
	 *     EAElement returns TakeRateConstraint
	 *     TakeRateConstraint returns TakeRateConstraint
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         kind=GenericConstraintKind 
	 *         takeRate=Float 
	 *         (target+=[Identifiable|EString] target+=[Identifiable|EString]*)? 
	 *         (mode+=[Mode|EString] mode+=[Mode|EString]*)? 
	 *         (source+=[Identifiable|EString] source+=[Identifiable|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         value=EAValue?
	 *     )
	 */
	protected void sequence_TakeRateConstraint(ISerializationContext context, TakeRateConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns TechnicalSafetyConcept
	 *     TraceableSpecification returns TechnicalSafetyConcept
	 *     RequirementsHierarchy returns TechnicalSafetyConcept
	 *     Identifiable returns TechnicalSafetyConcept
	 *     EAElement returns TechnicalSafetyConcept
	 *     TechnicalSafetyConcept returns TechnicalSafetyConcept
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         (containedRequirement+=[Requirement|EString] containedRequirement+=[Requirement|EString]*)? 
	 *         (technicalSafetyRequirement+=[Requirement|EString] technicalSafetyRequirement+=[Requirement|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (childHierarchy+=RequirementsHierarchy childHierarchy+=RequirementsHierarchy*)?
	 *     )
	 */
	protected void sequence_TechnicalSafetyConcept(ISerializationContext context, TechnicalSafetyConcept semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns TemporalConstraint
	 *     EAElement returns TemporalConstraint
	 *     TemporalConstraint returns TemporalConstraint
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         initState=[State|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         assertion=EAExpression? 
	 *         (timeCondition+=LogicalTimeCondition timeCondition+=LogicalTimeCondition*)? 
	 *         (state+=State state+=State*)? 
	 *         (transition+=Transition transition+=Transition*)? 
	 *         (transitionEvent+=TransitionEvent transitionEvent+=TransitionEvent*)?
	 *     )
	 */
	protected void sequence_TemporalConstraint(ISerializationContext context, TemporalConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAValue returns TimingExpression
	 *     EAExpression returns TimingExpression
	 *     TimingExpression returns TimingExpression
	 *
	 * Constraint:
	 *     (type=[EADatatype|EString] (value+=EAValue value+=EAValue*)?)
	 */
	protected void sequence_TimingExpression(ISerializationContext context, TimingExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns Timing
	 *     Identifiable returns Timing
	 *     EAElement returns Timing
	 *     Timing returns Timing
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (traceableSpecification+=[TraceableSpecification|EString] traceableSpecification+=[TraceableSpecification|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (ownedRelationship+=Relationship ownedRelationship+=Relationship*)? 
	 *         (description+=TimingDescription description+=TimingDescription*)? 
	 *         (constraint+=TimingConstraint constraint+=TimingConstraint*)?
	 *     )
	 */
	protected void sequence_Timing(ISerializationContext context, Timing semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns TransformationOccurrence
	 *     EAElement returns TransformationOccurrence
	 *     TransformationOccurrence returns TransformationOccurrence
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         timeCondition=[LogicalTimeCondition|EString]? 
	 *         invokedLogicalTransformation=[LogicalTransformation|EString] 
	 *         (outQuantification+=[Quantification|EString] outQuantification+=[Quantification|EString]*)? 
	 *         (inQuantification+=[Quantification|EString] inQuantification+=[Quantification|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_TransformationOccurrence(ISerializationContext context, TransformationOccurrence semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns TransitionEvent
	 *     BehaviorConstraintParameter returns TransitionEvent
	 *     TransitionEvent returns TransitionEvent
	 *     EAElement returns TransitionEvent
	 *     TransitionEvent_Impl returns TransitionEvent
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (occurredLogicalEvent+=[LogicalEvent|EString] occurredLogicalEvent+=[LogicalEvent|EString]*)? 
	 *         (occurredFaultFailure+=[FaultFailure|EString] occurredFaultFailure+=[FaultFailure|EString]*)? 
	 *         (occurredHazardousEvent+=[HazardousEvent|EString] occurredHazardousEvent+=[HazardousEvent|EString]*)? 
	 *         (occurredFeatureFlaw+=[FeatureFlaw|EString] occurredFeatureFlaw+=[FeatureFlaw|EString]*)? 
	 *         (occurredExecutionEvent+=[Event|EString] occurredExecutionEvent+=[Event|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_TransitionEvent_Impl(ISerializationContext context, TransitionEvent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns Transition
	 *     Transition returns Transition
	 *     EAElement returns Transition
	 *     Transition_Impl returns Transition
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         from=[State|EString] 
	 *         to=[State|EString] 
	 *         (timeGuard+=[LogicalTimeCondition|EString] timeGuard+=[LogicalTimeCondition|EString]*)? 
	 *         effect=[TransformationOccurrence|EString]? 
	 *         (quantificationGuard+=[Quantification|EString] quantificationGuard+=[Quantification|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_Transition_Impl(ISerializationContext context, Transition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns Unit
	 *     Identifiable returns Unit
	 *     EAElement returns Unit
	 *     Unit returns Unit
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         factor=Float 
	 *         symbol=String0 
	 *         offset=Float 
	 *         reference=[Unit|EString]? 
	 *         quantity=[Quantity|EString]? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_Unit(ISerializationContext context, Unit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns UseCase
	 *     TraceableSpecification returns UseCase
	 *     Identifiable returns UseCase
	 *     EAElement returns UseCase
	 *     UseCase returns UseCase
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (interact+=Interact interact+=Interact*)? 
	 *         (extend+=Extend extend+=Extend*)? 
	 *         (include+=Include include+=Include*)? 
	 *         (extensionPoint+=ExtensionPoint extensionPoint+=ExtensionPoint*)?
	 *     )
	 */
	protected void sequence_UseCase(ISerializationContext context, UseCase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns UserAttributeDefinition
	 *     Identifiable returns UserAttributeDefinition
	 *     EAElement returns UserAttributeDefinition
	 *     UserAttributeDefinition returns UserAttributeDefinition
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         type=[EADatatype|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         defaultValue=EAValue?
	 *     )
	 */
	protected void sequence_UserAttributeDefinition(ISerializationContext context, UserAttributeDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns UserAttributedElement
	 *     Identifiable returns UserAttributedElement
	 *     EAElement returns UserAttributedElement
	 *     UserAttributedElement returns UserAttributedElement
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (uaType+=[UserElementType|EString] uaType+=[UserElementType|EString]*)? 
	 *         attributedElement=[Identifiable|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (uaValue+=EAValue uaValue+=EAValue*)?
	 *     )
	 */
	protected void sequence_UserAttributedElement(ISerializationContext context, UserAttributedElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns UserElementType
	 *     Identifiable returns UserElementType
	 *     EAElement returns UserElementType
	 *     UserElementType returns UserElementType
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         validFor=String0? 
	 *         key=String0 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (uaDefinition+=UserAttributeDefinition uaDefinition+=UserAttributeDefinition*)?
	 *     )
	 */
	protected void sequence_UserElementType(ISerializationContext context, UserElementType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns VVActualOutcome
	 *     TraceableSpecification returns VVActualOutcome
	 *     Identifiable returns VVActualOutcome
	 *     EAElement returns VVActualOutcome
	 *     VVActualOutcome returns VVActualOutcome
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         intendedOutcome=[VVIntendedOutcome|EString]? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_VVActualOutcome(ISerializationContext context, VVActualOutcome semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns VVCase
	 *     TraceableSpecification returns VVCase
	 *     Identifiable returns VVCase
	 *     EAElement returns VVCase
	 *     VVCase returns VVCase
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         abstractVVCase=[VVCase|EString]? 
	 *         (vvTarget+=[VVTarget|EString] vvTarget+=[VVTarget|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (vvLog+=VVLog vvLog+=VVLog*)? 
	 *         (vvProcedure+=VVProcedure vvProcedure+=VVProcedure*)? 
	 *         (vvSubject+=VVCase_vvSubject vvSubject+=VVCase_vvSubject*)?
	 *     )
	 */
	protected void sequence_VVCase(ISerializationContext context, VVCase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VVCase_vvSubject returns VVCase_vvSubject
	 *
	 * Constraint:
	 *     (identifiable_target=[Identifiable|EString] (identifiable_context+=[Identifiable|EString] identifiable_context+=[Identifiable|EString]*)?)
	 */
	protected void sequence_VVCase_vvSubject(ISerializationContext context, VVCase_vvSubject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns VVIntendedOutcome
	 *     TraceableSpecification returns VVIntendedOutcome
	 *     Identifiable returns VVIntendedOutcome
	 *     EAElement returns VVIntendedOutcome
	 *     VVIntendedOutcome returns VVIntendedOutcome
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_VVIntendedOutcome(ISerializationContext context, VVIntendedOutcome semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns VVLog
	 *     TraceableSpecification returns VVLog
	 *     Identifiable returns VVLog
	 *     EAElement returns VVLog
	 *     VVLog returns VVLog
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         date=String0 
	 *         performedVVProcedure=[VVProcedure|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (vvActualOutcome+=VVActualOutcome vvActualOutcome+=VVActualOutcome*)?
	 *     )
	 */
	protected void sequence_VVLog(ISerializationContext context, VVLog semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns VVProcedure
	 *     TraceableSpecification returns VVProcedure
	 *     Identifiable returns VVProcedure
	 *     EAElement returns VVProcedure
	 *     VVProcedure returns VVProcedure
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         abstractVVProcedure=[VVProcedure|EString]? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (vvIntendedOutcome+=VVIntendedOutcome vvIntendedOutcome+=VVIntendedOutcome*)? 
	 *         (vvStimuli+=VVStimuli vvStimuli+=VVStimuli*)?
	 *     )
	 */
	protected void sequence_VVProcedure(ISerializationContext context, VVProcedure semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns VVStimuli
	 *     TraceableSpecification returns VVStimuli
	 *     Identifiable returns VVStimuli
	 *     EAElement returns VVStimuli
	 *     VVStimuli returns VVStimuli
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_VVStimuli(ISerializationContext context, VVStimuli semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns VVTarget
	 *     TraceableSpecification returns VVTarget
	 *     Identifiable returns VVTarget
	 *     EAElement returns VVTarget
	 *     VVTarget returns VVTarget
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (element+=VVTarget_element element+=VVTarget_element*)?
	 *     )
	 */
	protected void sequence_VVTarget(ISerializationContext context, VVTarget semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VVTarget_element returns VVTarget_element
	 *
	 * Constraint:
	 *     ((identifiable_context+=[Identifiable|EString] identifiable_context+=[Identifiable|EString]*)? identifiable_target=[Identifiable|EString])
	 */
	protected void sequence_VVTarget_element(ISerializationContext context, VVTarget_element semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns Variability
	 *     Identifiable returns Variability
	 *     EAElement returns Variability
	 *     Variability returns Variability
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (traceableSpecification+=[TraceableSpecification|EString] traceableSpecification+=[TraceableSpecification|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (ownedRelationship+=Relationship ownedRelationship+=Relationship*)? 
	 *         (productFeatureModel+=FeatureModel productFeatureModel+=FeatureModel*)? 
	 *         (configurableContainer+=ConfigurableContainer configurableContainer+=ConfigurableContainer*)? 
	 *         (variableElement+=VariableElement variableElement+=VariableElement*)? 
	 *         (configuration+=FeatureConfiguration configuration+=FeatureConfiguration*)? 
	 *         (decisionModel+=VehicleLevelBinding decisionModel+=VehicleLevelBinding*)? 
	 *         (containerConfiguration+=ContainerConfiguration containerConfiguration+=ContainerConfiguration*)?
	 *     )
	 */
	protected void sequence_Variability(ISerializationContext context, Variability semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns VariableElement
	 *     EAElement returns VariableElement
	 *     VariableElement returns VariableElement
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         actualBindingTime=BindingTimeKind? 
	 *         requiredBindingTime=BindingTimeKind? 
	 *         optionalElement+=[Identifiable|EString] 
	 *         optionalElement+=[Identifiable|EString]* 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         reuseMetaInformation=ReuseMetaInformation?
	 *     )
	 */
	protected void sequence_VariableElement(ISerializationContext context, VariableElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns VariationGroup
	 *     EAElement returns VariationGroup
	 *     VariationGroup returns VariationGroup
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         constraint=String0? 
	 *         kind=VariabilityDependencyKind 
	 *         variableElement+=[VariableElement|EString] 
	 *         variableElement+=[VariableElement|EString]* 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_VariationGroup(ISerializationContext context, VariationGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns VehicleFeature
	 *     FeatureTreeNode returns VehicleFeature
	 *     Feature returns VehicleFeature
	 *     Identifiable returns VehicleFeature
	 *     EAElement returns VehicleFeature
	 *     VehicleFeature returns VehicleFeature
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         cardinality=String0 
	 *         actualBindingTime=BindingTimeKind? 
	 *         requiredBindingTime=BindingTimeKind? 
	 *         isCustomerVisible=Boolean 
	 *         isDesignVariabilityRationale=Boolean 
	 *         isRemoved=Boolean 
	 *         (traceableSpecification+=[TraceableSpecification|EString] traceableSpecification+=[TraceableSpecification|EString]*)? 
	 *         featureParameter=[EAValue|EString]? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (ownedRelationship+=Relationship ownedRelationship+=Relationship*)? 
	 *         (childNode+=FeatureTreeNode childNode+=FeatureTreeNode*)? 
	 *         deviationAttributeSet=DeviationAttributeSet?
	 *     )
	 */
	protected void sequence_VehicleFeature(ISerializationContext context, VehicleFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns VehicleLevelBinding
	 *     EAElement returns VehicleLevelBinding
	 *     VehicleLevelBinding returns VehicleLevelBinding
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (targetFeatureModel+=[FeatureModel|EString] targetFeatureModel+=[FeatureModel|EString]*)? 
	 *         (sourceVehicleFeatureModel+=[FeatureModel|EString] sourceVehicleFeatureModel+=[FeatureModel|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (rootEntry+=ConfigurationDecisionModelEntry rootEntry+=ConfigurationDecisionModelEntry*)?
	 *     )
	 */
	protected void sequence_VehicleLevelBinding(ISerializationContext context, VehicleLevelBinding semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns VehicleLevel
	 *     Identifiable returns VehicleLevel
	 *     EAElement returns VehicleLevel
	 *     VehicleLevel returns VehicleLevel
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (traceableSpecification+=[TraceableSpecification|EString] traceableSpecification+=[TraceableSpecification|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (ownedRelationship+=Relationship ownedRelationship+=Relationship*)? 
	 *         (technicalFeatureModel+=FeatureModel technicalFeatureModel+=FeatureModel*)?
	 *     )
	 */
	protected void sequence_VehicleLevel(ISerializationContext context, VehicleLevel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identifiable returns VehicleSystem
	 *     EAElement returns VehicleSystem
	 *     VehicleSystem returns VehicleSystem
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         has+=[Stakeholder|EString] 
	 *         has+=[Stakeholder|EString]* 
	 *         fulfills+=[Mission|EString] 
	 *         fulfills+=[Mission|EString]* 
	 *         hasAn=[Architecture|EString] 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_VehicleSystem(ISerializationContext context, VehicleSystem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns VerificationValidation
	 *     Identifiable returns VerificationValidation
	 *     EAElement returns VerificationValidation
	 *     VerificationValidation returns VerificationValidation
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         (traceableSpecification+=[TraceableSpecification|EString] traceableSpecification+=[TraceableSpecification|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (ownedRelationship+=Relationship ownedRelationship+=Relationship*)? 
	 *         (verify+=Verify verify+=Verify*)? 
	 *         (vvCase+=VVCase vvCase+=VVCase*)? 
	 *         (vvTarget+=VVTarget vvTarget+=VVTarget*)?
	 *     )
	 */
	protected void sequence_VerificationValidation(ISerializationContext context, VerificationValidation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Relationship returns Verify
	 *     RequirementsRelationship returns Verify
	 *     Identifiable returns Verify
	 *     EAElement returns Verify
	 *     Verify returns Verify
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         verifiedByCase+=[VVCase|EString] 
	 *         verifiedByCase+=[VVCase|EString]* 
	 *         (verifiedByProcedure+=[VVProcedure|EString] verifiedByProcedure+=[VVProcedure|EString]*)? 
	 *         verifiedRequirement+=[Requirement|EString] 
	 *         verifiedRequirement+=[Requirement|EString]* 
	 *         (ownedComment+=Comment ownedComment+=Comment*)?
	 *     )
	 */
	protected void sequence_Verify(ISerializationContext context, Verify semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAPackageableElement returns Warrant
	 *     TraceableSpecification returns Warrant
	 *     Identifiable returns Warrant
	 *     EAElement returns Warrant
	 *     Warrant returns Warrant
	 *
	 * Constraint:
	 *     (
	 *         shortName=Identifier 
	 *         category=Identifier? 
	 *         uuid=UUID? 
	 *         name=String0? 
	 *         text=String0? 
	 *         uri=String0? 
	 *         (decomposedGoal+=[Claim|EString] decomposedGoal+=[Claim|EString]*)? 
	 *         (evidence+=[Ground|EString] evidence+=[Ground|EString]*)? 
	 *         (ownedComment+=Comment ownedComment+=Comment*)? 
	 *         (justification+=Rationale justification+=Rationale*)?
	 *     )
	 */
	protected void sequence_Warrant(ISerializationContext context, Warrant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
