/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydot.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDotGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class DotAstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydot.MyDot.DotAst");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDotAstAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cGraphsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGraphsDotGraphParserRuleCall_1_0 = (RuleCall)cGraphsAssignment_1.eContents().get(0);
		
		//DotAst returns DotAst:
		//    {DotAst}
		//          (graphs+=DotGraph)*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{DotAst}
		//      (graphs+=DotGraph)*
		public Group getGroup() { return cGroup; }
		
		//{DotAst}
		public Action getDotAstAction_0() { return cDotAstAction_0; }
		
		//(graphs+=DotGraph)*
		public Assignment getGraphsAssignment_1() { return cGraphsAssignment_1; }
		
		//DotGraph
		public RuleCall getGraphsDotGraphParserRuleCall_1_0() { return cGraphsDotGraphParserRuleCall_1_0; }
	}
	public class StmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydot.MyDot.Stmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cEdgeStmtNodeParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cNodeStmtParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cAttrStmtParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cAttributeParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cSubgraphOrEdgeStmtSubgraphParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Stmt returns Stmt:
		//     (EdgeStmtNode |  NodeStmt | AttrStmt | Attribute | SubgraphOrEdgeStmtSubgraph ) (';')? ;
		@Override public ParserRule getRule() { return rule; }
		
		//(EdgeStmtNode |  NodeStmt | AttrStmt | Attribute | SubgraphOrEdgeStmtSubgraph ) (';')?
		public Group getGroup() { return cGroup; }
		
		//(EdgeStmtNode |  NodeStmt | AttrStmt | Attribute | SubgraphOrEdgeStmtSubgraph )
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//EdgeStmtNode
		public RuleCall getEdgeStmtNodeParserRuleCall_0_0() { return cEdgeStmtNodeParserRuleCall_0_0; }
		
		//NodeStmt
		public RuleCall getNodeStmtParserRuleCall_0_1() { return cNodeStmtParserRuleCall_0_1; }
		
		//AttrStmt
		public RuleCall getAttrStmtParserRuleCall_0_2() { return cAttrStmtParserRuleCall_0_2; }
		
		//Attribute
		public RuleCall getAttributeParserRuleCall_0_3() { return cAttributeParserRuleCall_0_3; }
		
		//SubgraphOrEdgeStmtSubgraph
		public RuleCall getSubgraphOrEdgeStmtSubgraphParserRuleCall_0_4() { return cSubgraphOrEdgeStmtSubgraphParserRuleCall_0_4; }
		
		//(';')?
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class EdgeRhsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydot.MyDot.EdgeRhs");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEdgeRhsNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEdgeRhsSubgraphParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EdgeRhs returns EdgeRhs:
		//     EdgeRhsNode | EdgeRhsSubgraph;
		@Override public ParserRule getRule() { return rule; }
		
		//EdgeRhsNode | EdgeRhsSubgraph
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EdgeRhsNode
		public RuleCall getEdgeRhsNodeParserRuleCall_0() { return cEdgeRhsNodeParserRuleCall_0; }
		
		//EdgeRhsSubgraph
		public RuleCall getEdgeRhsSubgraphParserRuleCall_1() { return cEdgeRhsSubgraphParserRuleCall_1; }
	}
	public class DotGraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydot.MyDot.DotGraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDotGraphAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStrictAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cStrictStrictKeyword_1_0 = (Keyword)cStrictAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeGraphTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStmtsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStmtsStmtParserRuleCall_5_0 = (RuleCall)cStmtsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DotGraph returns DotGraph:
		//    {DotGraph}
		//    (strict?='strict')?
		//         type=GraphType
		//    (name=ID)?
		//    '{'
		//          (stmts+=Stmt)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{DotGraph}
		//(strict?='strict')?
		//     type=GraphType
		//(name=ID)?
		//'{'
		//      (stmts+=Stmt)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{DotGraph}
		public Action getDotGraphAction_0() { return cDotGraphAction_0; }
		
		//(strict?='strict')?
		public Assignment getStrictAssignment_1() { return cStrictAssignment_1; }
		
		//'strict'
		public Keyword getStrictStrictKeyword_1_0() { return cStrictStrictKeyword_1_0; }
		
		//type=GraphType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//GraphType
		public RuleCall getTypeGraphTypeEnumRuleCall_2_0() { return cTypeGraphTypeEnumRuleCall_2_0; }
		
		//(name=ID)?
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(stmts+=Stmt)*
		public Assignment getStmtsAssignment_5() { return cStmtsAssignment_5; }
		
		//Stmt
		public RuleCall getStmtsStmtParserRuleCall_5_0() { return cStmtsStmtParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydot.MyDot.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EdgeStmtNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydot.MyDot.EdgeStmtNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEdgeStmtNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNodeNodeIdParserRuleCall_1_0 = (RuleCall)cNodeAssignment_1.eContents().get(0);
		private final Assignment cEdgeRHSAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEdgeRHSEdgeRhsParserRuleCall_2_0 = (RuleCall)cEdgeRHSAssignment_2.eContents().get(0);
		private final Assignment cAttrListsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttrListsAttrListParserRuleCall_3_0 = (RuleCall)cAttrListsAssignment_3.eContents().get(0);
		
		//EdgeStmtNode returns EdgeStmtNode:
		//    {EdgeStmtNode}
		//         node=NodeId
		//          (edgeRHS+=EdgeRhs)+
		//          (attrLists+=AttrList)*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{EdgeStmtNode}
		//     node=NodeId
		//      (edgeRHS+=EdgeRhs)+
		//      (attrLists+=AttrList)*
		public Group getGroup() { return cGroup; }
		
		//{EdgeStmtNode}
		public Action getEdgeStmtNodeAction_0() { return cEdgeStmtNodeAction_0; }
		
		//node=NodeId
		public Assignment getNodeAssignment_1() { return cNodeAssignment_1; }
		
		//NodeId
		public RuleCall getNodeNodeIdParserRuleCall_1_0() { return cNodeNodeIdParserRuleCall_1_0; }
		
		//(edgeRHS+=EdgeRhs)+
		public Assignment getEdgeRHSAssignment_2() { return cEdgeRHSAssignment_2; }
		
		//EdgeRhs
		public RuleCall getEdgeRHSEdgeRhsParserRuleCall_2_0() { return cEdgeRHSEdgeRhsParserRuleCall_2_0; }
		
		//(attrLists+=AttrList)*
		public Assignment getAttrListsAssignment_3() { return cAttrListsAssignment_3; }
		
		//AttrList
		public RuleCall getAttrListsAttrListParserRuleCall_3_0() { return cAttrListsAttrListParserRuleCall_3_0; }
	}
	public class EdgeStmtSubgraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydot.MyDot.EdgeStmtSubgraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEdgeStmtSubgraphAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSubgraphAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubgraphSubgraphParserRuleCall_1_0 = (RuleCall)cSubgraphAssignment_1.eContents().get(0);
		private final Assignment cEdgeRHSAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEdgeRHSEdgeRhsParserRuleCall_2_0 = (RuleCall)cEdgeRHSAssignment_2.eContents().get(0);
		private final Assignment cAttrListsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttrListsAttrListParserRuleCall_3_0 = (RuleCall)cAttrListsAssignment_3.eContents().get(0);
		
		//EdgeStmtSubgraph returns EdgeStmtSubgraph:
		//    {EdgeStmtSubgraph}
		//         subgraph=Subgraph
		//          (edgeRHS+=EdgeRhs)+
		//          (attrLists+=AttrList)*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{EdgeStmtSubgraph}
		//     subgraph=Subgraph
		//      (edgeRHS+=EdgeRhs)+
		//      (attrLists+=AttrList)*
		public Group getGroup() { return cGroup; }
		
		//{EdgeStmtSubgraph}
		public Action getEdgeStmtSubgraphAction_0() { return cEdgeStmtSubgraphAction_0; }
		
		//subgraph=Subgraph
		public Assignment getSubgraphAssignment_1() { return cSubgraphAssignment_1; }
		
		//Subgraph
		public RuleCall getSubgraphSubgraphParserRuleCall_1_0() { return cSubgraphSubgraphParserRuleCall_1_0; }
		
		//(edgeRHS+=EdgeRhs)+
		public Assignment getEdgeRHSAssignment_2() { return cEdgeRHSAssignment_2; }
		
		//EdgeRhs
		public RuleCall getEdgeRHSEdgeRhsParserRuleCall_2_0() { return cEdgeRHSEdgeRhsParserRuleCall_2_0; }
		
		//(attrLists+=AttrList)*
		public Assignment getAttrListsAssignment_3() { return cAttrListsAssignment_3; }
		
		//AttrList
		public RuleCall getAttrListsAttrListParserRuleCall_3_0() { return cAttrListsAttrListParserRuleCall_3_0; }
	}
	public class NodeStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydot.MyDot.NodeStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNodeStmtAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNodeNodeIdParserRuleCall_1_0 = (RuleCall)cNodeAssignment_1.eContents().get(0);
		private final Assignment cAttrListsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttrListsAttrListParserRuleCall_2_0 = (RuleCall)cAttrListsAssignment_2.eContents().get(0);
		
		//NodeStmt returns NodeStmt:
		//    {NodeStmt}
		//         node=NodeId
		//          (attrLists+=AttrList)*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{NodeStmt}
		//     node=NodeId
		//      (attrLists+=AttrList)*
		public Group getGroup() { return cGroup; }
		
		//{NodeStmt}
		public Action getNodeStmtAction_0() { return cNodeStmtAction_0; }
		
		//node=NodeId
		public Assignment getNodeAssignment_1() { return cNodeAssignment_1; }
		
		//NodeId
		public RuleCall getNodeNodeIdParserRuleCall_1_0() { return cNodeNodeIdParserRuleCall_1_0; }
		
		//(attrLists+=AttrList)*
		public Assignment getAttrListsAssignment_2() { return cAttrListsAssignment_2; }
		
		//AttrList
		public RuleCall getAttrListsAttrListParserRuleCall_2_0() { return cAttrListsAttrListParserRuleCall_2_0; }
	}
	public class AttrStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydot.MyDot.AttrStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttrStmtAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeAttributeTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cAttrListsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttrListsAttrListParserRuleCall_2_0 = (RuleCall)cAttrListsAssignment_2.eContents().get(0);
		
		//AttrStmt returns AttrStmt:
		//    {AttrStmt}
		//         type=AttributeType
		//          (attrLists+=AttrList)+
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{AttrStmt}
		//     type=AttributeType
		//      (attrLists+=AttrList)+
		public Group getGroup() { return cGroup; }
		
		//{AttrStmt}
		public Action getAttrStmtAction_0() { return cAttrStmtAction_0; }
		
		//type=AttributeType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//AttributeType
		public RuleCall getTypeAttributeTypeEnumRuleCall_1_0() { return cTypeAttributeTypeEnumRuleCall_1_0; }
		
		//(attrLists+=AttrList)+
		public Assignment getAttrListsAssignment_2() { return cAttrListsAssignment_2; }
		
		//AttrList
		public RuleCall getAttrListsAttrListParserRuleCall_2_0() { return cAttrListsAttrListParserRuleCall_2_0; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydot.MyDot.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueEStringParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Attribute returns Attribute:
		//    {Attribute}
		//    name=EString
		//        '=' value=EString
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Attribute}
		//name=EString
		//    '=' value=EString
		public Group getGroup() { return cGroup; }
		
		//{Attribute}
		public Action getAttributeAction_0() { return cAttributeAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=EString
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_3_0() { return cValueEStringParserRuleCall_3_0; }
	}
	public class SubgraphOrEdgeStmtSubgraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydot.MyDot.SubgraphOrEdgeStmtSubgraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSubgraphParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEdgeStmtSubgraphSubgraphAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cEdgeRHSAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEdgeRHSEdgeRhsParserRuleCall_1_1_0 = (RuleCall)cEdgeRHSAssignment_1_1.eContents().get(0);
		private final Assignment cAttrListsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cAttrListsAttrListParserRuleCall_1_2_0 = (RuleCall)cAttrListsAssignment_1_2.eContents().get(0);
		
		//SubgraphOrEdgeStmtSubgraph returns SubgraphOrEdgeStmtSubgraph:
		//    Subgraph ({EdgeStmtSubgraph.subgraph=current} (edgeRHS+=EdgeRhs)+ (attrLists+=AttrList)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Subgraph ({EdgeStmtSubgraph.subgraph=current} (edgeRHS+=EdgeRhs)+ (attrLists+=AttrList)*)?
		public Group getGroup() { return cGroup; }
		
		//Subgraph
		public RuleCall getSubgraphParserRuleCall_0() { return cSubgraphParserRuleCall_0; }
		
		//({EdgeStmtSubgraph.subgraph=current} (edgeRHS+=EdgeRhs)+ (attrLists+=AttrList)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{EdgeStmtSubgraph.subgraph=current}
		public Action getEdgeStmtSubgraphSubgraphAction_1_0() { return cEdgeStmtSubgraphSubgraphAction_1_0; }
		
		//(edgeRHS+=EdgeRhs)+
		public Assignment getEdgeRHSAssignment_1_1() { return cEdgeRHSAssignment_1_1; }
		
		//EdgeRhs
		public RuleCall getEdgeRHSEdgeRhsParserRuleCall_1_1_0() { return cEdgeRHSEdgeRhsParserRuleCall_1_1_0; }
		
		//(attrLists+=AttrList)*
		public Assignment getAttrListsAssignment_1_2() { return cAttrListsAssignment_1_2; }
		
		//AttrList
		public RuleCall getAttrListsAttrListParserRuleCall_1_2_0() { return cAttrListsAttrListParserRuleCall_1_2_0; }
	}
	public class SubgraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydot.MyDot.Subgraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSubgraphAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSubgraphKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStmtsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStmtsStmtParserRuleCall_3_0 = (RuleCall)cStmtsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Subgraph returns Subgraph:
		//    {Subgraph}
		//    ('subgraph' (name=ID)?)?
		//    '{'
		//          (stmts+=Stmt)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Subgraph}
		//('subgraph' (name=ID)?)?
		//'{'
		//      (stmts+=Stmt)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Subgraph}
		public Action getSubgraphAction_0() { return cSubgraphAction_0; }
		
		//('subgraph' (name=ID)?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'subgraph'
		public Keyword getSubgraphKeyword_1_0() { return cSubgraphKeyword_1_0; }
		
		//(name=ID)?
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(stmts+=Stmt)*
		public Assignment getStmtsAssignment_3() { return cStmtsAssignment_3; }
		
		//Stmt
		public RuleCall getStmtsStmtParserRuleCall_3_0() { return cStmtsStmtParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class NodeIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydot.MyDot.NodeId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNodeIdAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPortAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPortPortParserRuleCall_2_0 = (RuleCall)cPortAssignment_2.eContents().get(0);
		
		//NodeId returns NodeId:
		//    {NodeId}
		//    name=ID
		//        ( port=Port)?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{NodeId}
		//name=ID
		//    ( port=Port)?
		public Group getGroup() { return cGroup; }
		
		//{NodeId}
		public Action getNodeIdAction_0() { return cNodeIdAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//( port=Port)?
		public Assignment getPortAssignment_2() { return cPortAssignment_2; }
		
		//Port
		public RuleCall getPortPortParserRuleCall_2_0() { return cPortPortParserRuleCall_2_0; }
	}
	public class AttrListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydot.MyDot.AttrList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttrListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cAttributesAttributeParserRuleCall_2_0_0 = (RuleCall)cAttributesAssignment_2_0.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cAlternatives_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1 = (Keyword)cAlternatives_2_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AttrList returns AttrList:
		//    {AttrList}
		//    '['
		//          (attributes+=Attribute (',' | ';')?)*
		//    ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{AttrList}
		//'['
		//      (attributes+=Attribute (',' | ';')?)*
		//']'
		public Group getGroup() { return cGroup; }
		
		//{AttrList}
		public Action getAttrListAction_0() { return cAttrListAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(attributes+=Attribute (',' | ';')?)*
		public Group getGroup_2() { return cGroup_2; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_2_0() { return cAttributesAssignment_2_0; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_2_0_0() { return cAttributesAttributeParserRuleCall_2_0_0; }
		
		//(',' | ';')?
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1_1() { return cSemicolonKeyword_2_1_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydot.MyDot.Port");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPortAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cCompass_ptAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cCompass_ptCOMPASS_PTTerminalRuleCall_2_0_0 = (RuleCall)cCompass_ptAssignment_2_0.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Assignment cNameAssignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_2_2_0_0 = (RuleCall)cNameAssignment_2_2_0.eContents().get(0);
		private final Keyword cColonKeyword_2_2_1 = (Keyword)cGroup_2_2.eContents().get(1);
		private final Assignment cCompass_ptAssignment_2_2_2 = (Assignment)cGroup_2_2.eContents().get(2);
		private final RuleCall cCompass_ptCOMPASS_PTTerminalRuleCall_2_2_2_0 = (RuleCall)cCompass_ptAssignment_2_2_2.eContents().get(0);
		
		//Port returns Port:
		//    {Port}
		//    ':'
		//    (=> compass_pt=COMPASS_PT |
		//        name=ID |
		//        name=ID ":" compass_pt=COMPASS_PT);
		@Override public ParserRule getRule() { return rule; }
		
		//{Port}
		//':'
		//(=> compass_pt=COMPASS_PT |
		//    name=ID |
		//    name=ID ":" compass_pt=COMPASS_PT)
		public Group getGroup() { return cGroup; }
		
		//{Port}
		public Action getPortAction_0() { return cPortAction_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//(=> compass_pt=COMPASS_PT |
		//    name=ID |
		//    name=ID ":" compass_pt=COMPASS_PT)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//=> compass_pt=COMPASS_PT
		public Assignment getCompass_ptAssignment_2_0() { return cCompass_ptAssignment_2_0; }
		
		//COMPASS_PT
		public RuleCall getCompass_ptCOMPASS_PTTerminalRuleCall_2_0_0() { return cCompass_ptCOMPASS_PTTerminalRuleCall_2_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }
		
		//name=ID ":" compass_pt=COMPASS_PT
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//name=ID
		public Assignment getNameAssignment_2_2_0() { return cNameAssignment_2_2_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_2_0_0() { return cNameIDTerminalRuleCall_2_2_0_0; }
		
		//":"
		public Keyword getColonKeyword_2_2_1() { return cColonKeyword_2_2_1; }
		
		//compass_pt=COMPASS_PT
		public Assignment getCompass_ptAssignment_2_2_2() { return cCompass_ptAssignment_2_2_2; }
		
		//COMPASS_PT
		public RuleCall getCompass_ptCOMPASS_PTTerminalRuleCall_2_2_2_0() { return cCompass_ptCOMPASS_PTTerminalRuleCall_2_2_2_0; }
	}
	public class EdgeRhsNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydot.MyDot.EdgeRhsNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEdgeRhsNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpEdgeOpEnumRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Assignment cNodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNodeNodeIdParserRuleCall_2_0 = (RuleCall)cNodeAssignment_2.eContents().get(0);
		
		//EdgeRhsNode returns EdgeRhsNode:
		//    {EdgeRhsNode}
		//         op=EdgeOp
		//         node=NodeId
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{EdgeRhsNode}
		//     op=EdgeOp
		//     node=NodeId
		public Group getGroup() { return cGroup; }
		
		//{EdgeRhsNode}
		public Action getEdgeRhsNodeAction_0() { return cEdgeRhsNodeAction_0; }
		
		//op=EdgeOp
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//EdgeOp
		public RuleCall getOpEdgeOpEnumRuleCall_1_0() { return cOpEdgeOpEnumRuleCall_1_0; }
		
		//node=NodeId
		public Assignment getNodeAssignment_2() { return cNodeAssignment_2; }
		
		//NodeId
		public RuleCall getNodeNodeIdParserRuleCall_2_0() { return cNodeNodeIdParserRuleCall_2_0; }
	}
	public class EdgeRhsSubgraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydot.MyDot.EdgeRhsSubgraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEdgeRhsSubgraphAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpEdgeOpEnumRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Assignment cSubgraphAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSubgraphSubgraphParserRuleCall_2_0 = (RuleCall)cSubgraphAssignment_2.eContents().get(0);
		
		//EdgeRhsSubgraph returns EdgeRhsSubgraph:
		//    {EdgeRhsSubgraph}
		//         op=EdgeOp
		//         subgraph=Subgraph
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{EdgeRhsSubgraph}
		//     op=EdgeOp
		//     subgraph=Subgraph
		public Group getGroup() { return cGroup; }
		
		//{EdgeRhsSubgraph}
		public Action getEdgeRhsSubgraphAction_0() { return cEdgeRhsSubgraphAction_0; }
		
		//op=EdgeOp
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//EdgeOp
		public RuleCall getOpEdgeOpEnumRuleCall_1_0() { return cOpEdgeOpEnumRuleCall_1_0; }
		
		//subgraph=Subgraph
		public Assignment getSubgraphAssignment_2() { return cSubgraphAssignment_2; }
		
		//Subgraph
		public RuleCall getSubgraphSubgraphParserRuleCall_2_0() { return cSubgraphSubgraphParserRuleCall_2_0; }
	}
	
	public class GraphTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydot.MyDot.GraphType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGraphEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGraphGraphKeyword_0_0 = (Keyword)cGraphEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDigraphEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDigraphDigraphKeyword_1_0 = (Keyword)cDigraphEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum GraphType returns GraphType:
		//                graph = 'graph' | digraph = 'digraph';
		public EnumRule getRule() { return rule; }
		
		//graph = 'graph' | digraph = 'digraph'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//graph = 'graph'
		public EnumLiteralDeclaration getGraphEnumLiteralDeclaration_0() { return cGraphEnumLiteralDeclaration_0; }
		
		//'graph'
		public Keyword getGraphGraphKeyword_0_0() { return cGraphGraphKeyword_0_0; }
		
		//digraph = 'digraph'
		public EnumLiteralDeclaration getDigraphEnumLiteralDeclaration_1() { return cDigraphEnumLiteralDeclaration_1; }
		
		//'digraph'
		public Keyword getDigraphDigraphKeyword_1_0() { return cDigraphDigraphKeyword_1_0; }
	}
	public class EdgeOpElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydot.MyDot.EdgeOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDirectedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDirectedHyphenMinusGreaterThanSignKeyword_0_0 = (Keyword)cDirectedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUndirectedEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUndirectedHyphenMinusHyphenMinusKeyword_1_0 = (Keyword)cUndirectedEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EdgeOp returns EdgeOp:
		//                directed = '->' | undirected = '--';
		public EnumRule getRule() { return rule; }
		
		//directed = '->' | undirected = '--'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//directed = '->'
		public EnumLiteralDeclaration getDirectedEnumLiteralDeclaration_0() { return cDirectedEnumLiteralDeclaration_0; }
		
		//'->'
		public Keyword getDirectedHyphenMinusGreaterThanSignKeyword_0_0() { return cDirectedHyphenMinusGreaterThanSignKeyword_0_0; }
		
		//undirected = '--'
		public EnumLiteralDeclaration getUndirectedEnumLiteralDeclaration_1() { return cUndirectedEnumLiteralDeclaration_1; }
		
		//'--'
		public Keyword getUndirectedHyphenMinusHyphenMinusKeyword_1_0() { return cUndirectedHyphenMinusHyphenMinusKeyword_1_0; }
	}
	public class AttributeTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydot.MyDot.AttributeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGraphEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGraphGraphKeyword_0_0 = (Keyword)cGraphEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNodeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNodeNodeKeyword_1_0 = (Keyword)cNodeEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEdgeEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEdgeEdgeKeyword_2_0 = (Keyword)cEdgeEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum AttributeType returns AttributeType:
		//                graph = 'graph' | node = 'node' | edge = 'edge';
		public EnumRule getRule() { return rule; }
		
		//graph = 'graph' | node = 'node' | edge = 'edge'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//graph = 'graph'
		public EnumLiteralDeclaration getGraphEnumLiteralDeclaration_0() { return cGraphEnumLiteralDeclaration_0; }
		
		//'graph'
		public Keyword getGraphGraphKeyword_0_0() { return cGraphGraphKeyword_0_0; }
		
		//node = 'node'
		public EnumLiteralDeclaration getNodeEnumLiteralDeclaration_1() { return cNodeEnumLiteralDeclaration_1; }
		
		//'node'
		public Keyword getNodeNodeKeyword_1_0() { return cNodeNodeKeyword_1_0; }
		
		//edge = 'edge'
		public EnumLiteralDeclaration getEdgeEnumLiteralDeclaration_2() { return cEdgeEnumLiteralDeclaration_2; }
		
		//'edge'
		public Keyword getEdgeEdgeKeyword_2_0() { return cEdgeEdgeKeyword_2_0; }
	}
	
	private final DotAstElements pDotAst;
	private final StmtElements pStmt;
	private final EdgeRhsElements pEdgeRhs;
	private final DotGraphElements pDotGraph;
	private final GraphTypeElements eGraphType;
	private final EStringElements pEString;
	private final EdgeStmtNodeElements pEdgeStmtNode;
	private final EdgeStmtSubgraphElements pEdgeStmtSubgraph;
	private final NodeStmtElements pNodeStmt;
	private final AttrStmtElements pAttrStmt;
	private final AttributeElements pAttribute;
	private final SubgraphOrEdgeStmtSubgraphElements pSubgraphOrEdgeStmtSubgraph;
	private final SubgraphElements pSubgraph;
	private final NodeIdElements pNodeId;
	private final AttrListElements pAttrList;
	private final PortElements pPort;
	private final EdgeOpElements eEdgeOp;
	private final EdgeRhsNodeElements pEdgeRhsNode;
	private final EdgeRhsSubgraphElements pEdgeRhsSubgraph;
	private final AttributeTypeElements eAttributeType;
	private final TerminalRule tCOMPASS_PT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDotGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDotAst = new DotAstElements();
		this.pStmt = new StmtElements();
		this.pEdgeRhs = new EdgeRhsElements();
		this.pDotGraph = new DotGraphElements();
		this.eGraphType = new GraphTypeElements();
		this.pEString = new EStringElements();
		this.pEdgeStmtNode = new EdgeStmtNodeElements();
		this.pEdgeStmtSubgraph = new EdgeStmtSubgraphElements();
		this.pNodeStmt = new NodeStmtElements();
		this.pAttrStmt = new AttrStmtElements();
		this.pAttribute = new AttributeElements();
		this.pSubgraphOrEdgeStmtSubgraph = new SubgraphOrEdgeStmtSubgraphElements();
		this.pSubgraph = new SubgraphElements();
		this.pNodeId = new NodeIdElements();
		this.pAttrList = new AttrListElements();
		this.pPort = new PortElements();
		this.eEdgeOp = new EdgeOpElements();
		this.pEdgeRhsNode = new EdgeRhsNodeElements();
		this.pEdgeRhsSubgraph = new EdgeRhsSubgraphElements();
		this.eAttributeType = new AttributeTypeElements();
		this.tCOMPASS_PT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydot.MyDot.COMPASS_PT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydot.MyDot".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DotAst returns DotAst:
	//    {DotAst}
	//          (graphs+=DotGraph)*
	//    ;
	public DotAstElements getDotAstAccess() {
		return pDotAst;
	}
	
	public ParserRule getDotAstRule() {
		return getDotAstAccess().getRule();
	}
	
	//Stmt returns Stmt:
	//     (EdgeStmtNode |  NodeStmt | AttrStmt | Attribute | SubgraphOrEdgeStmtSubgraph ) (';')? ;
	public StmtElements getStmtAccess() {
		return pStmt;
	}
	
	public ParserRule getStmtRule() {
		return getStmtAccess().getRule();
	}
	
	//EdgeRhs returns EdgeRhs:
	//     EdgeRhsNode | EdgeRhsSubgraph;
	public EdgeRhsElements getEdgeRhsAccess() {
		return pEdgeRhs;
	}
	
	public ParserRule getEdgeRhsRule() {
		return getEdgeRhsAccess().getRule();
	}
	
	//DotGraph returns DotGraph:
	//    {DotGraph}
	//    (strict?='strict')?
	//         type=GraphType
	//    (name=ID)?
	//    '{'
	//          (stmts+=Stmt)*
	//    '}';
	public DotGraphElements getDotGraphAccess() {
		return pDotGraph;
	}
	
	public ParserRule getDotGraphRule() {
		return getDotGraphAccess().getRule();
	}
	
	//enum GraphType returns GraphType:
	//                graph = 'graph' | digraph = 'digraph';
	public GraphTypeElements getGraphTypeAccess() {
		return eGraphType;
	}
	
	public EnumRule getGraphTypeRule() {
		return getGraphTypeAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EdgeStmtNode returns EdgeStmtNode:
	//    {EdgeStmtNode}
	//         node=NodeId
	//          (edgeRHS+=EdgeRhs)+
	//          (attrLists+=AttrList)*
	//    ;
	public EdgeStmtNodeElements getEdgeStmtNodeAccess() {
		return pEdgeStmtNode;
	}
	
	public ParserRule getEdgeStmtNodeRule() {
		return getEdgeStmtNodeAccess().getRule();
	}
	
	//EdgeStmtSubgraph returns EdgeStmtSubgraph:
	//    {EdgeStmtSubgraph}
	//         subgraph=Subgraph
	//          (edgeRHS+=EdgeRhs)+
	//          (attrLists+=AttrList)*
	//    ;
	public EdgeStmtSubgraphElements getEdgeStmtSubgraphAccess() {
		return pEdgeStmtSubgraph;
	}
	
	public ParserRule getEdgeStmtSubgraphRule() {
		return getEdgeStmtSubgraphAccess().getRule();
	}
	
	//NodeStmt returns NodeStmt:
	//    {NodeStmt}
	//         node=NodeId
	//          (attrLists+=AttrList)*
	//    ;
	public NodeStmtElements getNodeStmtAccess() {
		return pNodeStmt;
	}
	
	public ParserRule getNodeStmtRule() {
		return getNodeStmtAccess().getRule();
	}
	
	//AttrStmt returns AttrStmt:
	//    {AttrStmt}
	//         type=AttributeType
	//          (attrLists+=AttrList)+
	//    ;
	public AttrStmtElements getAttrStmtAccess() {
		return pAttrStmt;
	}
	
	public ParserRule getAttrStmtRule() {
		return getAttrStmtAccess().getRule();
	}
	
	//Attribute returns Attribute:
	//    {Attribute}
	//    name=EString
	//        '=' value=EString
	//    ;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//SubgraphOrEdgeStmtSubgraph returns SubgraphOrEdgeStmtSubgraph:
	//    Subgraph ({EdgeStmtSubgraph.subgraph=current} (edgeRHS+=EdgeRhs)+ (attrLists+=AttrList)*)?;
	public SubgraphOrEdgeStmtSubgraphElements getSubgraphOrEdgeStmtSubgraphAccess() {
		return pSubgraphOrEdgeStmtSubgraph;
	}
	
	public ParserRule getSubgraphOrEdgeStmtSubgraphRule() {
		return getSubgraphOrEdgeStmtSubgraphAccess().getRule();
	}
	
	//Subgraph returns Subgraph:
	//    {Subgraph}
	//    ('subgraph' (name=ID)?)?
	//    '{'
	//          (stmts+=Stmt)*
	//    '}';
	public SubgraphElements getSubgraphAccess() {
		return pSubgraph;
	}
	
	public ParserRule getSubgraphRule() {
		return getSubgraphAccess().getRule();
	}
	
	//NodeId returns NodeId:
	//    {NodeId}
	//    name=ID
	//        ( port=Port)?
	//    ;
	public NodeIdElements getNodeIdAccess() {
		return pNodeId;
	}
	
	public ParserRule getNodeIdRule() {
		return getNodeIdAccess().getRule();
	}
	
	//AttrList returns AttrList:
	//    {AttrList}
	//    '['
	//          (attributes+=Attribute (',' | ';')?)*
	//    ']';
	public AttrListElements getAttrListAccess() {
		return pAttrList;
	}
	
	public ParserRule getAttrListRule() {
		return getAttrListAccess().getRule();
	}
	
	//Port returns Port:
	//    {Port}
	//    ':'
	//    (=> compass_pt=COMPASS_PT |
	//        name=ID |
	//        name=ID ":" compass_pt=COMPASS_PT);
	public PortElements getPortAccess() {
		return pPort;
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}
	
	//enum EdgeOp returns EdgeOp:
	//                directed = '->' | undirected = '--';
	public EdgeOpElements getEdgeOpAccess() {
		return eEdgeOp;
	}
	
	public EnumRule getEdgeOpRule() {
		return getEdgeOpAccess().getRule();
	}
	
	//EdgeRhsNode returns EdgeRhsNode:
	//    {EdgeRhsNode}
	//         op=EdgeOp
	//         node=NodeId
	//    ;
	public EdgeRhsNodeElements getEdgeRhsNodeAccess() {
		return pEdgeRhsNode;
	}
	
	public ParserRule getEdgeRhsNodeRule() {
		return getEdgeRhsNodeAccess().getRule();
	}
	
	//EdgeRhsSubgraph returns EdgeRhsSubgraph:
	//    {EdgeRhsSubgraph}
	//         op=EdgeOp
	//         subgraph=Subgraph
	//    ;
	public EdgeRhsSubgraphElements getEdgeRhsSubgraphAccess() {
		return pEdgeRhsSubgraph;
	}
	
	public ParserRule getEdgeRhsSubgraphRule() {
		return getEdgeRhsSubgraphAccess().getRule();
	}
	
	//enum AttributeType returns AttributeType:
	//                graph = 'graph' | node = 'node' | edge = 'edge';
	public AttributeTypeElements getAttributeTypeAccess() {
		return eAttributeType;
	}
	
	public EnumRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}
	
	//terminal COMPASS_PT:
	//    'n' | 'ne' | 'e' | 'se' | 's' | 'sw' | 'w' | 'nw' | 'c' | '_';
	public TerminalRule getCOMPASS_PTRule() {
		return tCOMPASS_PT;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
