/**
 */
package dot.provider;

import dot.util.DotAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DotItemProviderAdapterFactory extends DotAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DotItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link dot.DotAst} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DotAstItemProvider dotAstItemProvider;

	/**
	 * This creates an adapter for a {@link dot.DotAst}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDotAstAdapter() {
		if (dotAstItemProvider == null) {
			dotAstItemProvider = new DotAstItemProvider(this);
		}

		return dotAstItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dot.DotGraph} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DotGraphItemProvider dotGraphItemProvider;

	/**
	 * This creates an adapter for a {@link dot.DotGraph}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDotGraphAdapter() {
		if (dotGraphItemProvider == null) {
			dotGraphItemProvider = new DotGraphItemProvider(this);
		}

		return dotGraphItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dot.Stmt} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StmtItemProvider stmtItemProvider;

	/**
	 * This creates an adapter for a {@link dot.Stmt}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStmtAdapter() {
		if (stmtItemProvider == null) {
			stmtItemProvider = new StmtItemProvider(this);
		}

		return stmtItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dot.EdgeStmtNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EdgeStmtNodeItemProvider edgeStmtNodeItemProvider;

	/**
	 * This creates an adapter for a {@link dot.EdgeStmtNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEdgeStmtNodeAdapter() {
		if (edgeStmtNodeItemProvider == null) {
			edgeStmtNodeItemProvider = new EdgeStmtNodeItemProvider(this);
		}

		return edgeStmtNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dot.EdgeStmtSubgraph} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EdgeStmtSubgraphItemProvider edgeStmtSubgraphItemProvider;

	/**
	 * This creates an adapter for a {@link dot.EdgeStmtSubgraph}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEdgeStmtSubgraphAdapter() {
		if (edgeStmtSubgraphItemProvider == null) {
			edgeStmtSubgraphItemProvider = new EdgeStmtSubgraphItemProvider(this);
		}

		return edgeStmtSubgraphItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dot.NodeStmt} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeStmtItemProvider nodeStmtItemProvider;

	/**
	 * This creates an adapter for a {@link dot.NodeStmt}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeStmtAdapter() {
		if (nodeStmtItemProvider == null) {
			nodeStmtItemProvider = new NodeStmtItemProvider(this);
		}

		return nodeStmtItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dot.AttrStmt} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttrStmtItemProvider attrStmtItemProvider;

	/**
	 * This creates an adapter for a {@link dot.AttrStmt}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttrStmtAdapter() {
		if (attrStmtItemProvider == null) {
			attrStmtItemProvider = new AttrStmtItemProvider(this);
		}

		return attrStmtItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dot.AttrList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttrListItemProvider attrListItemProvider;

	/**
	 * This creates an adapter for a {@link dot.AttrList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttrListAdapter() {
		if (attrListItemProvider == null) {
			attrListItemProvider = new AttrListItemProvider(this);
		}

		return attrListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dot.Attribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeItemProvider attributeItemProvider;

	/**
	 * This creates an adapter for a {@link dot.Attribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeAdapter() {
		if (attributeItemProvider == null) {
			attributeItemProvider = new AttributeItemProvider(this);
		}

		return attributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dot.SubgraphOrEdgeStmtSubgraph} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubgraphOrEdgeStmtSubgraphItemProvider subgraphOrEdgeStmtSubgraphItemProvider;

	/**
	 * This creates an adapter for a {@link dot.SubgraphOrEdgeStmtSubgraph}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubgraphOrEdgeStmtSubgraphAdapter() {
		if (subgraphOrEdgeStmtSubgraphItemProvider == null) {
			subgraphOrEdgeStmtSubgraphItemProvider = new SubgraphOrEdgeStmtSubgraphItemProvider(this);
		}

		return subgraphOrEdgeStmtSubgraphItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dot.Subgraph} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubgraphItemProvider subgraphItemProvider;

	/**
	 * This creates an adapter for a {@link dot.Subgraph}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubgraphAdapter() {
		if (subgraphItemProvider == null) {
			subgraphItemProvider = new SubgraphItemProvider(this);
		}

		return subgraphItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dot.Port} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortItemProvider portItemProvider;

	/**
	 * This creates an adapter for a {@link dot.Port}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortAdapter() {
		if (portItemProvider == null) {
			portItemProvider = new PortItemProvider(this);
		}

		return portItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dot.EdgeRhs} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EdgeRhsItemProvider edgeRhsItemProvider;

	/**
	 * This creates an adapter for a {@link dot.EdgeRhs}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEdgeRhsAdapter() {
		if (edgeRhsItemProvider == null) {
			edgeRhsItemProvider = new EdgeRhsItemProvider(this);
		}

		return edgeRhsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dot.EdgeRhsNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EdgeRhsNodeItemProvider edgeRhsNodeItemProvider;

	/**
	 * This creates an adapter for a {@link dot.EdgeRhsNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEdgeRhsNodeAdapter() {
		if (edgeRhsNodeItemProvider == null) {
			edgeRhsNodeItemProvider = new EdgeRhsNodeItemProvider(this);
		}

		return edgeRhsNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dot.EdgeRhsSubgraph} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EdgeRhsSubgraphItemProvider edgeRhsSubgraphItemProvider;

	/**
	 * This creates an adapter for a {@link dot.EdgeRhsSubgraph}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEdgeRhsSubgraphAdapter() {
		if (edgeRhsSubgraphItemProvider == null) {
			edgeRhsSubgraphItemProvider = new EdgeRhsSubgraphItemProvider(this);
		}

		return edgeRhsSubgraphItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dot.NodeId} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeIdItemProvider nodeIdItemProvider;

	/**
	 * This creates an adapter for a {@link dot.NodeId}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeIdAdapter() {
		if (nodeIdItemProvider == null) {
			nodeIdItemProvider = new NodeIdItemProvider(this);
		}

		return nodeIdItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (dotAstItemProvider != null) dotAstItemProvider.dispose();
		if (dotGraphItemProvider != null) dotGraphItemProvider.dispose();
		if (stmtItemProvider != null) stmtItemProvider.dispose();
		if (edgeStmtNodeItemProvider != null) edgeStmtNodeItemProvider.dispose();
		if (edgeStmtSubgraphItemProvider != null) edgeStmtSubgraphItemProvider.dispose();
		if (nodeStmtItemProvider != null) nodeStmtItemProvider.dispose();
		if (attrStmtItemProvider != null) attrStmtItemProvider.dispose();
		if (attrListItemProvider != null) attrListItemProvider.dispose();
		if (attributeItemProvider != null) attributeItemProvider.dispose();
		if (subgraphOrEdgeStmtSubgraphItemProvider != null) subgraphOrEdgeStmtSubgraphItemProvider.dispose();
		if (subgraphItemProvider != null) subgraphItemProvider.dispose();
		if (portItemProvider != null) portItemProvider.dispose();
		if (edgeRhsItemProvider != null) edgeRhsItemProvider.dispose();
		if (edgeRhsNodeItemProvider != null) edgeRhsNodeItemProvider.dispose();
		if (edgeRhsSubgraphItemProvider != null) edgeRhsSubgraphItemProvider.dispose();
		if (nodeIdItemProvider != null) nodeIdItemProvider.dispose();
	}

}
