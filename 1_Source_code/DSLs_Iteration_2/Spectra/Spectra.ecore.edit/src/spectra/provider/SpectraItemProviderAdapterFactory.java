/**
 */
package spectra.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import spectra.util.SpectraAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SpectraItemProviderAdapterFactory extends SpectraAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SpectraItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.Model} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelItemProvider modelItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.Model}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelAdapter() {
		if (modelItemProvider == null) {
			modelItemProvider = new ModelItemProvider(this);
		}

		return modelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.Import} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImportItemProvider importItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.Import}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImportAdapter() {
		if (importItemProvider == null) {
			importItemProvider = new ImportItemProvider(this);
		}

		return importItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.Decl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeclItemProvider declItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.Decl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeclAdapter() {
		if (declItemProvider == null) {
			declItemProvider = new DeclItemProvider(this);
		}

		return declItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.WeightDef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WeightDefItemProvider weightDefItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.WeightDef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWeightDefAdapter() {
		if (weightDefItemProvider == null) {
			weightDefItemProvider = new WeightDefItemProvider(this);
		}

		return weightDefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.Var} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VarItemProvider varItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.Var}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVarAdapter() {
		if (varItemProvider == null) {
			varItemProvider = new VarItemProvider(this);
		}

		return varItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.TypeDef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeDefItemProvider typeDefItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.TypeDef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeDefAdapter() {
		if (typeDefItemProvider == null) {
			typeDefItemProvider = new TypeDefItemProvider(this);
		}

		return typeDefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.VarDecl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VarDeclItemProvider varDeclItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.VarDecl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVarDeclAdapter() {
		if (varDeclItemProvider == null) {
			varDeclItemProvider = new VarDeclItemProvider(this);
		}

		return varDeclItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.Referrable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReferrableItemProvider referrableItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.Referrable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReferrableAdapter() {
		if (referrableItemProvider == null) {
			referrableItemProvider = new ReferrableItemProvider(this);
		}

		return referrableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.TypeConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeConstantItemProvider typeConstantItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.TypeConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeConstantAdapter() {
		if (typeConstantItemProvider == null) {
			typeConstantItemProvider = new TypeConstantItemProvider(this);
		}

		return typeConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.Define} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DefineItemProvider defineItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.Define}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDefineAdapter() {
		if (defineItemProvider == null) {
			defineItemProvider = new DefineItemProvider(this);
		}

		return defineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.DefineDecl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DefineDeclItemProvider defineDeclItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.DefineDecl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDefineDeclAdapter() {
		if (defineDeclItemProvider == null) {
			defineDeclItemProvider = new DefineDeclItemProvider(this);
		}

		return defineDeclItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.DefineArray} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DefineArrayItemProvider defineArrayItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.DefineArray}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDefineArrayAdapter() {
		if (defineArrayItemProvider == null) {
			defineArrayItemProvider = new DefineArrayItemProvider(this);
		}

		return defineArrayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.DefineRegExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DefineRegExpItemProvider defineRegExpItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.DefineRegExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDefineRegExpAdapter() {
		if (defineRegExpItemProvider == null) {
			defineRegExpItemProvider = new DefineRegExpItemProvider(this);
		}

		return defineRegExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.DefineRegExpDecl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DefineRegExpDeclItemProvider defineRegExpDeclItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.DefineRegExpDecl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDefineRegExpDeclAdapter() {
		if (defineRegExpDeclItemProvider == null) {
			defineRegExpDeclItemProvider = new DefineRegExpDeclItemProvider(this);
		}

		return defineRegExpDeclItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.PatternParamList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PatternParamListItemProvider patternParamListItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.PatternParamList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPatternParamListAdapter() {
		if (patternParamListItemProvider == null) {
			patternParamListItemProvider = new PatternParamListItemProvider(this);
		}

		return patternParamListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.PatternParam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PatternParamItemProvider patternParamItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.PatternParam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPatternParamAdapter() {
		if (patternParamItemProvider == null) {
			patternParamItemProvider = new PatternParamItemProvider(this);
		}

		return patternParamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.TypedParamList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypedParamListItemProvider typedParamListItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.TypedParamList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypedParamListAdapter() {
		if (typedParamListItemProvider == null) {
			typedParamListItemProvider = new TypedParamListItemProvider(this);
		}

		return typedParamListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.TypedParam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypedParamItemProvider typedParamItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.TypedParam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypedParamAdapter() {
		if (typedParamItemProvider == null) {
			typedParamItemProvider = new TypedParamItemProvider(this);
		}

		return typedParamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.Counter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CounterItemProvider counterItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.Counter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCounterAdapter() {
		if (counterItemProvider == null) {
			counterItemProvider = new CounterItemProvider(this);
		}

		return counterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.Monitor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MonitorItemProvider monitorItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.Monitor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMonitorAdapter() {
		if (monitorItemProvider == null) {
			monitorItemProvider = new MonitorItemProvider(this);
		}

		return monitorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.Pattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PatternItemProvider patternItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.Pattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPatternAdapter() {
		if (patternItemProvider == null) {
			patternItemProvider = new PatternItemProvider(this);
		}

		return patternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.Predicate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PredicateItemProvider predicateItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.Predicate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPredicateAdapter() {
		if (predicateItemProvider == null) {
			predicateItemProvider = new PredicateItemProvider(this);
		}

		return predicateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.VarType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VarTypeItemProvider varTypeItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.VarType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVarTypeAdapter() {
		if (varTypeItemProvider == null) {
			varTypeItemProvider = new VarTypeItemProvider(this);
		}

		return varTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.LTLGar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LTLGarItemProvider ltlGarItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.LTLGar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLTLGarAdapter() {
		if (ltlGarItemProvider == null) {
			ltlGarItemProvider = new LTLGarItemProvider(this);
		}

		return ltlGarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.LTLAsm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LTLAsmItemProvider ltlAsmItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.LTLAsm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLTLAsmAdapter() {
		if (ltlAsmItemProvider == null) {
			ltlAsmItemProvider = new LTLAsmItemProvider(this);
		}

		return ltlAsmItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.EXGar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EXGarItemProvider exGarItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.EXGar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEXGarAdapter() {
		if (exGarItemProvider == null) {
			exGarItemProvider = new EXGarItemProvider(this);
		}

		return exGarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.TemporalExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemporalExpressionItemProvider temporalExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.TemporalExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemporalExpressionAdapter() {
		if (temporalExpressionItemProvider == null) {
			temporalExpressionItemProvider = new TemporalExpressionItemProvider(this);
		}

		return temporalExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.PredicateOrPatternReferrable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PredicateOrPatternReferrableItemProvider predicateOrPatternReferrableItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.PredicateOrPatternReferrable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPredicateOrPatternReferrableAdapter() {
		if (predicateOrPatternReferrableItemProvider == null) {
			predicateOrPatternReferrableItemProvider = new PredicateOrPatternReferrableItemProvider(this);
		}

		return predicateOrPatternReferrableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.Subrange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubrangeItemProvider subrangeItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.Subrange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubrangeAdapter() {
		if (subrangeItemProvider == null) {
			subrangeItemProvider = new SubrangeItemProvider(this);
		}

		return subrangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.Trigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TriggerItemProvider triggerItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.Trigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriggerAdapter() {
		if (triggerItemProvider == null) {
			triggerItemProvider = new TriggerItemProvider(this);
		}

		return triggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.RegExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegExpItemProvider regExpItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.RegExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegExpAdapter() {
		if (regExpItemProvider == null) {
			regExpItemProvider = new RegExpItemProvider(this);
		}

		return regExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.BooleanTerm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanTermItemProvider booleanTermItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.BooleanTerm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanTermAdapter() {
		if (booleanTermItemProvider == null) {
			booleanTermItemProvider = new BooleanTermItemProvider(this);
		}

		return booleanTermItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.ValueInRange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueInRangeItemProvider valueInRangeItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.ValueInRange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueInRangeAdapter() {
		if (valueInRangeItemProvider == null) {
			valueInRangeItemProvider = new ValueInRangeItemProvider(this);
		}

		return valueInRangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.DomainVarDecl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainVarDeclItemProvider domainVarDeclItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.DomainVarDecl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainVarDeclAdapter() {
		if (domainVarDeclItemProvider == null) {
			domainVarDeclItemProvider = new DomainVarDeclItemProvider(this);
		}

		return domainVarDeclItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.SizeDefineDecl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SizeDefineDeclItemProvider sizeDefineDeclItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.SizeDefineDecl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSizeDefineDeclAdapter() {
		if (sizeDefineDeclItemProvider == null) {
			sizeDefineDeclItemProvider = new SizeDefineDeclItemProvider(this);
		}

		return sizeDefineDeclItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.TemporalInExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemporalInExprItemProvider temporalInExprItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.TemporalInExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemporalInExprAdapter() {
		if (temporalInExprItemProvider == null) {
			temporalInExprItemProvider = new TemporalInExprItemProvider(this);
		}

		return temporalInExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.TemporalImpExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemporalImpExprItemProvider temporalImpExprItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.TemporalImpExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemporalImpExprAdapter() {
		if (temporalImpExprItemProvider == null) {
			temporalImpExprItemProvider = new TemporalImpExprItemProvider(this);
		}

		return temporalImpExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.TemporalIffExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemporalIffExprItemProvider temporalIffExprItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.TemporalIffExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemporalIffExprAdapter() {
		if (temporalIffExprItemProvider == null) {
			temporalIffExprItemProvider = new TemporalIffExprItemProvider(this);
		}

		return temporalIffExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.TemporalOrExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemporalOrExprItemProvider temporalOrExprItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.TemporalOrExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemporalOrExprAdapter() {
		if (temporalOrExprItemProvider == null) {
			temporalOrExprItemProvider = new TemporalOrExprItemProvider(this);
		}

		return temporalOrExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.TemporalAndExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemporalAndExprItemProvider temporalAndExprItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.TemporalAndExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemporalAndExprAdapter() {
		if (temporalAndExprItemProvider == null) {
			temporalAndExprItemProvider = new TemporalAndExprItemProvider(this);
		}

		return temporalAndExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.TemporalRelationalExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemporalRelationalExprItemProvider temporalRelationalExprItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.TemporalRelationalExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemporalRelationalExprAdapter() {
		if (temporalRelationalExprItemProvider == null) {
			temporalRelationalExprItemProvider = new TemporalRelationalExprItemProvider(this);
		}

		return temporalRelationalExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.TemporalRemainderExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemporalRemainderExprItemProvider temporalRemainderExprItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.TemporalRemainderExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemporalRemainderExprAdapter() {
		if (temporalRemainderExprItemProvider == null) {
			temporalRemainderExprItemProvider = new TemporalRemainderExprItemProvider(this);
		}

		return temporalRemainderExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.TemporalAdditiveExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemporalAdditiveExprItemProvider temporalAdditiveExprItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.TemporalAdditiveExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemporalAdditiveExprAdapter() {
		if (temporalAdditiveExprItemProvider == null) {
			temporalAdditiveExprItemProvider = new TemporalAdditiveExprItemProvider(this);
		}

		return temporalAdditiveExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.TemporalMultiplicativeExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemporalMultiplicativeExprItemProvider temporalMultiplicativeExprItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.TemporalMultiplicativeExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemporalMultiplicativeExprAdapter() {
		if (temporalMultiplicativeExprItemProvider == null) {
			temporalMultiplicativeExprItemProvider = new TemporalMultiplicativeExprItemProvider(this);
		}

		return temporalMultiplicativeExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.TemporalBinaryExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemporalBinaryExprItemProvider temporalBinaryExprItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.TemporalBinaryExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemporalBinaryExprAdapter() {
		if (temporalBinaryExprItemProvider == null) {
			temporalBinaryExprItemProvider = new TemporalBinaryExprItemProvider(this);
		}

		return temporalBinaryExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.TemporalUnaryExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemporalUnaryExprItemProvider temporalUnaryExprItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.TemporalUnaryExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemporalUnaryExprAdapter() {
		if (temporalUnaryExprItemProvider == null) {
			temporalUnaryExprItemProvider = new TemporalUnaryExprItemProvider(this);
		}

		return temporalUnaryExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.TemporalPrimaryExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemporalPrimaryExprItemProvider temporalPrimaryExprItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.TemporalPrimaryExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemporalPrimaryExprAdapter() {
		if (temporalPrimaryExprItemProvider == null) {
			temporalPrimaryExprItemProvider = new TemporalPrimaryExprItemProvider(this);
		}

		return temporalPrimaryExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.Constant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstantItemProvider constantItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.Constant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstantAdapter() {
		if (constantItemProvider == null) {
			constantItemProvider = new ConstantItemProvider(this);
		}

		return constantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.BinaryRegExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryRegExpItemProvider binaryRegExpItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.BinaryRegExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryRegExpAdapter() {
		if (binaryRegExpItemProvider == null) {
			binaryRegExpItemProvider = new BinaryRegExpItemProvider(this);
		}

		return binaryRegExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.UnaryRegExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryRegExpItemProvider unaryRegExpItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.UnaryRegExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryRegExpAdapter() {
		if (unaryRegExpItemProvider == null) {
			unaryRegExpItemProvider = new UnaryRegExpItemProvider(this);
		}

		return unaryRegExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.CompRegExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompRegExpItemProvider compRegExpItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.CompRegExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompRegExpAdapter() {
		if (compRegExpItemProvider == null) {
			compRegExpItemProvider = new CompRegExpItemProvider(this);
		}

		return compRegExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link spectra.QuantifierExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuantifierExprItemProvider quantifierExprItemProvider;

	/**
	 * This creates an adapter for a {@link spectra.QuantifierExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuantifierExprAdapter() {
		if (quantifierExprItemProvider == null) {
			quantifierExprItemProvider = new QuantifierExprItemProvider(this);
		}

		return quantifierExprItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (modelItemProvider != null) modelItemProvider.dispose();
		if (importItemProvider != null) importItemProvider.dispose();
		if (declItemProvider != null) declItemProvider.dispose();
		if (weightDefItemProvider != null) weightDefItemProvider.dispose();
		if (varItemProvider != null) varItemProvider.dispose();
		if (typeDefItemProvider != null) typeDefItemProvider.dispose();
		if (varDeclItemProvider != null) varDeclItemProvider.dispose();
		if (referrableItemProvider != null) referrableItemProvider.dispose();
		if (typeConstantItemProvider != null) typeConstantItemProvider.dispose();
		if (defineItemProvider != null) defineItemProvider.dispose();
		if (defineDeclItemProvider != null) defineDeclItemProvider.dispose();
		if (defineArrayItemProvider != null) defineArrayItemProvider.dispose();
		if (defineRegExpItemProvider != null) defineRegExpItemProvider.dispose();
		if (defineRegExpDeclItemProvider != null) defineRegExpDeclItemProvider.dispose();
		if (patternParamListItemProvider != null) patternParamListItemProvider.dispose();
		if (patternParamItemProvider != null) patternParamItemProvider.dispose();
		if (typedParamListItemProvider != null) typedParamListItemProvider.dispose();
		if (typedParamItemProvider != null) typedParamItemProvider.dispose();
		if (counterItemProvider != null) counterItemProvider.dispose();
		if (monitorItemProvider != null) monitorItemProvider.dispose();
		if (patternItemProvider != null) patternItemProvider.dispose();
		if (predicateItemProvider != null) predicateItemProvider.dispose();
		if (varTypeItemProvider != null) varTypeItemProvider.dispose();
		if (ltlGarItemProvider != null) ltlGarItemProvider.dispose();
		if (ltlAsmItemProvider != null) ltlAsmItemProvider.dispose();
		if (exGarItemProvider != null) exGarItemProvider.dispose();
		if (temporalExpressionItemProvider != null) temporalExpressionItemProvider.dispose();
		if (predicateOrPatternReferrableItemProvider != null) predicateOrPatternReferrableItemProvider.dispose();
		if (subrangeItemProvider != null) subrangeItemProvider.dispose();
		if (triggerItemProvider != null) triggerItemProvider.dispose();
		if (regExpItemProvider != null) regExpItemProvider.dispose();
		if (booleanTermItemProvider != null) booleanTermItemProvider.dispose();
		if (valueInRangeItemProvider != null) valueInRangeItemProvider.dispose();
		if (domainVarDeclItemProvider != null) domainVarDeclItemProvider.dispose();
		if (sizeDefineDeclItemProvider != null) sizeDefineDeclItemProvider.dispose();
		if (temporalInExprItemProvider != null) temporalInExprItemProvider.dispose();
		if (temporalImpExprItemProvider != null) temporalImpExprItemProvider.dispose();
		if (temporalIffExprItemProvider != null) temporalIffExprItemProvider.dispose();
		if (temporalOrExprItemProvider != null) temporalOrExprItemProvider.dispose();
		if (temporalAndExprItemProvider != null) temporalAndExprItemProvider.dispose();
		if (temporalRelationalExprItemProvider != null) temporalRelationalExprItemProvider.dispose();
		if (temporalRemainderExprItemProvider != null) temporalRemainderExprItemProvider.dispose();
		if (temporalAdditiveExprItemProvider != null) temporalAdditiveExprItemProvider.dispose();
		if (temporalMultiplicativeExprItemProvider != null) temporalMultiplicativeExprItemProvider.dispose();
		if (temporalBinaryExprItemProvider != null) temporalBinaryExprItemProvider.dispose();
		if (temporalUnaryExprItemProvider != null) temporalUnaryExprItemProvider.dispose();
		if (temporalPrimaryExprItemProvider != null) temporalPrimaryExprItemProvider.dispose();
		if (constantItemProvider != null) constantItemProvider.dispose();
		if (binaryRegExpItemProvider != null) binaryRegExpItemProvider.dispose();
		if (unaryRegExpItemProvider != null) unaryRegExpItemProvider.dispose();
		if (compRegExpItemProvider != null) compRegExpItemProvider.dispose();
		if (quantifierExprItemProvider != null) quantifierExprItemProvider.dispose();
	}

}
