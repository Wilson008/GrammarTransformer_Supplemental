/**
 */
package ATLnoOCL.provider;

import ATLnoOCL.util.ATLnoOCLAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ATLnoOCLItemProviderAdapterFactory extends ATLnoOCLAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ATLnoOCLItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link ATLnoOCL.Library} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LibraryItemProvider libraryItemProvider;

	/**
	 * This creates an adapter for a {@link ATLnoOCL.Library}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLibraryAdapter() {
		if (libraryItemProvider == null) {
			libraryItemProvider = new LibraryItemProvider(this);
		}

		return libraryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ATLnoOCL.Query} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QueryItemProvider queryItemProvider;

	/**
	 * This creates an adapter for a {@link ATLnoOCL.Query}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQueryAdapter() {
		if (queryItemProvider == null) {
			queryItemProvider = new QueryItemProvider(this);
		}

		return queryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ATLnoOCL.Module} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModuleItemProvider moduleItemProvider;

	/**
	 * This creates an adapter for a {@link ATLnoOCL.Module}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModuleAdapter() {
		if (moduleItemProvider == null) {
			moduleItemProvider = new ModuleItemProvider(this);
		}

		return moduleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ATLnoOCL.Helper} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HelperItemProvider helperItemProvider;

	/**
	 * This creates an adapter for a {@link ATLnoOCL.Helper}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHelperAdapter() {
		if (helperItemProvider == null) {
			helperItemProvider = new HelperItemProvider(this);
		}

		return helperItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ATLnoOCL.MatchedRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MatchedRuleItemProvider matchedRuleItemProvider;

	/**
	 * This creates an adapter for a {@link ATLnoOCL.MatchedRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMatchedRuleAdapter() {
		if (matchedRuleItemProvider == null) {
			matchedRuleItemProvider = new MatchedRuleItemProvider(this);
		}

		return matchedRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ATLnoOCL.LazyMatchedRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LazyMatchedRuleItemProvider lazyMatchedRuleItemProvider;

	/**
	 * This creates an adapter for a {@link ATLnoOCL.LazyMatchedRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLazyMatchedRuleAdapter() {
		if (lazyMatchedRuleItemProvider == null) {
			lazyMatchedRuleItemProvider = new LazyMatchedRuleItemProvider(this);
		}

		return lazyMatchedRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ATLnoOCL.CalledRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalledRuleItemProvider calledRuleItemProvider;

	/**
	 * This creates an adapter for a {@link ATLnoOCL.CalledRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalledRuleAdapter() {
		if (calledRuleItemProvider == null) {
			calledRuleItemProvider = new CalledRuleItemProvider(this);
		}

		return calledRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ATLnoOCL.InPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InPatternItemProvider inPatternItemProvider;

	/**
	 * This creates an adapter for a {@link ATLnoOCL.InPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInPatternAdapter() {
		if (inPatternItemProvider == null) {
			inPatternItemProvider = new InPatternItemProvider(this);
		}

		return inPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ATLnoOCL.OutPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutPatternItemProvider outPatternItemProvider;

	/**
	 * This creates an adapter for a {@link ATLnoOCL.OutPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutPatternAdapter() {
		if (outPatternItemProvider == null) {
			outPatternItemProvider = new OutPatternItemProvider(this);
		}

		return outPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ATLnoOCL.SimpleInPatternElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleInPatternElementItemProvider simpleInPatternElementItemProvider;

	/**
	 * This creates an adapter for a {@link ATLnoOCL.SimpleInPatternElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleInPatternElementAdapter() {
		if (simpleInPatternElementItemProvider == null) {
			simpleInPatternElementItemProvider = new SimpleInPatternElementItemProvider(this);
		}

		return simpleInPatternElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ATLnoOCL.SimpleOutPatternElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleOutPatternElementItemProvider simpleOutPatternElementItemProvider;

	/**
	 * This creates an adapter for a {@link ATLnoOCL.SimpleOutPatternElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleOutPatternElementAdapter() {
		if (simpleOutPatternElementItemProvider == null) {
			simpleOutPatternElementItemProvider = new SimpleOutPatternElementItemProvider(this);
		}

		return simpleOutPatternElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ATLnoOCL.ForEachOutPatternElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForEachOutPatternElementItemProvider forEachOutPatternElementItemProvider;

	/**
	 * This creates an adapter for a {@link ATLnoOCL.ForEachOutPatternElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForEachOutPatternElementAdapter() {
		if (forEachOutPatternElementItemProvider == null) {
			forEachOutPatternElementItemProvider = new ForEachOutPatternElementItemProvider(this);
		}

		return forEachOutPatternElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ATLnoOCL.Binding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BindingItemProvider bindingItemProvider;

	/**
	 * This creates an adapter for a {@link ATLnoOCL.Binding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBindingAdapter() {
		if (bindingItemProvider == null) {
			bindingItemProvider = new BindingItemProvider(this);
		}

		return bindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ATLnoOCL.RuleVariableDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleVariableDeclarationItemProvider ruleVariableDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link ATLnoOCL.RuleVariableDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleVariableDeclarationAdapter() {
		if (ruleVariableDeclarationItemProvider == null) {
			ruleVariableDeclarationItemProvider = new RuleVariableDeclarationItemProvider(this);
		}

		return ruleVariableDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ATLnoOCL.LibraryRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LibraryRefItemProvider libraryRefItemProvider;

	/**
	 * This creates an adapter for a {@link ATLnoOCL.LibraryRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLibraryRefAdapter() {
		if (libraryRefItemProvider == null) {
			libraryRefItemProvider = new LibraryRefItemProvider(this);
		}

		return libraryRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ATLnoOCL.ActionBlock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionBlockItemProvider actionBlockItemProvider;

	/**
	 * This creates an adapter for a {@link ATLnoOCL.ActionBlock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionBlockAdapter() {
		if (actionBlockItemProvider == null) {
			actionBlockItemProvider = new ActionBlockItemProvider(this);
		}

		return actionBlockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ATLnoOCL.ExpressionStat} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpressionStatItemProvider expressionStatItemProvider;

	/**
	 * This creates an adapter for a {@link ATLnoOCL.ExpressionStat}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpressionStatAdapter() {
		if (expressionStatItemProvider == null) {
			expressionStatItemProvider = new ExpressionStatItemProvider(this);
		}

		return expressionStatItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ATLnoOCL.BindingStat} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BindingStatItemProvider bindingStatItemProvider;

	/**
	 * This creates an adapter for a {@link ATLnoOCL.BindingStat}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBindingStatAdapter() {
		if (bindingStatItemProvider == null) {
			bindingStatItemProvider = new BindingStatItemProvider(this);
		}

		return bindingStatItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ATLnoOCL.IfStat} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IfStatItemProvider ifStatItemProvider;

	/**
	 * This creates an adapter for a {@link ATLnoOCL.IfStat}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIfStatAdapter() {
		if (ifStatItemProvider == null) {
			ifStatItemProvider = new IfStatItemProvider(this);
		}

		return ifStatItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ATLnoOCL.ForStat} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForStatItemProvider forStatItemProvider;

	/**
	 * This creates an adapter for a {@link ATLnoOCL.ForStat}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForStatAdapter() {
		if (forStatItemProvider == null) {
			forStatItemProvider = new ForStatItemProvider(this);
		}

		return forStatItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ATLnoOCL.Root} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RootItemProvider rootItemProvider;

	/**
	 * This creates an adapter for a {@link ATLnoOCL.Root}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRootAdapter() {
		if (rootItemProvider == null) {
			rootItemProvider = new RootItemProvider(this);
		}

		return rootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ATLnoOCL.OCLDummy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OCLDummyItemProvider oclDummyItemProvider;

	/**
	 * This creates an adapter for a {@link ATLnoOCL.OCLDummy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOCLDummyAdapter() {
		if (oclDummyItemProvider == null) {
			oclDummyItemProvider = new OCLDummyItemProvider(this);
		}

		return oclDummyItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (libraryItemProvider != null) libraryItemProvider.dispose();
		if (queryItemProvider != null) queryItemProvider.dispose();
		if (moduleItemProvider != null) moduleItemProvider.dispose();
		if (helperItemProvider != null) helperItemProvider.dispose();
		if (matchedRuleItemProvider != null) matchedRuleItemProvider.dispose();
		if (lazyMatchedRuleItemProvider != null) lazyMatchedRuleItemProvider.dispose();
		if (calledRuleItemProvider != null) calledRuleItemProvider.dispose();
		if (inPatternItemProvider != null) inPatternItemProvider.dispose();
		if (outPatternItemProvider != null) outPatternItemProvider.dispose();
		if (simpleInPatternElementItemProvider != null) simpleInPatternElementItemProvider.dispose();
		if (simpleOutPatternElementItemProvider != null) simpleOutPatternElementItemProvider.dispose();
		if (forEachOutPatternElementItemProvider != null) forEachOutPatternElementItemProvider.dispose();
		if (bindingItemProvider != null) bindingItemProvider.dispose();
		if (ruleVariableDeclarationItemProvider != null) ruleVariableDeclarationItemProvider.dispose();
		if (libraryRefItemProvider != null) libraryRefItemProvider.dispose();
		if (actionBlockItemProvider != null) actionBlockItemProvider.dispose();
		if (expressionStatItemProvider != null) expressionStatItemProvider.dispose();
		if (bindingStatItemProvider != null) bindingStatItemProvider.dispose();
		if (ifStatItemProvider != null) ifStatItemProvider.dispose();
		if (forStatItemProvider != null) forStatItemProvider.dispose();
		if (rootItemProvider != null) rootItemProvider.dispose();
		if (oclDummyItemProvider != null) oclDummyItemProvider.dispose();
	}

}
