/*
 * generated by Xtext 2.25.0
 */
package org.omg.qvt10.myqvto.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyQvtoGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class TopLevelGOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.TopLevelGO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTopLevelGOAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cModuleimportAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModuleimportModuleImportParserRuleCall_1_0 = (RuleCall)cModuleimportAssignment_1.eContents().get(0);
		private final Assignment cUnit_elementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnit_elementModuleParserRuleCall_2_0 = (RuleCall)cUnit_elementAssignment_2.eContents().get(0);
		
		//TopLevelGO returns TopLevelGO:
		//    {TopLevelGO}
		//          (moduleimport+=ModuleImport)*
		//          (unit_element+=Module)*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{TopLevelGO}
		//      (moduleimport+=ModuleImport)*
		//      (unit_element+=Module)*
		public Group getGroup() { return cGroup; }
		
		//{TopLevelGO}
		public Action getTopLevelGOAction_0() { return cTopLevelGOAction_0; }
		
		//(moduleimport+=ModuleImport)*
		public Assignment getModuleimportAssignment_1() { return cModuleimportAssignment_1; }
		
		//ModuleImport
		public RuleCall getModuleimportModuleImportParserRuleCall_1_0() { return cModuleimportModuleImportParserRuleCall_1_0; }
		
		//(unit_element+=Module)*
		public Assignment getUnit_elementAssignment_2() { return cUnit_elementAssignment_2; }
		
		//Module
		public RuleCall getUnit_elementModuleParserRuleCall_2_0() { return cUnit_elementModuleParserRuleCall_2_0; }
	}
	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.Module");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHelperParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperationalTransformationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMappingOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConstructorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cContextualPropertyParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEntryOperationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cLibraryParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cModelTypeParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cTagGOParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cMetaModelGOParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cAccessDeclParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cTypeDefParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cClassifierGOParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		
		//Module returns Module:
		//  Helper | OperationalTransformation | MappingOperation | Constructor | ContextualProperty | EntryOperation | Library | ModelType | TagGO | MetaModelGO | AccessDecl | TypeDef | ClassifierGO;
		@Override public ParserRule getRule() { return rule; }
		
		//Helper | OperationalTransformation | MappingOperation | Constructor | ContextualProperty | EntryOperation | Library | ModelType | TagGO | MetaModelGO | AccessDecl | TypeDef | ClassifierGO
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Helper
		public RuleCall getHelperParserRuleCall_0() { return cHelperParserRuleCall_0; }
		
		//OperationalTransformation
		public RuleCall getOperationalTransformationParserRuleCall_1() { return cOperationalTransformationParserRuleCall_1; }
		
		//MappingOperation
		public RuleCall getMappingOperationParserRuleCall_2() { return cMappingOperationParserRuleCall_2; }
		
		//Constructor
		public RuleCall getConstructorParserRuleCall_3() { return cConstructorParserRuleCall_3; }
		
		//ContextualProperty
		public RuleCall getContextualPropertyParserRuleCall_4() { return cContextualPropertyParserRuleCall_4; }
		
		//EntryOperation
		public RuleCall getEntryOperationParserRuleCall_5() { return cEntryOperationParserRuleCall_5; }
		
		//Library
		public RuleCall getLibraryParserRuleCall_6() { return cLibraryParserRuleCall_6; }
		
		//ModelType
		public RuleCall getModelTypeParserRuleCall_7() { return cModelTypeParserRuleCall_7; }
		
		//TagGO
		public RuleCall getTagGOParserRuleCall_8() { return cTagGOParserRuleCall_8; }
		
		//MetaModelGO
		public RuleCall getMetaModelGOParserRuleCall_9() { return cMetaModelGOParserRuleCall_9; }
		
		//AccessDecl
		public RuleCall getAccessDeclParserRuleCall_10() { return cAccessDeclParserRuleCall_10; }
		
		//TypeDef
		public RuleCall getTypeDefParserRuleCall_11() { return cTypeDefParserRuleCall_11; }
		
		//ClassifierGO
		public RuleCall getClassifierGOParserRuleCall_12() { return cClassifierGOParserRuleCall_12; }
	}
	public class ImperativeOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.ImperativeOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHelperParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMappingOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstructorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cContextualPropertyParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEntryOperationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTagGOParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAccessDeclParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cTypeDefParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cClassifierGOParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//ImperativeOperation returns ImperativeOperation:
		//  Helper | MappingOperation | Constructor | ContextualProperty | EntryOperation | TagGO | AccessDecl | TypeDef | ClassifierGO;
		@Override public ParserRule getRule() { return rule; }
		
		//Helper | MappingOperation | Constructor | ContextualProperty | EntryOperation | TagGO | AccessDecl | TypeDef | ClassifierGO
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Helper
		public RuleCall getHelperParserRuleCall_0() { return cHelperParserRuleCall_0; }
		
		//MappingOperation
		public RuleCall getMappingOperationParserRuleCall_1() { return cMappingOperationParserRuleCall_1; }
		
		//Constructor
		public RuleCall getConstructorParserRuleCall_2() { return cConstructorParserRuleCall_2; }
		
		//ContextualProperty
		public RuleCall getContextualPropertyParserRuleCall_3() { return cContextualPropertyParserRuleCall_3; }
		
		//EntryOperation
		public RuleCall getEntryOperationParserRuleCall_4() { return cEntryOperationParserRuleCall_4; }
		
		//TagGO
		public RuleCall getTagGOParserRuleCall_5() { return cTagGOParserRuleCall_5; }
		
		//AccessDecl
		public RuleCall getAccessDeclParserRuleCall_6() { return cAccessDeclParserRuleCall_6; }
		
		//TypeDef
		public RuleCall getTypeDefParserRuleCall_7() { return cTypeDefParserRuleCall_7; }
		
		//ClassifierGO
		public RuleCall getClassifierGOParserRuleCall_8() { return cClassifierGOParserRuleCall_8; }
	}
	public class ModuleImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.ModuleImport");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cFromKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cUnitAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cUnitUnitRefGOParserRuleCall_0_1_0 = (RuleCall)cUnitAssignment_0_1.eContents().get(0);
		private final Keyword cImportKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Alternatives cAlternatives_0_3 = (Alternatives)cGroup_0.eContents().get(3);
		private final Group cGroup_0_3_0 = (Group)cAlternatives_0_3.eContents().get(0);
		private final Assignment cIdentifierAssignment_0_3_0_0 = (Assignment)cGroup_0_3_0.eContents().get(0);
		private final RuleCall cIdentifierIDTerminalRuleCall_0_3_0_0_0 = (RuleCall)cIdentifierAssignment_0_3_0_0.eContents().get(0);
		private final Group cGroup_0_3_0_1 = (Group)cGroup_0_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_3_0_1_0 = (Keyword)cGroup_0_3_0_1.eContents().get(0);
		private final Assignment cIdentifierAssignment_0_3_0_1_1 = (Assignment)cGroup_0_3_0_1.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_0_3_0_1_1_0 = (RuleCall)cIdentifierAssignment_0_3_0_1_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_3_1 = (Keyword)cAlternatives_0_3.eContents().get(1);
		private final Keyword cSemicolonKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cImportKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cUnitAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUnitUnitRefGOParserRuleCall_1_1_0 = (RuleCall)cUnitAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ModuleImport returns ModuleImport:
		//          'from' unit=UnitRefGO 'import' (identifier+=ID ( "," identifier+=ID)*  | '*') ';' |
		//        'import' unit=UnitRefGO ';'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//  'from' unit=UnitRefGO 'import' (identifier+=ID ( "," identifier+=ID)*  | '*') ';' |
		//'import' unit=UnitRefGO ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'from' unit=UnitRefGO 'import' (identifier+=ID ( "," identifier+=ID)*  | '*') ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//'from'
		public Keyword getFromKeyword_0_0() { return cFromKeyword_0_0; }
		
		//unit=UnitRefGO
		public Assignment getUnitAssignment_0_1() { return cUnitAssignment_0_1; }
		
		//UnitRefGO
		public RuleCall getUnitUnitRefGOParserRuleCall_0_1_0() { return cUnitUnitRefGOParserRuleCall_0_1_0; }
		
		//'import'
		public Keyword getImportKeyword_0_2() { return cImportKeyword_0_2; }
		
		//(identifier+=ID ( "," identifier+=ID)*  | '*')
		public Alternatives getAlternatives_0_3() { return cAlternatives_0_3; }
		
		//identifier+=ID ( "," identifier+=ID)*
		public Group getGroup_0_3_0() { return cGroup_0_3_0; }
		
		//identifier+=ID
		public Assignment getIdentifierAssignment_0_3_0_0() { return cIdentifierAssignment_0_3_0_0; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0_3_0_0_0() { return cIdentifierIDTerminalRuleCall_0_3_0_0_0; }
		
		//( "," identifier+=ID)*
		public Group getGroup_0_3_0_1() { return cGroup_0_3_0_1; }
		
		//","
		public Keyword getCommaKeyword_0_3_0_1_0() { return cCommaKeyword_0_3_0_1_0; }
		
		//identifier+=ID
		public Assignment getIdentifierAssignment_0_3_0_1_1() { return cIdentifierAssignment_0_3_0_1_1; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0_3_0_1_1_0() { return cIdentifierIDTerminalRuleCall_0_3_0_1_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_0_3_1() { return cAsteriskKeyword_0_3_1; }
		
		//';'
		public Keyword getSemicolonKeyword_0_4() { return cSemicolonKeyword_0_4; }
		
		//'import' unit=UnitRefGO ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//'import'
		public Keyword getImportKeyword_1_0() { return cImportKeyword_1_0; }
		
		//unit=UnitRefGO
		public Assignment getUnitAssignment_1_1() { return cUnitAssignment_1_1; }
		
		//UnitRefGO
		public RuleCall getUnitUnitRefGOParserRuleCall_1_1_0() { return cUnitUnitRefGOParserRuleCall_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_2() { return cSemicolonKeyword_1_2; }
	}
	public class ModelTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.ModelType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cModeltypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cCompliance_kindAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCompliance_kindSTRINGTerminalRuleCall_3_0 = (RuleCall)cCompliance_kindAssignment_3.eContents().get(0);
		private final Keyword cUsesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPackageref_listAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPackageref_listPackageRefGOParserRuleCall_5_0 = (RuleCall)cPackageref_listAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPackageref_listAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPackageref_listPackageRefGOParserRuleCall_6_1_0 = (RuleCall)cPackageref_listAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cWhereKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cModeltype_whereAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cModeltype_whereExpressionBlockParserRuleCall_7_1_0 = (RuleCall)cModeltype_whereAssignment_7_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ModelType returns ModelType:
		//    {ModelType}
		//    'modeltype'
		//         name=ID
		//        ( compliance_kind=STRING)?
		//        'uses'  packageref_list+=PackageRefGO ( "," packageref_list+=PackageRefGO)*
		//        ( 'where'  modeltype_where=ExpressionBlock)?
		//     ';' ;
		@Override public ParserRule getRule() { return rule; }
		
		//{ModelType}
		//'modeltype'
		//     name=ID
		//    ( compliance_kind=STRING)?
		//    'uses'  packageref_list+=PackageRefGO ( "," packageref_list+=PackageRefGO)*
		//    ( 'where'  modeltype_where=ExpressionBlock)?
		// ';'
		public Group getGroup() { return cGroup; }
		
		//{ModelType}
		public Action getModelTypeAction_0() { return cModelTypeAction_0; }
		
		//'modeltype'
		public Keyword getModeltypeKeyword_1() { return cModeltypeKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//( compliance_kind=STRING)?
		public Assignment getCompliance_kindAssignment_3() { return cCompliance_kindAssignment_3; }
		
		//STRING
		public RuleCall getCompliance_kindSTRINGTerminalRuleCall_3_0() { return cCompliance_kindSTRINGTerminalRuleCall_3_0; }
		
		//'uses'
		public Keyword getUsesKeyword_4() { return cUsesKeyword_4; }
		
		//packageref_list+=PackageRefGO
		public Assignment getPackageref_listAssignment_5() { return cPackageref_listAssignment_5; }
		
		//PackageRefGO
		public RuleCall getPackageref_listPackageRefGOParserRuleCall_5_0() { return cPackageref_listPackageRefGOParserRuleCall_5_0; }
		
		//( "," packageref_list+=PackageRefGO)*
		public Group getGroup_6() { return cGroup_6; }
		
		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//packageref_list+=PackageRefGO
		public Assignment getPackageref_listAssignment_6_1() { return cPackageref_listAssignment_6_1; }
		
		//PackageRefGO
		public RuleCall getPackageref_listPackageRefGOParserRuleCall_6_1_0() { return cPackageref_listPackageRefGOParserRuleCall_6_1_0; }
		
		//( 'where'  modeltype_where=ExpressionBlock)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'where'
		public Keyword getWhereKeyword_7_0() { return cWhereKeyword_7_0; }
		
		//modeltype_where=ExpressionBlock
		public Assignment getModeltype_whereAssignment_7_1() { return cModeltype_whereAssignment_7_1; }
		
		//ExpressionBlock
		public RuleCall getModeltype_whereExpressionBlockParserRuleCall_7_1_0() { return cModeltype_whereExpressionBlockParserRuleCall_7_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class ExpressionGOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.ExpressionGO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionGOAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDummyContentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDummyContentEStringParserRuleCall_1_0 = (RuleCall)cDummyContentAssignment_1.eContents().get(0);
		
		//ExpressionGO returns ExpressionGO:
		//    {ExpressionGO}
		//          (dummyContent+=EString)*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExpressionGO}
		//      (dummyContent+=EString)*
		public Group getGroup() { return cGroup; }
		
		//{ExpressionGO}
		public Action getExpressionGOAction_0() { return cExpressionGOAction_0; }
		
		//(dummyContent+=EString)*
		public Assignment getDummyContentAssignment_1() { return cDummyContentAssignment_1; }
		
		//EString
		public RuleCall getDummyContentEStringParserRuleCall_1_0() { return cDummyContentEStringParserRuleCall_1_0; }
	}
	public class HelperElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.Helper");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHelper_headerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHelper_headerHelperHeaderParserRuleCall_0_0 = (RuleCall)cHelper_headerAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExpressionExpressionGOParserRuleCall_1_1_1_0 = (RuleCall)cExpressionAssignment_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Assignment cExpression_blockAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cExpression_blockExpressionBlockParserRuleCall_1_2_0_0 = (RuleCall)cExpression_blockAssignment_1_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		
		//Helper returns Helper:
		//         helper_header=HelperHeader ( ';' |
		//         '=' expression=ExpressionGO ';' |
		//         expression_block=ExpressionBlock (';')?)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//helper_header=HelperHeader ( ';' |
		//'=' expression=ExpressionGO ';' |
		//expression_block=ExpressionBlock (';')?)
		public Group getGroup() { return cGroup; }
		
		//helper_header=HelperHeader
		public Assignment getHelper_headerAssignment_0() { return cHelper_headerAssignment_0; }
		
		//HelperHeader
		public RuleCall getHelper_headerHelperHeaderParserRuleCall_0_0() { return cHelper_headerHelperHeaderParserRuleCall_0_0; }
		
		//( ';' |
		//        '=' expression=ExpressionGO ';' |
		//        expression_block=ExpressionBlock (';')?)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//'=' expression=ExpressionGO ';'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1_0() { return cEqualsSignKeyword_1_1_0; }
		
		//expression=ExpressionGO
		public Assignment getExpressionAssignment_1_1_1() { return cExpressionAssignment_1_1_1; }
		
		//ExpressionGO
		public RuleCall getExpressionExpressionGOParserRuleCall_1_1_1_0() { return cExpressionExpressionGOParserRuleCall_1_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1_2() { return cSemicolonKeyword_1_1_2; }
		
		//expression_block=ExpressionBlock (';')?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//expression_block=ExpressionBlock
		public Assignment getExpression_blockAssignment_1_2_0() { return cExpression_blockAssignment_1_2_0; }
		
		//ExpressionBlock
		public RuleCall getExpression_blockExpressionBlockParserRuleCall_1_2_0_0() { return cExpression_blockExpressionBlockParserRuleCall_1_2_0_0; }
		
		//(';')?
		public Keyword getSemicolonKeyword_1_2_1() { return cSemicolonKeyword_1_2_1; }
	}
	public class OperationalTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.OperationalTransformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTransformation_hAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTransformation_hTransformationHeaderParserRuleCall_0_0 = (RuleCall)cTransformation_hAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cModule_elementAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cModule_elementImperativeOperationParserRuleCall_1_1_1_0 = (RuleCall)cModule_elementAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Keyword cSemicolonKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		
		//OperationalTransformation returns OperationalTransformation:
		//         transformation_h=TransformationHeader ( ';' |
		//         '{' (module_element+=ImperativeOperation)* '}'  (';')? )
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//transformation_h=TransformationHeader ( ';' |
		//'{' (module_element+=ImperativeOperation)* '}'  (';')? )
		public Group getGroup() { return cGroup; }
		
		//transformation_h=TransformationHeader
		public Assignment getTransformation_hAssignment_0() { return cTransformation_hAssignment_0; }
		
		//TransformationHeader
		public RuleCall getTransformation_hTransformationHeaderParserRuleCall_0_0() { return cTransformation_hTransformationHeaderParserRuleCall_0_0; }
		
		//( ';' |
		//        '{' (module_element+=ImperativeOperation)* '}'  (';')? )
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//'{' (module_element+=ImperativeOperation)* '}'  (';')?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1_0() { return cLeftCurlyBracketKeyword_1_1_0; }
		
		//(module_element+=ImperativeOperation)*
		public Assignment getModule_elementAssignment_1_1_1() { return cModule_elementAssignment_1_1_1; }
		
		//ImperativeOperation
		public RuleCall getModule_elementImperativeOperationParserRuleCall_1_1_1_0() { return cModule_elementImperativeOperationParserRuleCall_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1_2() { return cRightCurlyBracketKeyword_1_1_2; }
		
		//(';')?
		public Keyword getSemicolonKeyword_1_1_3() { return cSemicolonKeyword_1_1_3; }
	}
	public class MappingOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.MappingOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMapping_full_headerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMapping_full_headerMappingFullHeaderParserRuleCall_0_0 = (RuleCall)cMapping_full_headerAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cMapping_bodyAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cMapping_bodyMappingBodyParserRuleCall_1_1_1_0 = (RuleCall)cMapping_bodyAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Keyword cSemicolonKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		
		//MappingOperation returns MappingOperation:
		//         mapping_full_header=MappingFullHeader ( ';' |
		//         '{'mapping_body=MappingBody'}' (';')?)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//mapping_full_header=MappingFullHeader ( ';' |
		//'{'mapping_body=MappingBody'}' (';')?)
		public Group getGroup() { return cGroup; }
		
		//mapping_full_header=MappingFullHeader
		public Assignment getMapping_full_headerAssignment_0() { return cMapping_full_headerAssignment_0; }
		
		//MappingFullHeader
		public RuleCall getMapping_full_headerMappingFullHeaderParserRuleCall_0_0() { return cMapping_full_headerMappingFullHeaderParserRuleCall_0_0; }
		
		//( ';' |
		//        '{'mapping_body=MappingBody'}' (';')?)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//'{'mapping_body=MappingBody'}' (';')?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1_0() { return cLeftCurlyBracketKeyword_1_1_0; }
		
		//mapping_body=MappingBody
		public Assignment getMapping_bodyAssignment_1_1_1() { return cMapping_bodyAssignment_1_1_1; }
		
		//MappingBody
		public RuleCall getMapping_bodyMappingBodyParserRuleCall_1_1_1_0() { return cMapping_bodyMappingBodyParserRuleCall_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1_2() { return cRightCurlyBracketKeyword_1_1_2; }
		
		//(';')?
		public Keyword getSemicolonKeyword_1_1_3() { return cSemicolonKeyword_1_1_3; }
	}
	public class ConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.Constructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstructor_headerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConstructor_headerConstructorHeaderParserRuleCall_0_0 = (RuleCall)cConstructor_headerAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cExpression_blockAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cExpression_blockExpressionBlockParserRuleCall_1_1_0_0 = (RuleCall)cExpression_blockAssignment_1_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		
		//Constructor returns Constructor:
		//         constructor_header=ConstructorHeader ( ';' |
		//         expression_block=ExpressionBlock (';')?)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//constructor_header=ConstructorHeader ( ';' |
		//expression_block=ExpressionBlock (';')?)
		public Group getGroup() { return cGroup; }
		
		//constructor_header=ConstructorHeader
		public Assignment getConstructor_headerAssignment_0() { return cConstructor_headerAssignment_0; }
		
		//ConstructorHeader
		public RuleCall getConstructor_headerConstructorHeaderParserRuleCall_0_0() { return cConstructor_headerConstructorHeaderParserRuleCall_0_0; }
		
		//( ';' |
		//        expression_block=ExpressionBlock (';')?)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//expression_block=ExpressionBlock (';')?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//expression_block=ExpressionBlock
		public Assignment getExpression_blockAssignment_1_1_0() { return cExpression_blockAssignment_1_1_0; }
		
		//ExpressionBlock
		public RuleCall getExpression_blockExpressionBlockParserRuleCall_1_1_0_0() { return cExpression_blockExpressionBlockParserRuleCall_1_1_0_0; }
		
		//(';')?
		public Keyword getSemicolonKeyword_1_1_1() { return cSemicolonKeyword_1_1_1; }
	}
	public class ContextualPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.ContextualProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntermediateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProperty_keyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProperty_keyPropertyKeyEnumRuleCall_1_0 = (RuleCall)cProperty_keyAssignment_1.eContents().get(0);
		private final Assignment cDeclaratorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclaratorDeclaratorParserRuleCall_2_0 = (RuleCall)cDeclaratorAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ContextualProperty returns ContextualProperty:
		//    ('intermediate')?
		//          (property_key+=PropertyKey)+
		//         declarator=Declarator
		//     ';' ;
		@Override public ParserRule getRule() { return rule; }
		
		//('intermediate')?
		//      (property_key+=PropertyKey)+
		//     declarator=Declarator
		// ';'
		public Group getGroup() { return cGroup; }
		
		//('intermediate')?
		public Keyword getIntermediateKeyword_0() { return cIntermediateKeyword_0; }
		
		//(property_key+=PropertyKey)+
		public Assignment getProperty_keyAssignment_1() { return cProperty_keyAssignment_1; }
		
		//PropertyKey
		public RuleCall getProperty_keyPropertyKeyEnumRuleCall_1_0() { return cProperty_keyPropertyKeyEnumRuleCall_1_0; }
		
		//declarator=Declarator
		public Assignment getDeclaratorAssignment_2() { return cDeclaratorAssignment_2; }
		
		//Declarator
		public RuleCall getDeclaratorDeclaratorParserRuleCall_2_0() { return cDeclaratorDeclaratorParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class EntryOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.EntryOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntry_headerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEntry_headerEntryHeaderParserRuleCall_0_0 = (RuleCall)cEntry_headerAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cExpression_blockAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cExpression_blockExpressionBlockParserRuleCall_1_1_0_0 = (RuleCall)cExpression_blockAssignment_1_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		
		//EntryOperation returns EntryOperation:
		//         entry_header=EntryHeader ( ';' |
		//         expression_block=ExpressionBlock (';')?)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//entry_header=EntryHeader ( ';' |
		//expression_block=ExpressionBlock (';')?)
		public Group getGroup() { return cGroup; }
		
		//entry_header=EntryHeader
		public Assignment getEntry_headerAssignment_0() { return cEntry_headerAssignment_0; }
		
		//EntryHeader
		public RuleCall getEntry_headerEntryHeaderParserRuleCall_0_0() { return cEntry_headerEntryHeaderParserRuleCall_0_0; }
		
		//( ';' |
		//        expression_block=ExpressionBlock (';')?)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//expression_block=ExpressionBlock (';')?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//expression_block=ExpressionBlock
		public Assignment getExpression_blockAssignment_1_1_0() { return cExpression_blockAssignment_1_1_0; }
		
		//ExpressionBlock
		public RuleCall getExpression_blockExpressionBlockParserRuleCall_1_1_0_0() { return cExpression_blockExpressionBlockParserRuleCall_1_1_0_0; }
		
		//(';')?
		public Keyword getSemicolonKeyword_1_1_1() { return cSemicolonKeyword_1_1_1; }
	}
	public class LibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.Library");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLibrary_hAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLibrary_hLibraryHeaderParserRuleCall_0_0 = (RuleCall)cLibrary_hAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cModule_elementAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cModule_elementImperativeOperationParserRuleCall_1_1_1_0 = (RuleCall)cModule_elementAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Keyword cSemicolonKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		
		//Library returns Library:
		//         library_h=LibraryHeader ( ';' |
		//         '{' (module_element+=ImperativeOperation)* '}'  (';')?)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//library_h=LibraryHeader ( ';' |
		//'{' (module_element+=ImperativeOperation)* '}'  (';')?)
		public Group getGroup() { return cGroup; }
		
		//library_h=LibraryHeader
		public Assignment getLibrary_hAssignment_0() { return cLibrary_hAssignment_0; }
		
		//LibraryHeader
		public RuleCall getLibrary_hLibraryHeaderParserRuleCall_0_0() { return cLibrary_hLibraryHeaderParserRuleCall_0_0; }
		
		//( ';' |
		//        '{' (module_element+=ImperativeOperation)* '}'  (';')?)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//'{' (module_element+=ImperativeOperation)* '}'  (';')?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1_0() { return cLeftCurlyBracketKeyword_1_1_0; }
		
		//(module_element+=ImperativeOperation)*
		public Assignment getModule_elementAssignment_1_1_1() { return cModule_elementAssignment_1_1_1; }
		
		//ImperativeOperation
		public RuleCall getModule_elementImperativeOperationParserRuleCall_1_1_1_0() { return cModule_elementImperativeOperationParserRuleCall_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1_2() { return cRightCurlyBracketKeyword_1_1_2; }
		
		//(';')?
		public Keyword getSemicolonKeyword_1_1_3() { return cSemicolonKeyword_1_1_3; }
	}
	public class TagGOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.TagGO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTagKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTagidAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTagidSTRINGTerminalRuleCall_1_0 = (RuleCall)cTagidAssignment_1.eContents().get(0);
		private final Assignment cScoped_identifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cScoped_identifierScopedIdentifierParserRuleCall_2_0 = (RuleCall)cScoped_identifierAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTagvalueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTagvalueExpressionGOParserRuleCall_3_1_0 = (RuleCall)cTagvalueAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TagGO returns TagGO:
		//    'tag'
		//         tagid=STRING
		//         scoped_identifier=ScopedIdentifier
		//        ('=' tagvalue=ExpressionGO)?
		//     ';' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'tag'
		//     tagid=STRING
		//     scoped_identifier=ScopedIdentifier
		//    ('=' tagvalue=ExpressionGO)?
		// ';'
		public Group getGroup() { return cGroup; }
		
		//'tag'
		public Keyword getTagKeyword_0() { return cTagKeyword_0; }
		
		//tagid=STRING
		public Assignment getTagidAssignment_1() { return cTagidAssignment_1; }
		
		//STRING
		public RuleCall getTagidSTRINGTerminalRuleCall_1_0() { return cTagidSTRINGTerminalRuleCall_1_0; }
		
		//scoped_identifier=ScopedIdentifier
		public Assignment getScoped_identifierAssignment_2() { return cScoped_identifierAssignment_2; }
		
		//ScopedIdentifier
		public RuleCall getScoped_identifierScopedIdentifierParserRuleCall_2_0() { return cScoped_identifierScopedIdentifierParserRuleCall_2_0; }
		
		//('=' tagvalue=ExpressionGO)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//tagvalue=ExpressionGO
		public Assignment getTagvalueAssignment_3_1() { return cTagvalueAssignment_3_1; }
		
		//ExpressionGO
		public RuleCall getTagvalueExpressionGOParserRuleCall_3_1_0() { return cTagvalueExpressionGOParserRuleCall_3_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class MetaModelGOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.MetaModelGO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMetamodel_hAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMetamodel_hMetaModelHeaderParserRuleCall_0_0 = (RuleCall)cMetamodel_hAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cMetamodel_elementAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cMetamodel_elementMetaModelElementParserRuleCall_1_1_1_0 = (RuleCall)cMetamodel_elementAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Keyword cSemicolonKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		
		//MetaModelGO returns MetaModelGO:
		//         metamodel_h=MetaModelHeader ( ';' |
		//         '{' (metamodel_element+=MetaModelElement)* '}'  (';')?)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//metamodel_h=MetaModelHeader ( ';' |
		//'{' (metamodel_element+=MetaModelElement)* '}'  (';')?)
		public Group getGroup() { return cGroup; }
		
		//metamodel_h=MetaModelHeader
		public Assignment getMetamodel_hAssignment_0() { return cMetamodel_hAssignment_0; }
		
		//MetaModelHeader
		public RuleCall getMetamodel_hMetaModelHeaderParserRuleCall_0_0() { return cMetamodel_hMetaModelHeaderParserRuleCall_0_0; }
		
		//( ';' |
		//        '{' (metamodel_element+=MetaModelElement)* '}'  (';')?)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//'{' (metamodel_element+=MetaModelElement)* '}'  (';')?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1_0() { return cLeftCurlyBracketKeyword_1_1_0; }
		
		//(metamodel_element+=MetaModelElement)*
		public Assignment getMetamodel_elementAssignment_1_1_1() { return cMetamodel_elementAssignment_1_1_1; }
		
		//MetaModelElement
		public RuleCall getMetamodel_elementMetaModelElementParserRuleCall_1_1_1_0() { return cMetamodel_elementMetaModelElementParserRuleCall_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1_2() { return cRightCurlyBracketKeyword_1_1_2; }
		
		//(';')?
		public Keyword getSemicolonKeyword_1_1_3() { return cSemicolonKeyword_1_1_3; }
	}
	public class AccessDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.AccessDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAccess_usageAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAccess_usageAccessUsageParserRuleCall_0_0 = (RuleCall)cAccess_usageAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AccessDecl returns AccessDecl:
		//         access_usage=AccessUsage ';'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//access_usage=AccessUsage ';'
		public Group getGroup() { return cGroup; }
		
		//access_usage=AccessUsage
		public Assignment getAccess_usageAssignment_0() { return cAccess_usageAssignment_0; }
		
		//AccessUsage
		public RuleCall getAccess_usageAccessUsageParserRuleCall_0_0() { return cAccess_usageAccessUsageParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class TypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.TypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypedefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypespecAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypespecTypeSpecParserRuleCall_3_0 = (RuleCall)cTypespecAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypedef_conditionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypedef_conditionExpressionGOParserRuleCall_4_1_0 = (RuleCall)cTypedef_conditionAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TypeDef returns TypeDef:
		//    'typedef'
		//         name=ID
		//         '=' typespec=TypeSpec
		//        ( '['typedef_condition=ExpressionGO']')?
		//     ';' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'typedef'
		//     name=ID
		//     '=' typespec=TypeSpec
		//    ( '['typedef_condition=ExpressionGO']')?
		// ';'
		public Group getGroup() { return cGroup; }
		
		//'typedef'
		public Keyword getTypedefKeyword_0() { return cTypedefKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//typespec=TypeSpec
		public Assignment getTypespecAssignment_3() { return cTypespecAssignment_3; }
		
		//TypeSpec
		public RuleCall getTypespecTypeSpecParserRuleCall_3_0() { return cTypespecTypeSpecParserRuleCall_3_0; }
		
		//( '['typedef_condition=ExpressionGO']')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }
		
		//typedef_condition=ExpressionGO
		public Assignment getTypedef_conditionAssignment_4_1() { return cTypedef_conditionAssignment_4_1; }
		
		//ExpressionGO
		public RuleCall getTypedef_conditionExpressionGOParserRuleCall_4_1_0() { return cTypedef_conditionExpressionGOParserRuleCall_4_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_2() { return cRightSquareBracketKeyword_4_2; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ClassifierGOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.ClassifierGO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassifier_hAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassifier_hClassifierHeaderParserRuleCall_0_0 = (RuleCall)cClassifier_hAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cClassifier_feature_listAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cClassifier_feature_listClassifierFeatureListParserRuleCall_1_1_1_0 = (RuleCall)cClassifier_feature_listAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Keyword cSemicolonKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		
		//ClassifierGO returns ClassifierGO:
		//         classifier_h=ClassifierHeader ( ';' |
		//        '{'( classifier_feature_list=ClassifierFeatureList)?'}' (';')?)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		// classifier_h=ClassifierHeader ( ';' |
		//'{'( classifier_feature_list=ClassifierFeatureList)?'}' (';')?)
		public Group getGroup() { return cGroup; }
		
		//classifier_h=ClassifierHeader
		public Assignment getClassifier_hAssignment_0() { return cClassifier_hAssignment_0; }
		
		//ClassifierHeader
		public RuleCall getClassifier_hClassifierHeaderParserRuleCall_0_0() { return cClassifier_hClassifierHeaderParserRuleCall_0_0; }
		
		//( ';' |
		//       '{'( classifier_feature_list=ClassifierFeatureList)?'}' (';')?)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//'{'( classifier_feature_list=ClassifierFeatureList)?'}' (';')?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1_0() { return cLeftCurlyBracketKeyword_1_1_0; }
		
		//( classifier_feature_list=ClassifierFeatureList)?
		public Assignment getClassifier_feature_listAssignment_1_1_1() { return cClassifier_feature_listAssignment_1_1_1; }
		
		//ClassifierFeatureList
		public RuleCall getClassifier_feature_listClassifierFeatureListParserRuleCall_1_1_1_0() { return cClassifier_feature_listClassifierFeatureListParserRuleCall_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1_2() { return cRightCurlyBracketKeyword_1_1_2; }
		
		//(';')?
		public Keyword getSemicolonKeyword_1_1_3() { return cSemicolonKeyword_1_1_3; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class PackageRefGOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.PackageRefGO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPackageRefGOAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cScoped_identifierAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cScoped_identifierScopedIdentifierParserRuleCall_1_0_0_0 = (RuleCall)cScoped_identifierAssignment_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cUriAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cUriSTRINGTerminalRuleCall_1_0_1_1_0 = (RuleCall)cUriAssignment_1_0_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_1_2 = (Keyword)cGroup_1_0_1.eContents().get(2);
		private final Assignment cUriAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cUriSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cUriAssignment_1_1.eContents().get(0);
		
		//PackageRefGO returns PackageRefGO:
		//    {PackageRefGO}
		//         (scoped_identifier=ScopedIdentifier
		//        ( '(' uri=STRING ')' )? | uri=STRING)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{PackageRefGO}
		//     (scoped_identifier=ScopedIdentifier
		//    ( '(' uri=STRING ')' )? | uri=STRING)
		public Group getGroup() { return cGroup; }
		
		//{PackageRefGO}
		public Action getPackageRefGOAction_0() { return cPackageRefGOAction_0; }
		
		// (scoped_identifier=ScopedIdentifier
		//( '(' uri=STRING ')' )? | uri=STRING)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//scoped_identifier=ScopedIdentifier
		//        ( '(' uri=STRING ')' )?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//scoped_identifier=ScopedIdentifier
		public Assignment getScoped_identifierAssignment_1_0_0() { return cScoped_identifierAssignment_1_0_0; }
		
		//ScopedIdentifier
		public RuleCall getScoped_identifierScopedIdentifierParserRuleCall_1_0_0_0() { return cScoped_identifierScopedIdentifierParserRuleCall_1_0_0_0; }
		
		//( '(' uri=STRING ')' )?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0_1_0() { return cLeftParenthesisKeyword_1_0_1_0; }
		
		//uri=STRING
		public Assignment getUriAssignment_1_0_1_1() { return cUriAssignment_1_0_1_1; }
		
		//STRING
		public RuleCall getUriSTRINGTerminalRuleCall_1_0_1_1_0() { return cUriSTRINGTerminalRuleCall_1_0_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_0_1_2() { return cRightParenthesisKeyword_1_0_1_2; }
		
		//uri=STRING
		public Assignment getUriAssignment_1_1() { return cUriAssignment_1_1; }
		
		//STRING
		public RuleCall getUriSTRINGTerminalRuleCall_1_1_0() { return cUriSTRINGTerminalRuleCall_1_1_0; }
	}
	public class ExpressionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.ExpressionBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpression_listAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpression_listExpressionListParserRuleCall_2_0 = (RuleCall)cExpression_listAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ExpressionBlock returns ExpressionBlock:
		//    {ExpressionBlock}
		//    '{'
		//        ( expression_list=ExpressionList)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ExpressionBlock}
		//'{'
		//    ( expression_list=ExpressionList)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{ExpressionBlock}
		public Action getExpressionBlockAction_0() { return cExpressionBlockAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//( expression_list=ExpressionList)?
		public Assignment getExpression_listAssignment_2() { return cExpression_listAssignment_2; }
		
		//ExpressionList
		public RuleCall getExpression_listExpressionListParserRuleCall_2_0() { return cExpression_listExpressionListParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ScopedIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.ScopedIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cScopedIdentifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIdentifierAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_2_1_0 = (RuleCall)cIdentifierAssignment_2_1.eContents().get(0);
		
		//ScopedIdentifier returns ScopedIdentifier:
		//    {ScopedIdentifier}
		//          identifier+=ID ( "::" identifier+=ID)*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{ScopedIdentifier}
		//      identifier+=ID ( "::" identifier+=ID)*
		public Group getGroup() { return cGroup; }
		
		//{ScopedIdentifier}
		public Action getScopedIdentifierAction_0() { return cScopedIdentifierAction_0; }
		
		//identifier+=ID
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_0() { return cIdentifierIDTerminalRuleCall_1_0; }
		
		//( "::" identifier+=ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//"::"
		public Keyword getColonColonKeyword_2_0() { return cColonColonKeyword_2_0; }
		
		//identifier+=ID
		public Assignment getIdentifierAssignment_2_1() { return cIdentifierAssignment_2_1; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_2_1_0() { return cIdentifierIDTerminalRuleCall_2_1_0; }
	}
	public class ExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.ExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpression_semi_listAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpression_semi_listExpressionSemiListParserRuleCall_0_0 = (RuleCall)cExpression_semi_listAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ExpressionList returns ExpressionList:
		//         expression_semi_list=ExpressionSemiList (';')?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//expression_semi_list=ExpressionSemiList (';')?
		public Group getGroup() { return cGroup; }
		
		//expression_semi_list=ExpressionSemiList
		public Assignment getExpression_semi_listAssignment_0() { return cExpression_semi_listAssignment_0; }
		
		//ExpressionSemiList
		public RuleCall getExpression_semi_listExpressionSemiListParserRuleCall_0_0() { return cExpression_semi_listExpressionSemiListParserRuleCall_0_0; }
		
		//(';')?
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class ExpressionSemiListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.ExpressionSemiList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionSemiListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionGOParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionExpressionGOParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		
		//ExpressionSemiList returns ExpressionSemiList:
		//    {ExpressionSemiList}
		//          expression+=ExpressionGO ( "," expression+=ExpressionGO)*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExpressionSemiList}
		//      expression+=ExpressionGO ( "," expression+=ExpressionGO)*
		public Group getGroup() { return cGroup; }
		
		//{ExpressionSemiList}
		public Action getExpressionSemiListAction_0() { return cExpressionSemiListAction_0; }
		
		//expression+=ExpressionGO
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//ExpressionGO
		public RuleCall getExpressionExpressionGOParserRuleCall_1_0() { return cExpressionExpressionGOParserRuleCall_1_0; }
		
		//( "," expression+=ExpressionGO)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//expression+=ExpressionGO
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }
		
		//ExpressionGO
		public RuleCall getExpressionExpressionGOParserRuleCall_2_1_0() { return cExpressionExpressionGOParserRuleCall_2_1_0; }
	}
	public class VarParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.VarParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKindAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKindDirectionKindEnumRuleCall_0_0 = (RuleCall)cKindAssignment_0.eContents().get(0);
		private final Assignment cDeclaratorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclaratorDeclaratorParserRuleCall_1_0 = (RuleCall)cDeclaratorAssignment_1.eContents().get(0);
		
		//VarParameter returns VarParameter:
		//        ( kind=DirectionKind)?
		//         declarator=Declarator
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//( kind=DirectionKind)?
		// declarator=Declarator
		public Group getGroup() { return cGroup; }
		
		//( kind=DirectionKind)?
		public Assignment getKindAssignment_0() { return cKindAssignment_0; }
		
		//DirectionKind
		public RuleCall getKindDirectionKindEnumRuleCall_0_0() { return cKindDirectionKindEnumRuleCall_0_0; }
		
		//declarator=Declarator
		public Assignment getDeclaratorAssignment_1() { return cDeclaratorAssignment_1; }
		
		//Declarator
		public RuleCall getDeclaratorDeclaratorParserRuleCall_1_0() { return cDeclaratorDeclaratorParserRuleCall_1_0; }
	}
	public class DeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.Declarator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cTypespecAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cTypespecTypeSpecParserRuleCall_0_0_0 = (RuleCall)cTypespecAssignment_0_0.eContents().get(0);
		private final Assignment cInit_partAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cInit_partInitPartParserRuleCall_0_1_0 = (RuleCall)cInit_partAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cScoped_identifierAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cScoped_identifierScopedIdentifierParserRuleCall_1_0_0 = (RuleCall)cScoped_identifierAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypespecAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTypespecTypeSpecParserRuleCall_1_2_0 = (RuleCall)cTypespecAssignment_1_2.eContents().get(0);
		private final Assignment cInit_partAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cInit_partInitPartParserRuleCall_1_3_0 = (RuleCall)cInit_partAssignment_1_3.eContents().get(0);
		
		//Declarator returns Declarator:
		//         typespec=TypeSpec
		//        ( init_part=InitPart)?|
		//         scoped_identifier=ScopedIdentifier ':' typespec=TypeSpec ( init_part=InitPart)?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		// typespec=TypeSpec
		//( init_part=InitPart)?|
		// scoped_identifier=ScopedIdentifier ':' typespec=TypeSpec ( init_part=InitPart)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		// typespec=TypeSpec
		//( init_part=InitPart)?
		public Group getGroup_0() { return cGroup_0; }
		
		//typespec=TypeSpec
		public Assignment getTypespecAssignment_0_0() { return cTypespecAssignment_0_0; }
		
		//TypeSpec
		public RuleCall getTypespecTypeSpecParserRuleCall_0_0_0() { return cTypespecTypeSpecParserRuleCall_0_0_0; }
		
		//( init_part=InitPart)?
		public Assignment getInit_partAssignment_0_1() { return cInit_partAssignment_0_1; }
		
		//InitPart
		public RuleCall getInit_partInitPartParserRuleCall_0_1_0() { return cInit_partInitPartParserRuleCall_0_1_0; }
		
		//scoped_identifier=ScopedIdentifier ':' typespec=TypeSpec ( init_part=InitPart)?
		public Group getGroup_1() { return cGroup_1; }
		
		//scoped_identifier=ScopedIdentifier
		public Assignment getScoped_identifierAssignment_1_0() { return cScoped_identifierAssignment_1_0; }
		
		//ScopedIdentifier
		public RuleCall getScoped_identifierScopedIdentifierParserRuleCall_1_0_0() { return cScoped_identifierScopedIdentifierParserRuleCall_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//typespec=TypeSpec
		public Assignment getTypespecAssignment_1_2() { return cTypespecAssignment_1_2; }
		
		//TypeSpec
		public RuleCall getTypespecTypeSpecParserRuleCall_1_2_0() { return cTypespecTypeSpecParserRuleCall_1_2_0; }
		
		//( init_part=InitPart)?
		public Assignment getInit_partAssignment_1_3() { return cInit_partAssignment_1_3; }
		
		//InitPart
		public RuleCall getInit_partInitPartParserRuleCall_1_3_0() { return cInit_partInitPartParserRuleCall_1_3_0; }
	}
	public class TypeSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.TypeSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cType_referenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cType_referenceTypeReferenceParserRuleCall_0_0 = (RuleCall)cType_referenceAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommercialAtKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExtent_locationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExtent_locationIDTerminalRuleCall_1_1_0 = (RuleCall)cExtent_locationAssignment_1_1.eContents().get(0);
		
		//TypeSpec returns TypeSpec:
		//         type_reference=TypeReference
		//        ('@' extent_location=ID)?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		// type_reference=TypeReference
		//('@' extent_location=ID)?
		public Group getGroup() { return cGroup; }
		
		//type_reference=TypeReference
		public Assignment getType_referenceAssignment_0() { return cType_referenceAssignment_0; }
		
		//TypeReference
		public RuleCall getType_referenceTypeReferenceParserRuleCall_0_0() { return cType_referenceTypeReferenceParserRuleCall_0_0; }
		
		//('@' extent_location=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'@'
		public Keyword getCommercialAtKeyword_1_0() { return cCommercialAtKeyword_1_0; }
		
		//extent_location=ID
		public Assignment getExtent_locationAssignment_1_1() { return cExtent_locationAssignment_1_1; }
		
		//ID
		public RuleCall getExtent_locationIDTerminalRuleCall_1_1_0() { return cExtent_locationIDTerminalRuleCall_1_1_0; }
	}
	public class InitPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.InitPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInit_opAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cInit_opAlternatives_0_0 = (Alternatives)cInit_opAssignment_0.eContents().get(0);
		private final Keyword cInit_opEqualsSignKeyword_0_0_0 = (Keyword)cInit_opAlternatives_0_0.eContents().get(0);
		private final Keyword cInit_opColonEqualsSignKeyword_0_0_1 = (Keyword)cInit_opAlternatives_0_0.eContents().get(1);
		private final Keyword cInit_opColonColonEqualsSignKeyword_0_0_2 = (Keyword)cInit_opAlternatives_0_0.eContents().get(2);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionGOParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//InitPart returns InitPart:
		//         init_op=('=' | ':=' | '::=')
		//         expression=ExpressionGO
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//init_op=('=' | ':=' | '::=')
		//expression=ExpressionGO
		public Group getGroup() { return cGroup; }
		
		//init_op=('=' | ':=' | '::=')
		public Assignment getInit_opAssignment_0() { return cInit_opAssignment_0; }
		
		//('=' | ':=' | '::=')
		public Alternatives getInit_opAlternatives_0_0() { return cInit_opAlternatives_0_0; }
		
		//'='
		public Keyword getInit_opEqualsSignKeyword_0_0_0() { return cInit_opEqualsSignKeyword_0_0_0; }
		
		//':='
		public Keyword getInit_opColonEqualsSignKeyword_0_0_1() { return cInit_opColonEqualsSignKeyword_0_0_1; }
		
		//'::='
		public Keyword getInit_opColonColonEqualsSignKeyword_0_0_2() { return cInit_opColonColonEqualsSignKeyword_0_0_2; }
		
		//expression=ExpressionGO
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//ExpressionGO
		public RuleCall getExpressionExpressionGOParserRuleCall_1_0() { return cExpressionExpressionGOParserRuleCall_1_0; }
	}
	public class TypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.TypeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTypeReferenceAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cScoped_identifierAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cScoped_identifierScopedIdentifierParserRuleCall_0_1_0 = (RuleCall)cScoped_identifierAssignment_0_1.eContents().get(0);
		private final Assignment cComplex_typeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cComplex_typeComplexTypeParserRuleCall_1_0 = (RuleCall)cComplex_typeAssignment_1.eContents().get(0);
		
		//TypeReference returns TypeReference:
		//    {TypeReference}
		//         scoped_identifier=ScopedIdentifier |
		//         complex_type=ComplexType
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{TypeReference}
		//     scoped_identifier=ScopedIdentifier |
		//     complex_type=ComplexType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{TypeReference}
		//     scoped_identifier=ScopedIdentifier
		public Group getGroup_0() { return cGroup_0; }
		
		//{TypeReference}
		public Action getTypeReferenceAction_0_0() { return cTypeReferenceAction_0_0; }
		
		//scoped_identifier=ScopedIdentifier
		public Assignment getScoped_identifierAssignment_0_1() { return cScoped_identifierAssignment_0_1; }
		
		//ScopedIdentifier
		public RuleCall getScoped_identifierScopedIdentifierParserRuleCall_0_1_0() { return cScoped_identifierScopedIdentifierParserRuleCall_0_1_0; }
		
		//complex_type=ComplexType
		public Assignment getComplex_typeAssignment_1() { return cComplex_typeAssignment_1; }
		
		//ComplexType
		public RuleCall getComplex_typeComplexTypeParserRuleCall_1_0() { return cComplex_typeComplexTypeParserRuleCall_1_0; }
	}
	public class ComplexTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.ComplexType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cComplexTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cComplex_type_keyAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cComplex_type_keyComplexTypeKeyEnumRuleCall_0_1_0 = (RuleCall)cComplex_type_keyAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cCollection_keyAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cCollection_keyCollectionKeyEnumRuleCall_1_0_0 = (RuleCall)cCollection_keyAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypespecAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTypespecTypeSpecParserRuleCall_1_2_0 = (RuleCall)cTypespecAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cDictKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cTypespecAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cTypespecTypeSpecParserRuleCall_2_2_0 = (RuleCall)cTypespecAssignment_2_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cTypespecAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cTypespecTypeSpecParserRuleCall_2_4_0 = (RuleCall)cTypespecAssignment_2_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cTupleKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cDeclarator_listAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cDeclarator_listDeclaratorListParserRuleCall_3_2_0 = (RuleCall)cDeclarator_listAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//ComplexType returns ComplexType:
		//    {ComplexType}
		//         complex_type_key=ComplexTypeKey |
		//         collection_key=CollectionKey '(' typespec+=TypeSpec ')' |
		//          'Dict' '(' typespec+=TypeSpec','typespec+=TypeSpec   ')' |
		//         'Tuple' '('declarator_list=DeclaratorList')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{ComplexType}
		//     complex_type_key=ComplexTypeKey |
		//     collection_key=CollectionKey '(' typespec+=TypeSpec ')' |
		//      'Dict' '(' typespec+=TypeSpec','typespec+=TypeSpec   ')' |
		//     'Tuple' '('declarator_list=DeclaratorList')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ComplexType}
		//     complex_type_key=ComplexTypeKey
		public Group getGroup_0() { return cGroup_0; }
		
		//{ComplexType}
		public Action getComplexTypeAction_0_0() { return cComplexTypeAction_0_0; }
		
		//complex_type_key=ComplexTypeKey
		public Assignment getComplex_type_keyAssignment_0_1() { return cComplex_type_keyAssignment_0_1; }
		
		//ComplexTypeKey
		public RuleCall getComplex_type_keyComplexTypeKeyEnumRuleCall_0_1_0() { return cComplex_type_keyComplexTypeKeyEnumRuleCall_0_1_0; }
		
		//collection_key=CollectionKey '(' typespec+=TypeSpec ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//collection_key=CollectionKey
		public Assignment getCollection_keyAssignment_1_0() { return cCollection_keyAssignment_1_0; }
		
		//CollectionKey
		public RuleCall getCollection_keyCollectionKeyEnumRuleCall_1_0_0() { return cCollection_keyCollectionKeyEnumRuleCall_1_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//typespec+=TypeSpec
		public Assignment getTypespecAssignment_1_2() { return cTypespecAssignment_1_2; }
		
		//TypeSpec
		public RuleCall getTypespecTypeSpecParserRuleCall_1_2_0() { return cTypespecTypeSpecParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//'Dict' '(' typespec+=TypeSpec','typespec+=TypeSpec   ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'Dict'
		public Keyword getDictKeyword_2_0() { return cDictKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//typespec+=TypeSpec
		public Assignment getTypespecAssignment_2_2() { return cTypespecAssignment_2_2; }
		
		//TypeSpec
		public RuleCall getTypespecTypeSpecParserRuleCall_2_2_0() { return cTypespecTypeSpecParserRuleCall_2_2_0; }
		
		//','
		public Keyword getCommaKeyword_2_3() { return cCommaKeyword_2_3; }
		
		//typespec+=TypeSpec
		public Assignment getTypespecAssignment_2_4() { return cTypespecAssignment_2_4; }
		
		//TypeSpec
		public RuleCall getTypespecTypeSpecParserRuleCall_2_4_0() { return cTypespecTypeSpecParserRuleCall_2_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_5() { return cRightParenthesisKeyword_2_5; }
		
		//'Tuple' '('declarator_list=DeclaratorList')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'Tuple'
		public Keyword getTupleKeyword_3_0() { return cTupleKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//declarator_list=DeclaratorList
		public Assignment getDeclarator_listAssignment_3_2() { return cDeclarator_listAssignment_3_2; }
		
		//DeclaratorList
		public RuleCall getDeclarator_listDeclaratorListParserRuleCall_3_2_0() { return cDeclarator_listDeclaratorListParserRuleCall_3_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
	}
	public class DeclaratorListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.DeclaratorList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclaratorListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeclaratorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclaratorDeclaratorParserRuleCall_1_0 = (RuleCall)cDeclaratorAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDeclaratorAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDeclaratorDeclaratorParserRuleCall_2_1_0 = (RuleCall)cDeclaratorAssignment_2_1.eContents().get(0);
		
		//DeclaratorList returns DeclaratorList:
		//    {DeclaratorList}
		//          declarator+=Declarator ( "," declarator+=Declarator)*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{DeclaratorList}
		//      declarator+=Declarator ( "," declarator+=Declarator)*
		public Group getGroup() { return cGroup; }
		
		//{DeclaratorList}
		public Action getDeclaratorListAction_0() { return cDeclaratorListAction_0; }
		
		//declarator+=Declarator
		public Assignment getDeclaratorAssignment_1() { return cDeclaratorAssignment_1; }
		
		//Declarator
		public RuleCall getDeclaratorDeclaratorParserRuleCall_1_0() { return cDeclaratorDeclaratorParserRuleCall_1_0; }
		
		//( "," declarator+=Declarator)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//declarator+=Declarator
		public Assignment getDeclaratorAssignment_2_1() { return cDeclaratorAssignment_2_1; }
		
		//Declarator
		public RuleCall getDeclaratorDeclaratorParserRuleCall_2_1_0() { return cDeclaratorDeclaratorParserRuleCall_2_1_0; }
	}
	public class HelperHeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.HelperHeader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHelper_infoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHelper_infoHelperInfoParserRuleCall_0_0 = (RuleCall)cHelper_infoAssignment_0.eContents().get(0);
		private final Assignment cScope_identifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cScope_identifierScopedIdentifierParserRuleCall_1_0 = (RuleCall)cScope_identifierAssignment_1.eContents().get(0);
		private final Assignment cComplete_signatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComplete_signatureCompleteSignatureParserRuleCall_2_0 = (RuleCall)cComplete_signatureAssignment_2.eContents().get(0);
		
		//HelperHeader returns HelperHeader:
		//         helper_info=HelperInfo
		//         scope_identifier=ScopedIdentifier
		//         complete_signature=CompleteSignature
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//helper_info=HelperInfo
		//scope_identifier=ScopedIdentifier
		//complete_signature=CompleteSignature
		public Group getGroup() { return cGroup; }
		
		//helper_info=HelperInfo
		public Assignment getHelper_infoAssignment_0() { return cHelper_infoAssignment_0; }
		
		//HelperInfo
		public RuleCall getHelper_infoHelperInfoParserRuleCall_0_0() { return cHelper_infoHelperInfoParserRuleCall_0_0; }
		
		//scope_identifier=ScopedIdentifier
		public Assignment getScope_identifierAssignment_1() { return cScope_identifierAssignment_1; }
		
		//ScopedIdentifier
		public RuleCall getScope_identifierScopedIdentifierParserRuleCall_1_0() { return cScope_identifierScopedIdentifierParserRuleCall_1_0; }
		
		//complete_signature=CompleteSignature
		public Assignment getComplete_signatureAssignment_2() { return cComplete_signatureAssignment_2; }
		
		//CompleteSignature
		public RuleCall getComplete_signatureCompleteSignatureParserRuleCall_2_0() { return cComplete_signatureCompleteSignatureParserRuleCall_2_0; }
	}
	public class MappingBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.MappingBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMappingBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cInitKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cInitSectionAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cInitSectionExpressionGOParserRuleCall_1_2_0_0 = (RuleCall)cInitSectionAssignment_1_2_0.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cGroup_1_2.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final Assignment cInitSectionAssignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final RuleCall cInitSectionExpressionGOParserRuleCall_1_2_1_1_0 = (RuleCall)cInitSectionAssignment_1_2_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cPopulation_sectionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPopulation_sectionPopulationSectionParserRuleCall_2_0 = (RuleCall)cPopulation_sectionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEndKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Assignment cEndSectionAssignment_3_2_0 = (Assignment)cGroup_3_2.eContents().get(0);
		private final RuleCall cEndSectionExpressionGOParserRuleCall_3_2_0_0 = (RuleCall)cEndSectionAssignment_3_2_0.eContents().get(0);
		private final Group cGroup_3_2_1 = (Group)cGroup_3_2.eContents().get(1);
		private final Keyword cSemicolonKeyword_3_2_1_0 = (Keyword)cGroup_3_2_1.eContents().get(0);
		private final Assignment cEndSectionAssignment_3_2_1_1 = (Assignment)cGroup_3_2_1.eContents().get(1);
		private final RuleCall cEndSectionExpressionGOParserRuleCall_3_2_1_1_0 = (RuleCall)cEndSectionAssignment_3_2_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2_2 = (Keyword)cGroup_3_2.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//MappingBody returns MappingBody:
		//    {MappingBody}
		//          ('init' '{'(initSection+=ExpressionGO ( ";" initSection+=ExpressionGO)*   (';')?)?'}')?
		//        ( population_section=PopulationSection)?
		//          ('end' '{'(endSection+=ExpressionGO ( ";" endSection+=ExpressionGO)*   (';')?)?'}')?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{MappingBody}
		//      ('init' '{'(initSection+=ExpressionGO ( ";" initSection+=ExpressionGO)*   (';')?)?'}')?
		//    ( population_section=PopulationSection)?
		//      ('end' '{'(endSection+=ExpressionGO ( ";" endSection+=ExpressionGO)*   (';')?)?'}')?
		public Group getGroup() { return cGroup; }
		
		//{MappingBody}
		public Action getMappingBodyAction_0() { return cMappingBodyAction_0; }
		
		//('init' '{'(initSection+=ExpressionGO ( ";" initSection+=ExpressionGO)*   (';')?)?'}')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'init'
		public Keyword getInitKeyword_1_0() { return cInitKeyword_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }
		
		//(initSection+=ExpressionGO ( ";" initSection+=ExpressionGO)*   (';')?)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//initSection+=ExpressionGO
		public Assignment getInitSectionAssignment_1_2_0() { return cInitSectionAssignment_1_2_0; }
		
		//ExpressionGO
		public RuleCall getInitSectionExpressionGOParserRuleCall_1_2_0_0() { return cInitSectionExpressionGOParserRuleCall_1_2_0_0; }
		
		//( ";" initSection+=ExpressionGO)*
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }
		
		//";"
		public Keyword getSemicolonKeyword_1_2_1_0() { return cSemicolonKeyword_1_2_1_0; }
		
		//initSection+=ExpressionGO
		public Assignment getInitSectionAssignment_1_2_1_1() { return cInitSectionAssignment_1_2_1_1; }
		
		//ExpressionGO
		public RuleCall getInitSectionExpressionGOParserRuleCall_1_2_1_1_0() { return cInitSectionExpressionGOParserRuleCall_1_2_1_1_0; }
		
		//(';')?
		public Keyword getSemicolonKeyword_1_2_2() { return cSemicolonKeyword_1_2_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
		
		//( population_section=PopulationSection)?
		public Assignment getPopulation_sectionAssignment_2() { return cPopulation_sectionAssignment_2; }
		
		//PopulationSection
		public RuleCall getPopulation_sectionPopulationSectionParserRuleCall_2_0() { return cPopulation_sectionPopulationSectionParserRuleCall_2_0; }
		
		//('end' '{'(endSection+=ExpressionGO ( ";" endSection+=ExpressionGO)*   (';')?)?'}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'end'
		public Keyword getEndKeyword_3_0() { return cEndKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//(endSection+=ExpressionGO ( ";" endSection+=ExpressionGO)*   (';')?)?
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//endSection+=ExpressionGO
		public Assignment getEndSectionAssignment_3_2_0() { return cEndSectionAssignment_3_2_0; }
		
		//ExpressionGO
		public RuleCall getEndSectionExpressionGOParserRuleCall_3_2_0_0() { return cEndSectionExpressionGOParserRuleCall_3_2_0_0; }
		
		//( ";" endSection+=ExpressionGO)*
		public Group getGroup_3_2_1() { return cGroup_3_2_1; }
		
		//";"
		public Keyword getSemicolonKeyword_3_2_1_0() { return cSemicolonKeyword_3_2_1_0; }
		
		//endSection+=ExpressionGO
		public Assignment getEndSectionAssignment_3_2_1_1() { return cEndSectionAssignment_3_2_1_1; }
		
		//ExpressionGO
		public RuleCall getEndSectionExpressionGOParserRuleCall_3_2_1_1_0() { return cEndSectionExpressionGOParserRuleCall_3_2_1_1_0; }
		
		//(';')?
		public Keyword getSemicolonKeyword_3_2_2() { return cSemicolonKeyword_3_2_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}
	public class PopulationSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.PopulationSection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPopulationSectionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cExpression_listAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpression_listExpressionListParserRuleCall_0_1_0 = (RuleCall)cExpression_listAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cPopulationKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpression_blockAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpression_blockExpressionBlockParserRuleCall_1_1_0 = (RuleCall)cExpression_blockAssignment_1_1.eContents().get(0);
		
		//PopulationSection returns PopulationSection:
		//    {PopulationSection}
		//         expression_list=ExpressionList |
		//         'population' expression_block=ExpressionBlock
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{PopulationSection}
		//     expression_list=ExpressionList |
		//     'population' expression_block=ExpressionBlock
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{PopulationSection}
		//     expression_list=ExpressionList
		public Group getGroup_0() { return cGroup_0; }
		
		//{PopulationSection}
		public Action getPopulationSectionAction_0_0() { return cPopulationSectionAction_0_0; }
		
		//expression_list=ExpressionList
		public Assignment getExpression_listAssignment_0_1() { return cExpression_listAssignment_0_1; }
		
		//ExpressionList
		public RuleCall getExpression_listExpressionListParserRuleCall_0_1_0() { return cExpression_listExpressionListParserRuleCall_0_1_0; }
		
		//'population' expression_block=ExpressionBlock
		public Group getGroup_1() { return cGroup_1; }
		
		//'population'
		public Keyword getPopulationKeyword_1_0() { return cPopulationKeyword_1_0; }
		
		//expression_block=ExpressionBlock
		public Assignment getExpression_blockAssignment_1_1() { return cExpression_blockAssignment_1_1; }
		
		//ExpressionBlock
		public RuleCall getExpression_blockExpressionBlockParserRuleCall_1_1_0() { return cExpression_blockExpressionBlockParserRuleCall_1_1_0; }
	}
	public class HelperInfoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.HelperInfo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHelperInfoAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cQualifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQualifierGeneralQualifierEnumRuleCall_1_0 = (RuleCall)cQualifierAssignment_1.eContents().get(0);
		private final Assignment cHelper_kindAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHelper_kindHelperKindEnumRuleCall_2_0 = (RuleCall)cHelper_kindAssignment_2.eContents().get(0);
		
		//HelperInfo returns HelperInfo:
		//    {HelperInfo}
		//          (qualifier+=GeneralQualifier)*
		//         helper_kind=HelperKind
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{HelperInfo}
		//      (qualifier+=GeneralQualifier)*
		//     helper_kind=HelperKind
		public Group getGroup() { return cGroup; }
		
		//{HelperInfo}
		public Action getHelperInfoAction_0() { return cHelperInfoAction_0; }
		
		//(qualifier+=GeneralQualifier)*
		public Assignment getQualifierAssignment_1() { return cQualifierAssignment_1; }
		
		//GeneralQualifier
		public RuleCall getQualifierGeneralQualifierEnumRuleCall_1_0() { return cQualifierGeneralQualifierEnumRuleCall_1_0; }
		
		//helper_kind=HelperKind
		public Assignment getHelper_kindAssignment_2() { return cHelper_kindAssignment_2; }
		
		//HelperKind
		public RuleCall getHelper_kindHelperKindEnumRuleCall_2_0() { return cHelper_kindHelperKindEnumRuleCall_2_0; }
	}
	public class CompleteSignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.CompleteSignature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSimple_signatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSimple_signatureSimpleSignatureParserRuleCall_0_0 = (RuleCall)cSimple_signatureAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParam_listAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParam_listParamListParserRuleCall_1_1_0 = (RuleCall)cParam_listAssignment_1_1.eContents().get(0);
		
		//CompleteSignature returns CompleteSignature:
		//         simple_signature=SimpleSignature
		//        (':' param_list=ParamList)?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		// simple_signature=SimpleSignature
		//(':' param_list=ParamList)?
		public Group getGroup() { return cGroup; }
		
		//simple_signature=SimpleSignature
		public Assignment getSimple_signatureAssignment_0() { return cSimple_signatureAssignment_0; }
		
		//SimpleSignature
		public RuleCall getSimple_signatureSimpleSignatureParserRuleCall_0_0() { return cSimple_signatureSimpleSignatureParserRuleCall_0_0; }
		
		//(':' param_list=ParamList)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//param_list=ParamList
		public Assignment getParam_listAssignment_1_1() { return cParam_listAssignment_1_1; }
		
		//ParamList
		public RuleCall getParam_listParamListParserRuleCall_1_1_0() { return cParam_listParamListParserRuleCall_1_1_0; }
	}
	public class SimpleSignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.SimpleSignature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSimpleSignatureAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParam_listAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParam_listParamListParserRuleCall_2_0 = (RuleCall)cParam_listAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SimpleSignature returns SimpleSignature:
		//    {SimpleSignature}
		//    '('
		//        ( param_list=ParamList)?
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{SimpleSignature}
		//'('
		//    ( param_list=ParamList)?
		//')'
		public Group getGroup() { return cGroup; }
		
		//{SimpleSignature}
		public Action getSimpleSignatureAction_0() { return cSimpleSignatureAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//( param_list=ParamList)?
		public Assignment getParam_listAssignment_2() { return cParam_listAssignment_2; }
		
		//ParamList
		public RuleCall getParam_listParamListParserRuleCall_2_0() { return cParam_listParamListParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ParamListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.ParamList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParamListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cParamAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamVarParameterParserRuleCall_1_0 = (RuleCall)cParamAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamVarParameterParserRuleCall_2_1_0 = (RuleCall)cParamAssignment_2_1.eContents().get(0);
		
		//ParamList returns ParamList:
		//    {ParamList}
		//          param+=VarParameter ( "," param+=VarParameter)*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{ParamList}
		//      param+=VarParameter ( "," param+=VarParameter)*
		public Group getGroup() { return cGroup; }
		
		//{ParamList}
		public Action getParamListAction_0() { return cParamListAction_0; }
		
		//param+=VarParameter
		public Assignment getParamAssignment_1() { return cParamAssignment_1; }
		
		//VarParameter
		public RuleCall getParamVarParameterParserRuleCall_1_0() { return cParamVarParameterParserRuleCall_1_0; }
		
		//( "," param+=VarParameter)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//param+=VarParameter
		public Assignment getParamAssignment_2_1() { return cParamAssignment_2_1; }
		
		//VarParameter
		public RuleCall getParamVarParameterParserRuleCall_2_1_0() { return cParamVarParameterParserRuleCall_2_1_0; }
	}
	public class TransformationHeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.TransformationHeader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQualifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQualifierGeneralQualifierEnumRuleCall_0_0 = (RuleCall)cQualifierAssignment_0.eContents().get(0);
		private final Keyword cTransformationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cTransformation_signatureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTransformation_signatureSimpleSignatureParserRuleCall_3_0 = (RuleCall)cTransformation_signatureAssignment_3.eContents().get(0);
		private final Assignment cTransformation_usage_refineAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTransformation_usage_refineTransformationUsageRefineParserRuleCall_4_0 = (RuleCall)cTransformation_usage_refineAssignment_4.eContents().get(0);
		
		//TransformationHeader returns TransformationHeader:
		//          (qualifier+=GeneralQualifier)*
		//    'transformation'
		//    name=ID
		//         transformation_signature=SimpleSignature
		//        ( transformation_usage_refine=TransformationUsageRefine)?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//      (qualifier+=GeneralQualifier)*
		//'transformation'
		//name=ID
		//     transformation_signature=SimpleSignature
		//    ( transformation_usage_refine=TransformationUsageRefine)?
		public Group getGroup() { return cGroup; }
		
		//(qualifier+=GeneralQualifier)*
		public Assignment getQualifierAssignment_0() { return cQualifierAssignment_0; }
		
		//GeneralQualifier
		public RuleCall getQualifierGeneralQualifierEnumRuleCall_0_0() { return cQualifierGeneralQualifierEnumRuleCall_0_0; }
		
		//'transformation'
		public Keyword getTransformationKeyword_1() { return cTransformationKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//transformation_signature=SimpleSignature
		public Assignment getTransformation_signatureAssignment_3() { return cTransformation_signatureAssignment_3; }
		
		//SimpleSignature
		public RuleCall getTransformation_signatureSimpleSignatureParserRuleCall_3_0() { return cTransformation_signatureSimpleSignatureParserRuleCall_3_0; }
		
		//( transformation_usage_refine=TransformationUsageRefine)?
		public Assignment getTransformation_usage_refineAssignment_4() { return cTransformation_usage_refineAssignment_4; }
		
		//TransformationUsageRefine
		public RuleCall getTransformation_usage_refineTransformationUsageRefineParserRuleCall_4_0() { return cTransformation_usage_refineTransformationUsageRefineParserRuleCall_4_0; }
	}
	public class TransformationUsageRefineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.TransformationUsageRefine");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTransformationUsageRefineAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cModule_usageAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cModule_usageModuleUsageGOParserRuleCall_0_1_0 = (RuleCall)cModule_usageAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cRefinesKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTransformation_refineAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTransformation_refineModuleRefGOParserRuleCall_1_1_0 = (RuleCall)cTransformation_refineAssignment_1_1.eContents().get(0);
		
		//TransformationUsageRefine returns TransformationUsageRefine:
		//    {TransformationUsageRefine}
		//         module_usage=ModuleUsageGO |
		//        'refines'  transformation_refine=ModuleRefGO
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{TransformationUsageRefine}
		//     module_usage=ModuleUsageGO |
		//    'refines'  transformation_refine=ModuleRefGO
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{TransformationUsageRefine}
		//     module_usage=ModuleUsageGO
		public Group getGroup_0() { return cGroup_0; }
		
		//{TransformationUsageRefine}
		public Action getTransformationUsageRefineAction_0_0() { return cTransformationUsageRefineAction_0_0; }
		
		//module_usage=ModuleUsageGO
		public Assignment getModule_usageAssignment_0_1() { return cModule_usageAssignment_0_1; }
		
		//ModuleUsageGO
		public RuleCall getModule_usageModuleUsageGOParserRuleCall_0_1_0() { return cModule_usageModuleUsageGOParserRuleCall_0_1_0; }
		
		//'refines'  transformation_refine=ModuleRefGO
		public Group getGroup_1() { return cGroup_1; }
		
		//'refines'
		public Keyword getRefinesKeyword_1_0() { return cRefinesKeyword_1_0; }
		
		//transformation_refine=ModuleRefGO
		public Assignment getTransformation_refineAssignment_1_1() { return cTransformation_refineAssignment_1_1; }
		
		//ModuleRefGO
		public RuleCall getTransformation_refineModuleRefGOParserRuleCall_1_1_0() { return cTransformation_refineModuleRefGOParserRuleCall_1_1_0; }
	}
	public class ModuleUsageGOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.ModuleUsageGO");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cModuleUsageGOAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cAccess_usageAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAccess_usageAccessUsageParserRuleCall_0_1_0 = (RuleCall)cAccess_usageAssignment_0_1.eContents().get(0);
		private final Assignment cExtends_usageAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExtends_usageExtendsUsageParserRuleCall_1_0 = (RuleCall)cExtends_usageAssignment_1.eContents().get(0);
		
		//ModuleUsageGO returns ModuleUsageGO:
		//    {ModuleUsageGO}
		//         access_usage=AccessUsage |
		//         extends_usage=ExtendsUsage
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{ModuleUsageGO}
		//     access_usage=AccessUsage |
		//     extends_usage=ExtendsUsage
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ModuleUsageGO}
		//     access_usage=AccessUsage
		public Group getGroup_0() { return cGroup_0; }
		
		//{ModuleUsageGO}
		public Action getModuleUsageGOAction_0_0() { return cModuleUsageGOAction_0_0; }
		
		//access_usage=AccessUsage
		public Assignment getAccess_usageAssignment_0_1() { return cAccess_usageAssignment_0_1; }
		
		//AccessUsage
		public RuleCall getAccess_usageAccessUsageParserRuleCall_0_1_0() { return cAccess_usageAccessUsageParserRuleCall_0_1_0; }
		
		//extends_usage=ExtendsUsage
		public Assignment getExtends_usageAssignment_1() { return cExtends_usageAssignment_1; }
		
		//ExtendsUsage
		public RuleCall getExtends_usageExtendsUsageParserRuleCall_1_0() { return cExtends_usageExtendsUsageParserRuleCall_1_0; }
	}
	public class ModuleRefGOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.ModuleRefGO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cScoped_identifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cScoped_identifierScopedIdentifierParserRuleCall_0_0 = (RuleCall)cScoped_identifierAssignment_0.eContents().get(0);
		private final Assignment cSimple_signatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSimple_signatureSimpleSignatureParserRuleCall_1_0 = (RuleCall)cSimple_signatureAssignment_1.eContents().get(0);
		
		//ModuleRefGO returns ModuleRefGO:
		//         scoped_identifier=ScopedIdentifier
		//        ( simple_signature=SimpleSignature)?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		// scoped_identifier=ScopedIdentifier
		//( simple_signature=SimpleSignature)?
		public Group getGroup() { return cGroup; }
		
		//scoped_identifier=ScopedIdentifier
		public Assignment getScoped_identifierAssignment_0() { return cScoped_identifierAssignment_0; }
		
		//ScopedIdentifier
		public RuleCall getScoped_identifierScopedIdentifierParserRuleCall_0_0() { return cScoped_identifierScopedIdentifierParserRuleCall_0_0; }
		
		//( simple_signature=SimpleSignature)?
		public Assignment getSimple_signatureAssignment_1() { return cSimple_signatureAssignment_1; }
		
		//SimpleSignature
		public RuleCall getSimple_signatureSimpleSignatureParserRuleCall_1_0() { return cSimple_signatureSimpleSignatureParserRuleCall_1_0; }
	}
	public class AccessUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.AccessUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAccessUsageAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAccessKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModule_kindAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModule_kindModuleKindEnumRuleCall_2_0 = (RuleCall)cModule_kindAssignment_2.eContents().get(0);
		private final Assignment cModuleref_listAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModuleref_listModuleRefGOParserRuleCall_3_0 = (RuleCall)cModuleref_listAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cModuleref_listAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cModuleref_listModuleRefGOParserRuleCall_4_1_0 = (RuleCall)cModuleref_listAssignment_4_1.eContents().get(0);
		
		//AccessUsage returns AccessUsage:
		//    {AccessUsage}
		//    'access'
		//        ( module_kind=ModuleKind)?
		//          moduleref_list+=ModuleRefGO ( "," moduleref_list+=ModuleRefGO)*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{AccessUsage}
		//'access'
		//    ( module_kind=ModuleKind)?
		//      moduleref_list+=ModuleRefGO ( "," moduleref_list+=ModuleRefGO)*
		public Group getGroup() { return cGroup; }
		
		//{AccessUsage}
		public Action getAccessUsageAction_0() { return cAccessUsageAction_0; }
		
		//'access'
		public Keyword getAccessKeyword_1() { return cAccessKeyword_1; }
		
		//( module_kind=ModuleKind)?
		public Assignment getModule_kindAssignment_2() { return cModule_kindAssignment_2; }
		
		//ModuleKind
		public RuleCall getModule_kindModuleKindEnumRuleCall_2_0() { return cModule_kindModuleKindEnumRuleCall_2_0; }
		
		//moduleref_list+=ModuleRefGO
		public Assignment getModuleref_listAssignment_3() { return cModuleref_listAssignment_3; }
		
		//ModuleRefGO
		public RuleCall getModuleref_listModuleRefGOParserRuleCall_3_0() { return cModuleref_listModuleRefGOParserRuleCall_3_0; }
		
		//( "," moduleref_list+=ModuleRefGO)*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//moduleref_list+=ModuleRefGO
		public Assignment getModuleref_listAssignment_4_1() { return cModuleref_listAssignment_4_1; }
		
		//ModuleRefGO
		public RuleCall getModuleref_listModuleRefGOParserRuleCall_4_1_0() { return cModuleref_listModuleRefGOParserRuleCall_4_1_0; }
	}
	public class ExtendsUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.ExtendsUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExtendsUsageAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExtendsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModule_kindAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModule_kindModuleKindEnumRuleCall_2_0 = (RuleCall)cModule_kindAssignment_2.eContents().get(0);
		private final Assignment cModuleref_listAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModuleref_listModuleRefGOParserRuleCall_3_0 = (RuleCall)cModuleref_listAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cModuleref_listAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cModuleref_listModuleRefGOParserRuleCall_4_1_0 = (RuleCall)cModuleref_listAssignment_4_1.eContents().get(0);
		
		//ExtendsUsage returns ExtendsUsage:
		//    {ExtendsUsage}
		//    'extends'
		//        ( module_kind=ModuleKind)?
		//          moduleref_list+=ModuleRefGO ( "," moduleref_list+=ModuleRefGO)*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExtendsUsage}
		//'extends'
		//    ( module_kind=ModuleKind)?
		//      moduleref_list+=ModuleRefGO ( "," moduleref_list+=ModuleRefGO)*
		public Group getGroup() { return cGroup; }
		
		//{ExtendsUsage}
		public Action getExtendsUsageAction_0() { return cExtendsUsageAction_0; }
		
		//'extends'
		public Keyword getExtendsKeyword_1() { return cExtendsKeyword_1; }
		
		//( module_kind=ModuleKind)?
		public Assignment getModule_kindAssignment_2() { return cModule_kindAssignment_2; }
		
		//ModuleKind
		public RuleCall getModule_kindModuleKindEnumRuleCall_2_0() { return cModule_kindModuleKindEnumRuleCall_2_0; }
		
		//moduleref_list+=ModuleRefGO
		public Assignment getModuleref_listAssignment_3() { return cModuleref_listAssignment_3; }
		
		//ModuleRefGO
		public RuleCall getModuleref_listModuleRefGOParserRuleCall_3_0() { return cModuleref_listModuleRefGOParserRuleCall_3_0; }
		
		//( "," moduleref_list+=ModuleRefGO)*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//moduleref_list+=ModuleRefGO
		public Assignment getModuleref_listAssignment_4_1() { return cModuleref_listAssignment_4_1; }
		
		//ModuleRefGO
		public RuleCall getModuleref_listModuleRefGOParserRuleCall_4_1_0() { return cModuleref_listModuleRefGOParserRuleCall_4_1_0; }
	}
	public class MappingFullHeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.MappingFullHeader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMapping_headerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMapping_headerMappingHeaderParserRuleCall_0_0 = (RuleCall)cMapping_headerAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cWhenKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cWhenAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cWhenExpressionBlockParserRuleCall_1_1_0 = (RuleCall)cWhenAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWhereKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cWhereAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cWhereExpressionBlockParserRuleCall_2_1_0 = (RuleCall)cWhereAssignment_2_1.eContents().get(0);
		
		//MappingFullHeader returns MappingFullHeader:
		//         mapping_header=MappingHeader
		//        ('when' when=ExpressionBlock)?
		//        ('where' where=ExpressionBlock)?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		// mapping_header=MappingHeader
		//('when' when=ExpressionBlock)?
		//('where' where=ExpressionBlock)?
		public Group getGroup() { return cGroup; }
		
		//mapping_header=MappingHeader
		public Assignment getMapping_headerAssignment_0() { return cMapping_headerAssignment_0; }
		
		//MappingHeader
		public RuleCall getMapping_headerMappingHeaderParserRuleCall_0_0() { return cMapping_headerMappingHeaderParserRuleCall_0_0; }
		
		//('when' when=ExpressionBlock)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'when'
		public Keyword getWhenKeyword_1_0() { return cWhenKeyword_1_0; }
		
		//when=ExpressionBlock
		public Assignment getWhenAssignment_1_1() { return cWhenAssignment_1_1; }
		
		//ExpressionBlock
		public RuleCall getWhenExpressionBlockParserRuleCall_1_1_0() { return cWhenExpressionBlockParserRuleCall_1_1_0; }
		
		//('where' where=ExpressionBlock)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'where'
		public Keyword getWhereKeyword_2_0() { return cWhereKeyword_2_0; }
		
		//where=ExpressionBlock
		public Assignment getWhereAssignment_2_1() { return cWhereAssignment_2_1; }
		
		//ExpressionBlock
		public RuleCall getWhereExpressionBlockParserRuleCall_2_1_0() { return cWhereExpressionBlockParserRuleCall_2_1_0; }
	}
	public class MappingHeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.MappingHeader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQualifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQualifierGeneralQualifierEnumRuleCall_0_0 = (RuleCall)cQualifierAssignment_0.eContents().get(0);
		private final Keyword cMappingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParam_directionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParam_directionDirectionKindEnumRuleCall_2_0 = (RuleCall)cParam_directionAssignment_2.eContents().get(0);
		private final Assignment cScoped_identifierAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScoped_identifierScopedIdentifierParserRuleCall_3_0 = (RuleCall)cScoped_identifierAssignment_3.eContents().get(0);
		private final Assignment cComplete_signatureAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cComplete_signatureCompleteSignatureParserRuleCall_4_0 = (RuleCall)cComplete_signatureAssignment_4.eContents().get(0);
		private final Assignment cMapping_extraAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMapping_extraMappingExtraParserRuleCall_5_0 = (RuleCall)cMapping_extraAssignment_5.eContents().get(0);
		
		//MappingHeader returns MappingHeader:
		//          (qualifier+=GeneralQualifier)*
		//    'mapping'
		//         (param_direction=DirectionKind)?
		//         scoped_identifier=ScopedIdentifier
		//         complete_signature=CompleteSignature
		//          (mapping_extra+=MappingExtra)*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//      (qualifier+=GeneralQualifier)*
		//'mapping'
		//     (param_direction=DirectionKind)?
		//     scoped_identifier=ScopedIdentifier
		//     complete_signature=CompleteSignature
		//      (mapping_extra+=MappingExtra)*
		public Group getGroup() { return cGroup; }
		
		//(qualifier+=GeneralQualifier)*
		public Assignment getQualifierAssignment_0() { return cQualifierAssignment_0; }
		
		//GeneralQualifier
		public RuleCall getQualifierGeneralQualifierEnumRuleCall_0_0() { return cQualifierGeneralQualifierEnumRuleCall_0_0; }
		
		//'mapping'
		public Keyword getMappingKeyword_1() { return cMappingKeyword_1; }
		
		//(param_direction=DirectionKind)?
		public Assignment getParam_directionAssignment_2() { return cParam_directionAssignment_2; }
		
		//DirectionKind
		public RuleCall getParam_directionDirectionKindEnumRuleCall_2_0() { return cParam_directionDirectionKindEnumRuleCall_2_0; }
		
		//scoped_identifier=ScopedIdentifier
		public Assignment getScoped_identifierAssignment_3() { return cScoped_identifierAssignment_3; }
		
		//ScopedIdentifier
		public RuleCall getScoped_identifierScopedIdentifierParserRuleCall_3_0() { return cScoped_identifierScopedIdentifierParserRuleCall_3_0; }
		
		//complete_signature=CompleteSignature
		public Assignment getComplete_signatureAssignment_4() { return cComplete_signatureAssignment_4; }
		
		//CompleteSignature
		public RuleCall getComplete_signatureCompleteSignatureParserRuleCall_4_0() { return cComplete_signatureCompleteSignatureParserRuleCall_4_0; }
		
		//(mapping_extra+=MappingExtra)*
		public Assignment getMapping_extraAssignment_5() { return cMapping_extraAssignment_5; }
		
		//MappingExtra
		public RuleCall getMapping_extraMappingExtraParserRuleCall_5_0() { return cMapping_extraMappingExtraParserRuleCall_5_0; }
	}
	public class MappingExtraElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.MappingExtra");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cMappingExtraAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cMapping_extensionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cMapping_extensionMappingExtensionParserRuleCall_0_1_0 = (RuleCall)cMapping_extensionAssignment_0_1.eContents().get(0);
		private final Assignment cMapping_refinementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cMapping_refinementMappingRefinementParserRuleCall_1_0 = (RuleCall)cMapping_refinementAssignment_1.eContents().get(0);
		
		//MappingExtra returns MappingExtra:
		//    {MappingExtra}
		//         mapping_extension=MappingExtension |
		//         mapping_refinement=MappingRefinement
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{MappingExtra}
		//     mapping_extension=MappingExtension |
		//     mapping_refinement=MappingRefinement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{MappingExtra}
		//     mapping_extension=MappingExtension
		public Group getGroup_0() { return cGroup_0; }
		
		//{MappingExtra}
		public Action getMappingExtraAction_0_0() { return cMappingExtraAction_0_0; }
		
		//mapping_extension=MappingExtension
		public Assignment getMapping_extensionAssignment_0_1() { return cMapping_extensionAssignment_0_1; }
		
		//MappingExtension
		public RuleCall getMapping_extensionMappingExtensionParserRuleCall_0_1_0() { return cMapping_extensionMappingExtensionParserRuleCall_0_1_0; }
		
		//mapping_refinement=MappingRefinement
		public Assignment getMapping_refinementAssignment_1() { return cMapping_refinementAssignment_1; }
		
		//MappingRefinement
		public RuleCall getMapping_refinementMappingRefinementParserRuleCall_1_0() { return cMapping_refinementMappingRefinementParserRuleCall_1_0; }
	}
	public class MappingExtensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.MappingExtension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMapping_extension_keyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMapping_extension_keyMappingExtensionKeyEnumRuleCall_0_0 = (RuleCall)cMapping_extension_keyAssignment_0.eContents().get(0);
		private final Assignment cScoped_identifier_listAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cScoped_identifier_listScopedIdentifierListParserRuleCall_1_0 = (RuleCall)cScoped_identifier_listAssignment_1.eContents().get(0);
		
		//MappingExtension returns MappingExtension:
		//         mapping_extension_key=MappingExtensionKey
		//         scoped_identifier_list=ScopedIdentifierList
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//mapping_extension_key=MappingExtensionKey
		//scoped_identifier_list=ScopedIdentifierList
		public Group getGroup() { return cGroup; }
		
		//mapping_extension_key=MappingExtensionKey
		public Assignment getMapping_extension_keyAssignment_0() { return cMapping_extension_keyAssignment_0; }
		
		//MappingExtensionKey
		public RuleCall getMapping_extension_keyMappingExtensionKeyEnumRuleCall_0_0() { return cMapping_extension_keyMappingExtensionKeyEnumRuleCall_0_0; }
		
		//scoped_identifier_list=ScopedIdentifierList
		public Assignment getScoped_identifier_listAssignment_1() { return cScoped_identifier_listAssignment_1; }
		
		//ScopedIdentifierList
		public RuleCall getScoped_identifier_listScopedIdentifierListParserRuleCall_1_0() { return cScoped_identifier_listScopedIdentifierListParserRuleCall_1_0; }
	}
	public class MappingRefinementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.MappingRefinement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefinesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cScoped_identifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cScoped_identifierScopedIdentifierParserRuleCall_1_0 = (RuleCall)cScoped_identifierAssignment_1.eContents().get(0);
		
		//MappingRefinement returns MappingRefinement:
		//        'refines' scoped_identifier=ScopedIdentifier
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'refines' scoped_identifier=ScopedIdentifier
		public Group getGroup() { return cGroup; }
		
		//'refines'
		public Keyword getRefinesKeyword_0() { return cRefinesKeyword_0; }
		
		//scoped_identifier=ScopedIdentifier
		public Assignment getScoped_identifierAssignment_1() { return cScoped_identifierAssignment_1; }
		
		//ScopedIdentifier
		public RuleCall getScoped_identifierScopedIdentifierParserRuleCall_1_0() { return cScoped_identifierScopedIdentifierParserRuleCall_1_0; }
	}
	public class ScopedIdentifierListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.ScopedIdentifierList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cScopedIdentifierListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cScoped_identifier_listAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cScoped_identifier_listScopedIdentifierParserRuleCall_1_0 = (RuleCall)cScoped_identifier_listAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cScoped_identifier_listAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cScoped_identifier_listScopedIdentifierParserRuleCall_2_1_0 = (RuleCall)cScoped_identifier_listAssignment_2_1.eContents().get(0);
		
		//ScopedIdentifierList returns ScopedIdentifierList:
		//    {ScopedIdentifierList}
		//          scoped_identifier_list+=ScopedIdentifier ( "," scoped_identifier_list+=ScopedIdentifier)*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{ScopedIdentifierList}
		//      scoped_identifier_list+=ScopedIdentifier ( "," scoped_identifier_list+=ScopedIdentifier)*
		public Group getGroup() { return cGroup; }
		
		//{ScopedIdentifierList}
		public Action getScopedIdentifierListAction_0() { return cScopedIdentifierListAction_0; }
		
		//scoped_identifier_list+=ScopedIdentifier
		public Assignment getScoped_identifier_listAssignment_1() { return cScoped_identifier_listAssignment_1; }
		
		//ScopedIdentifier
		public RuleCall getScoped_identifier_listScopedIdentifierParserRuleCall_1_0() { return cScoped_identifier_listScopedIdentifierParserRuleCall_1_0; }
		
		//( "," scoped_identifier_list+=ScopedIdentifier)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//scoped_identifier_list+=ScopedIdentifier
		public Assignment getScoped_identifier_listAssignment_2_1() { return cScoped_identifier_listAssignment_2_1; }
		
		//ScopedIdentifier
		public RuleCall getScoped_identifier_listScopedIdentifierParserRuleCall_2_1_0() { return cScoped_identifier_listScopedIdentifierParserRuleCall_2_1_0; }
	}
	public class ConstructorHeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.ConstructorHeader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQualifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQualifierGeneralQualifierEnumRuleCall_0_0 = (RuleCall)cQualifierAssignment_0.eContents().get(0);
		private final Keyword cConstructorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cScoped_identifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cScoped_identifierScopedIdentifierParserRuleCall_2_0 = (RuleCall)cScoped_identifierAssignment_2.eContents().get(0);
		private final Assignment cSimple_signatureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSimple_signatureSimpleSignatureParserRuleCall_3_0 = (RuleCall)cSimple_signatureAssignment_3.eContents().get(0);
		
		//ConstructorHeader returns ConstructorHeader:
		//          (qualifier+=GeneralQualifier)*
		//    'constructor'
		//         scoped_identifier=ScopedIdentifier
		//         simple_signature=SimpleSignature
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//      (qualifier+=GeneralQualifier)*
		//'constructor'
		//     scoped_identifier=ScopedIdentifier
		//     simple_signature=SimpleSignature
		public Group getGroup() { return cGroup; }
		
		//(qualifier+=GeneralQualifier)*
		public Assignment getQualifierAssignment_0() { return cQualifierAssignment_0; }
		
		//GeneralQualifier
		public RuleCall getQualifierGeneralQualifierEnumRuleCall_0_0() { return cQualifierGeneralQualifierEnumRuleCall_0_0; }
		
		//'constructor'
		public Keyword getConstructorKeyword_1() { return cConstructorKeyword_1; }
		
		//scoped_identifier=ScopedIdentifier
		public Assignment getScoped_identifierAssignment_2() { return cScoped_identifierAssignment_2; }
		
		//ScopedIdentifier
		public RuleCall getScoped_identifierScopedIdentifierParserRuleCall_2_0() { return cScoped_identifierScopedIdentifierParserRuleCall_2_0; }
		
		//simple_signature=SimpleSignature
		public Assignment getSimple_signatureAssignment_3() { return cSimple_signatureAssignment_3; }
		
		//SimpleSignature
		public RuleCall getSimple_signatureSimpleSignatureParserRuleCall_3_0() { return cSimple_signatureSimpleSignatureParserRuleCall_3_0; }
	}
	public class EntryHeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.EntryHeader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSimple_signatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSimple_signatureSimpleSignatureParserRuleCall_1_0 = (RuleCall)cSimple_signatureAssignment_1.eContents().get(0);
		
		//EntryHeader returns EntryHeader:
		//        'main' simple_signature=SimpleSignature
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'main' simple_signature=SimpleSignature
		public Group getGroup() { return cGroup; }
		
		//'main'
		public Keyword getMainKeyword_0() { return cMainKeyword_0; }
		
		//simple_signature=SimpleSignature
		public Assignment getSimple_signatureAssignment_1() { return cSimple_signatureAssignment_1; }
		
		//SimpleSignature
		public RuleCall getSimple_signatureSimpleSignatureParserRuleCall_1_0() { return cSimple_signatureSimpleSignatureParserRuleCall_1_0; }
	}
	public class LibraryHeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.LibraryHeader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLibraryHeaderAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLibraryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cLibrary_signatureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLibrary_signatureSimpleSignatureParserRuleCall_3_0 = (RuleCall)cLibrary_signatureAssignment_3.eContents().get(0);
		private final Assignment cModule_usageAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cModule_usageModuleUsageGOParserRuleCall_4_0 = (RuleCall)cModule_usageAssignment_4.eContents().get(0);
		
		//LibraryHeader returns LibraryHeader:
		//    {LibraryHeader}
		//    'library'
		//    name=ID
		//        ( library_signature=SimpleSignature)?
		//        ( module_usage=ModuleUsageGO)?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{LibraryHeader}
		//'library'
		//name=ID
		//    ( library_signature=SimpleSignature)?
		//    ( module_usage=ModuleUsageGO)?
		public Group getGroup() { return cGroup; }
		
		//{LibraryHeader}
		public Action getLibraryHeaderAction_0() { return cLibraryHeaderAction_0; }
		
		//'library'
		public Keyword getLibraryKeyword_1() { return cLibraryKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//( library_signature=SimpleSignature)?
		public Assignment getLibrary_signatureAssignment_3() { return cLibrary_signatureAssignment_3; }
		
		//SimpleSignature
		public RuleCall getLibrary_signatureSimpleSignatureParserRuleCall_3_0() { return cLibrary_signatureSimpleSignatureParserRuleCall_3_0; }
		
		//( module_usage=ModuleUsageGO)?
		public Assignment getModule_usageAssignment_4() { return cModule_usageAssignment_4; }
		
		//ModuleUsageGO
		public RuleCall getModule_usageModuleUsageGOParserRuleCall_4_0() { return cModule_usageModuleUsageGOParserRuleCall_4_0; }
	}
	public class MetaModelHeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.MetaModelHeader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cMetamodelKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cPackageKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cScoped_identifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cScoped_identifierScopedIdentifierParserRuleCall_1_0 = (RuleCall)cScoped_identifierAssignment_1.eContents().get(0);
		
		//MetaModelHeader returns MetaModelHeader:
		//    ('metamodel' | 'package')
		//         scoped_identifier=ScopedIdentifier
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//('metamodel' | 'package')
		//     scoped_identifier=ScopedIdentifier
		public Group getGroup() { return cGroup; }
		
		//('metamodel' | 'package')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'metamodel'
		public Keyword getMetamodelKeyword_0_0() { return cMetamodelKeyword_0_0; }
		
		//'package'
		public Keyword getPackageKeyword_0_1() { return cPackageKeyword_0_1; }
		
		//scoped_identifier=ScopedIdentifier
		public Assignment getScoped_identifierAssignment_1() { return cScoped_identifierAssignment_1; }
		
		//ScopedIdentifier
		public RuleCall getScoped_identifierScopedIdentifierParserRuleCall_1_0() { return cScoped_identifierScopedIdentifierParserRuleCall_1_0; }
	}
	public class MetaModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.MetaModelElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cMetaModelElementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cClassifierAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cClassifierClassifierGOParserRuleCall_0_1_0 = (RuleCall)cClassifierAssignment_0_1.eContents().get(0);
		private final Assignment cEnumerationAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cEnumerationEnumerationGOParserRuleCall_1_0 = (RuleCall)cEnumerationAssignment_1.eContents().get(0);
		private final Assignment cTagAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cTagTagGOParserRuleCall_2_0 = (RuleCall)cTagAssignment_2.eContents().get(0);
		
		//MetaModelElement returns MetaModelElement:
		//    {MetaModelElement}
		//         classifier=ClassifierGO |
		//         enumeration=EnumerationGO |
		//         tag=TagGO
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{MetaModelElement}
		//     classifier=ClassifierGO |
		//     enumeration=EnumerationGO |
		//     tag=TagGO
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{MetaModelElement}
		//     classifier=ClassifierGO
		public Group getGroup_0() { return cGroup_0; }
		
		//{MetaModelElement}
		public Action getMetaModelElementAction_0_0() { return cMetaModelElementAction_0_0; }
		
		//classifier=ClassifierGO
		public Assignment getClassifierAssignment_0_1() { return cClassifierAssignment_0_1; }
		
		//ClassifierGO
		public RuleCall getClassifierClassifierGOParserRuleCall_0_1_0() { return cClassifierClassifierGOParserRuleCall_0_1_0; }
		
		//enumeration=EnumerationGO
		public Assignment getEnumerationAssignment_1() { return cEnumerationAssignment_1; }
		
		//EnumerationGO
		public RuleCall getEnumerationEnumerationGOParserRuleCall_1_0() { return cEnumerationEnumerationGOParserRuleCall_1_0; }
		
		//tag=TagGO
		public Assignment getTagAssignment_2() { return cTagAssignment_2; }
		
		//TagGO
		public RuleCall getTagTagGOParserRuleCall_2_0() { return cTagTagGOParserRuleCall_2_0; }
	}
	public class EnumerationGOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.EnumerationGO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumerationGOAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cEnumeration_hAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnumeration_hEnumerationHeaderParserRuleCall_1_0 = (RuleCall)cEnumeration_hAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cIdentifierAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cIdentifierEStringParserRuleCall_2_1_1_0 = (RuleCall)cIdentifierAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cIdentifierAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cIdentifierEStringParserRuleCall_2_1_2_1_0 = (RuleCall)cIdentifierAssignment_2_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		private final Keyword cSemicolonKeyword_2_1_4 = (Keyword)cGroup_2_1.eContents().get(4);
		
		//EnumerationGO returns EnumerationGO:
		//    {EnumerationGO}
		//         enumeration_h=EnumerationHeader ( ';' |
		//         '{' identifier+=EString ( "," identifier+=EString)* '}'  (';')?)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{EnumerationGO}
		//     enumeration_h=EnumerationHeader ( ';' |
		//     '{' identifier+=EString ( "," identifier+=EString)* '}'  (';')?)
		public Group getGroup() { return cGroup; }
		
		//{EnumerationGO}
		public Action getEnumerationGOAction_0() { return cEnumerationGOAction_0; }
		
		//enumeration_h=EnumerationHeader
		public Assignment getEnumeration_hAssignment_1() { return cEnumeration_hAssignment_1; }
		
		//EnumerationHeader
		public RuleCall getEnumeration_hEnumerationHeaderParserRuleCall_1_0() { return cEnumeration_hEnumerationHeaderParserRuleCall_1_0; }
		
		//( ';' |
		//        '{' identifier+=EString ( "," identifier+=EString)* '}'  (';')?)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' identifier+=EString ( "," identifier+=EString)* '}'  (';')?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//identifier+=EString
		public Assignment getIdentifierAssignment_2_1_1() { return cIdentifierAssignment_2_1_1; }
		
		//EString
		public RuleCall getIdentifierEStringParserRuleCall_2_1_1_0() { return cIdentifierEStringParserRuleCall_2_1_1_0; }
		
		//( "," identifier+=EString)*
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }
		
		//","
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }
		
		//identifier+=EString
		public Assignment getIdentifierAssignment_2_1_2_1() { return cIdentifierAssignment_2_1_2_1; }
		
		//EString
		public RuleCall getIdentifierEStringParserRuleCall_2_1_2_1_0() { return cIdentifierEStringParserRuleCall_2_1_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_3() { return cRightCurlyBracketKeyword_2_1_3; }
		
		//(';')?
		public Keyword getSemicolonKeyword_2_1_4() { return cSemicolonKeyword_2_1_4; }
	}
	public class EnumerationHeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.EnumerationHeader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		
		//EnumerationHeader returns EnumerationHeader:
		//    'enum'
		//         identifier=ID
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'enum'
		//     identifier=ID
		public Group getGroup() { return cGroup; }
		
		//'enum'
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//identifier=ID
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_0() { return cIdentifierIDTerminalRuleCall_1_0; }
	}
	public class ClassifierHeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.ClassifierHeader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassifier_infoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassifier_infoClassifierInfoParserRuleCall_0_0 = (RuleCall)cClassifier_infoAssignment_0.eContents().get(0);
		private final Assignment cScoped_identifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cScoped_identifierScopedIdentifierParserRuleCall_1_0 = (RuleCall)cScoped_identifierAssignment_1.eContents().get(0);
		private final Assignment cClassifier_extensionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassifier_extensionClassifierExtensionParserRuleCall_2_0 = (RuleCall)cClassifier_extensionAssignment_2.eContents().get(0);
		
		//ClassifierHeader returns ClassifierHeader:
		//         classifier_info=ClassifierInfo
		//         scoped_identifier=ScopedIdentifier
		//        ( classifier_extension=ClassifierExtension)?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		// classifier_info=ClassifierInfo
		// scoped_identifier=ScopedIdentifier
		//( classifier_extension=ClassifierExtension)?
		public Group getGroup() { return cGroup; }
		
		//classifier_info=ClassifierInfo
		public Assignment getClassifier_infoAssignment_0() { return cClassifier_infoAssignment_0; }
		
		//ClassifierInfo
		public RuleCall getClassifier_infoClassifierInfoParserRuleCall_0_0() { return cClassifier_infoClassifierInfoParserRuleCall_0_0; }
		
		//scoped_identifier=ScopedIdentifier
		public Assignment getScoped_identifierAssignment_1() { return cScoped_identifierAssignment_1; }
		
		//ScopedIdentifier
		public RuleCall getScoped_identifierScopedIdentifierParserRuleCall_1_0() { return cScoped_identifierScopedIdentifierParserRuleCall_1_0; }
		
		//( classifier_extension=ClassifierExtension)?
		public Assignment getClassifier_extensionAssignment_2() { return cClassifier_extensionAssignment_2; }
		
		//ClassifierExtension
		public RuleCall getClassifier_extensionClassifierExtensionParserRuleCall_2_0() { return cClassifier_extensionClassifierExtensionParserRuleCall_2_0; }
	}
	public class ClassifierFeatureListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.ClassifierFeatureList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassifierFeatureListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cClassifier_featureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClassifier_featureClassifierFeatureParserRuleCall_1_0 = (RuleCall)cClassifier_featureAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cClassifier_featureAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cClassifier_featureClassifierFeatureParserRuleCall_2_1_0 = (RuleCall)cClassifier_featureAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ClassifierFeatureList returns ClassifierFeatureList:
		//    {ClassifierFeatureList}
		//          classifier_feature+=ClassifierFeature ( ";" classifier_feature+=ClassifierFeature)*   (';')?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{ClassifierFeatureList}
		//      classifier_feature+=ClassifierFeature ( ";" classifier_feature+=ClassifierFeature)*   (';')?
		public Group getGroup() { return cGroup; }
		
		//{ClassifierFeatureList}
		public Action getClassifierFeatureListAction_0() { return cClassifierFeatureListAction_0; }
		
		//classifier_feature+=ClassifierFeature
		public Assignment getClassifier_featureAssignment_1() { return cClassifier_featureAssignment_1; }
		
		//ClassifierFeature
		public RuleCall getClassifier_featureClassifierFeatureParserRuleCall_1_0() { return cClassifier_featureClassifierFeatureParserRuleCall_1_0; }
		
		//( ";" classifier_feature+=ClassifierFeature)*
		public Group getGroup_2() { return cGroup_2; }
		
		//";"
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//classifier_feature+=ClassifierFeature
		public Assignment getClassifier_featureAssignment_2_1() { return cClassifier_featureAssignment_2_1; }
		
		//ClassifierFeature
		public RuleCall getClassifier_featureClassifierFeatureParserRuleCall_2_1_0() { return cClassifier_featureClassifierFeatureParserRuleCall_2_1_0; }
		
		//(';')?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ClassifierInfoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.ClassifierInfo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cClassifierInfoAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cDatatypeKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cPrimitiveKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cExceptionKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cIntermediateKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cQualifierAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cQualifierGeneralQualifierEnumRuleCall_3_1_0 = (RuleCall)cQualifierAssignment_3_1.eContents().get(0);
		private final Keyword cClassKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//ClassifierInfo returns ClassifierInfo:
		//    {ClassifierInfo}
		//    'datatype' | 'primitive' | 'exception' | ('intermediate')?
		//          (qualifier+=GeneralQualifier)*   'class'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{ClassifierInfo}
		//'datatype' | 'primitive' | 'exception' | ('intermediate')?
		//      (qualifier+=GeneralQualifier)*   'class'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ClassifierInfo}
		//'datatype'
		public Group getGroup_0() { return cGroup_0; }
		
		//{ClassifierInfo}
		public Action getClassifierInfoAction_0_0() { return cClassifierInfoAction_0_0; }
		
		//'datatype'
		public Keyword getDatatypeKeyword_0_1() { return cDatatypeKeyword_0_1; }
		
		//'primitive'
		public Keyword getPrimitiveKeyword_1() { return cPrimitiveKeyword_1; }
		
		//'exception'
		public Keyword getExceptionKeyword_2() { return cExceptionKeyword_2; }
		
		//('intermediate')?
		//         (qualifier+=GeneralQualifier)*   'class'
		public Group getGroup_3() { return cGroup_3; }
		
		//('intermediate')?
		public Keyword getIntermediateKeyword_3_0() { return cIntermediateKeyword_3_0; }
		
		//(qualifier+=GeneralQualifier)*
		public Assignment getQualifierAssignment_3_1() { return cQualifierAssignment_3_1; }
		
		//GeneralQualifier
		public RuleCall getQualifierGeneralQualifierEnumRuleCall_3_1_0() { return cQualifierGeneralQualifierEnumRuleCall_3_1_0; }
		
		//'class'
		public Keyword getClassKeyword_3_2() { return cClassKeyword_3_2; }
	}
	public class ClassifierExtensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.ClassifierExtension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtendsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cScoped_identifier_listAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cScoped_identifier_listScopedIdentifierListParserRuleCall_1_0 = (RuleCall)cScoped_identifier_listAssignment_1.eContents().get(0);
		
		//ClassifierExtension returns ClassifierExtension:
		//        'extends' scoped_identifier_list=ScopedIdentifierList
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'extends' scoped_identifier_list=ScopedIdentifierList
		public Group getGroup() { return cGroup; }
		
		//'extends'
		public Keyword getExtendsKeyword_0() { return cExtendsKeyword_0; }
		
		//scoped_identifier_list=ScopedIdentifierList
		public Assignment getScoped_identifier_listAssignment_1() { return cScoped_identifier_listAssignment_1; }
		
		//ScopedIdentifierList
		public RuleCall getScoped_identifier_listScopedIdentifierListParserRuleCall_1_0() { return cScoped_identifier_listScopedIdentifierListParserRuleCall_1_0; }
	}
	public class ClassifierFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.ClassifierFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cFeature_qualifierAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFeature_qualifierFeatureQualifierParserRuleCall_0_0_0 = (RuleCall)cFeature_qualifierAssignment_0_0.eContents().get(0);
		private final Assignment cDeclaratorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDeclaratorDeclaratorParserRuleCall_0_1_0 = (RuleCall)cDeclaratorAssignment_0_1.eContents().get(0);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final Group cGroup_0_2_0 = (Group)cAlternatives_0_2.eContents().get(0);
		private final Assignment cMultiplicityAssignment_0_2_0_0 = (Assignment)cGroup_0_2_0.eContents().get(0);
		private final RuleCall cMultiplicityMultiplicityParserRuleCall_0_2_0_0_0 = (RuleCall)cMultiplicityAssignment_0_2_0_0.eContents().get(0);
		private final Assignment cOpposite_propertyAssignment_0_2_0_1 = (Assignment)cGroup_0_2_0.eContents().get(1);
		private final RuleCall cOpposite_propertyOppositePropertyParserRuleCall_0_2_0_1_0 = (RuleCall)cOpposite_propertyAssignment_0_2_0_1.eContents().get(0);
		private final Assignment cComplete_signatureAssignment_0_2_1 = (Assignment)cAlternatives_0_2.eContents().get(1);
		private final RuleCall cComplete_signatureCompleteSignatureParserRuleCall_0_2_1_0 = (RuleCall)cComplete_signatureAssignment_0_2_1.eContents().get(0);
		private final Assignment cTagAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTagTagGOParserRuleCall_1_0 = (RuleCall)cTagAssignment_1.eContents().get(0);
		
		//ClassifierFeature returns ClassifierFeature:
		//        (( feature_qualifier=FeatureQualifier)?
		//         declarator=Declarator
		//        (( multiplicity=Multiplicity)?
		//        ( opposite_property=OppositeProperty)?|
		//         complete_signature=CompleteSignature))|
		//         tag=TagGO
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(( feature_qualifier=FeatureQualifier)?
		// declarator=Declarator
		//(( multiplicity=Multiplicity)?
		//( opposite_property=OppositeProperty)?|
		// complete_signature=CompleteSignature))|
		// tag=TagGO
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(( feature_qualifier=FeatureQualifier)?
		// declarator=Declarator
		//(( multiplicity=Multiplicity)?
		//( opposite_property=OppositeProperty)?|
		// complete_signature=CompleteSignature))
		public Group getGroup_0() { return cGroup_0; }
		
		//( feature_qualifier=FeatureQualifier)?
		public Assignment getFeature_qualifierAssignment_0_0() { return cFeature_qualifierAssignment_0_0; }
		
		//FeatureQualifier
		public RuleCall getFeature_qualifierFeatureQualifierParserRuleCall_0_0_0() { return cFeature_qualifierFeatureQualifierParserRuleCall_0_0_0; }
		
		//declarator=Declarator
		public Assignment getDeclaratorAssignment_0_1() { return cDeclaratorAssignment_0_1; }
		
		//Declarator
		public RuleCall getDeclaratorDeclaratorParserRuleCall_0_1_0() { return cDeclaratorDeclaratorParserRuleCall_0_1_0; }
		
		//(( multiplicity=Multiplicity)?
		//( opposite_property=OppositeProperty)?|
		// complete_signature=CompleteSignature)
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }
		
		//( multiplicity=Multiplicity)?
		//        ( opposite_property=OppositeProperty)?
		public Group getGroup_0_2_0() { return cGroup_0_2_0; }
		
		//( multiplicity=Multiplicity)?
		public Assignment getMultiplicityAssignment_0_2_0_0() { return cMultiplicityAssignment_0_2_0_0; }
		
		//Multiplicity
		public RuleCall getMultiplicityMultiplicityParserRuleCall_0_2_0_0_0() { return cMultiplicityMultiplicityParserRuleCall_0_2_0_0_0; }
		
		//( opposite_property=OppositeProperty)?
		public Assignment getOpposite_propertyAssignment_0_2_0_1() { return cOpposite_propertyAssignment_0_2_0_1; }
		
		//OppositeProperty
		public RuleCall getOpposite_propertyOppositePropertyParserRuleCall_0_2_0_1_0() { return cOpposite_propertyOppositePropertyParserRuleCall_0_2_0_1_0; }
		
		//complete_signature=CompleteSignature
		public Assignment getComplete_signatureAssignment_0_2_1() { return cComplete_signatureAssignment_0_2_1; }
		
		//CompleteSignature
		public RuleCall getComplete_signatureCompleteSignatureParserRuleCall_0_2_1_0() { return cComplete_signatureCompleteSignatureParserRuleCall_0_2_1_0; }
		
		//tag=TagGO
		public Assignment getTagAssignment_1() { return cTagAssignment_1; }
		
		//TagGO
		public RuleCall getTagTagGOParserRuleCall_1_0() { return cTagTagGOParserRuleCall_1_0; }
	}
	public class FeatureQualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.FeatureQualifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFeatureQualifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStereotype_qualifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStereotype_qualifierStereotypeQualifierParserRuleCall_1_0 = (RuleCall)cStereotype_qualifierAssignment_1.eContents().get(0);
		private final Assignment cFeature_keyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeature_keyFeatureKeyEnumRuleCall_2_0 = (RuleCall)cFeature_keyAssignment_2.eContents().get(0);
		
		//FeatureQualifier returns FeatureQualifier:
		//    {FeatureQualifier}
		//        ( stereotype_qualifier=StereotypeQualifier)?
		//          (feature_key+=FeatureKey)*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{FeatureQualifier}
		//    ( stereotype_qualifier=StereotypeQualifier)?
		//      (feature_key+=FeatureKey)*
		public Group getGroup() { return cGroup; }
		
		//{FeatureQualifier}
		public Action getFeatureQualifierAction_0() { return cFeatureQualifierAction_0; }
		
		//( stereotype_qualifier=StereotypeQualifier)?
		public Assignment getStereotype_qualifierAssignment_1() { return cStereotype_qualifierAssignment_1; }
		
		//StereotypeQualifier
		public RuleCall getStereotype_qualifierStereotypeQualifierParserRuleCall_1_0() { return cStereotype_qualifierStereotypeQualifierParserRuleCall_1_0; }
		
		//(feature_key+=FeatureKey)*
		public Assignment getFeature_keyAssignment_2() { return cFeature_keyAssignment_2; }
		
		//FeatureKey
		public RuleCall getFeature_keyFeatureKeyEnumRuleCall_2_0() { return cFeature_keyFeatureKeyEnumRuleCall_2_0; }
	}
	public class MultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.Multiplicity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMultiplicity_rangeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMultiplicity_rangeMULTIPLICITYRANGETerminalRuleCall_1_0 = (RuleCall)cMultiplicity_rangeAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Multiplicity returns Multiplicity:
		//    '['
		//         multiplicity_range=MULTIPLICITYRANGE
		//    ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'['
		//     multiplicity_range=MULTIPLICITYRANGE
		//']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//multiplicity_range=MULTIPLICITYRANGE
		public Assignment getMultiplicity_rangeAssignment_1() { return cMultiplicity_rangeAssignment_1; }
		
		//MULTIPLICITYRANGE
		public RuleCall getMultiplicity_rangeMULTIPLICITYRANGETerminalRuleCall_1_0() { return cMultiplicity_rangeMULTIPLICITYRANGETerminalRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class OppositePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.OppositeProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOppositePropertyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOppositesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTildeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cMultiplicityAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMultiplicityMultiplicityParserRuleCall_4_0 = (RuleCall)cMultiplicityAssignment_4.eContents().get(0);
		
		//OppositeProperty returns OppositeProperty:
		//    {OppositeProperty}
		//    'opposites'
		//    ('~')? name=ID
		//        ( multiplicity=Multiplicity)?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{OppositeProperty}
		//'opposites'
		//('~')? name=ID
		//    ( multiplicity=Multiplicity)?
		public Group getGroup() { return cGroup; }
		
		//{OppositeProperty}
		public Action getOppositePropertyAction_0() { return cOppositePropertyAction_0; }
		
		//'opposites'
		public Keyword getOppositesKeyword_1() { return cOppositesKeyword_1; }
		
		//('~')?
		public Keyword getTildeKeyword_2() { return cTildeKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//( multiplicity=Multiplicity)?
		public Assignment getMultiplicityAssignment_4() { return cMultiplicityAssignment_4; }
		
		//Multiplicity
		public RuleCall getMultiplicityMultiplicityParserRuleCall_4_0() { return cMultiplicityMultiplicityParserRuleCall_4_0; }
	}
	public class StereotypeQualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.StereotypeQualifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStereotypeQualifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdentifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdentifierIDTerminalRuleCall_2_0 = (RuleCall)cIdentifierAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIdentifierAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_3_1_0 = (RuleCall)cIdentifierAssignment_3_1.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StereotypeQualifier returns StereotypeQualifier:
		//    {StereotypeQualifier}
		//          '<<' identifier+=ID ( "," identifier+=ID)*   '>>'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{StereotypeQualifier}
		//      '<<' identifier+=ID ( "," identifier+=ID)*   '>>'
		public Group getGroup() { return cGroup; }
		
		//{StereotypeQualifier}
		public Action getStereotypeQualifierAction_0() { return cStereotypeQualifierAction_0; }
		
		//'<<'
		public Keyword getLessThanSignLessThanSignKeyword_1() { return cLessThanSignLessThanSignKeyword_1; }
		
		//identifier+=ID
		public Assignment getIdentifierAssignment_2() { return cIdentifierAssignment_2; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_2_0() { return cIdentifierIDTerminalRuleCall_2_0; }
		
		//( "," identifier+=ID)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//identifier+=ID
		public Assignment getIdentifierAssignment_3_1() { return cIdentifierAssignment_3_1; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_3_1_0() { return cIdentifierIDTerminalRuleCall_3_1_0; }
		
		//'>>'
		public Keyword getGreaterThanSignGreaterThanSignKeyword_4() { return cGreaterThanSignGreaterThanSignKeyword_4; }
	}
	public class UnitRefGOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.UnitRefGO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnitRefGOAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIdentifierAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_2_1_0 = (RuleCall)cIdentifierAssignment_2_1.eContents().get(0);
		
		//UnitRefGO returns UnitRefGO:
		//    {UnitRefGO}
		//          identifier+=ID ( "." identifier+=ID)*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{UnitRefGO}
		//      identifier+=ID ( "." identifier+=ID)*
		public Group getGroup() { return cGroup; }
		
		//{UnitRefGO}
		public Action getUnitRefGOAction_0() { return cUnitRefGOAction_0; }
		
		//identifier+=ID
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_0() { return cIdentifierIDTerminalRuleCall_1_0; }
		
		//( "." identifier+=ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//identifier+=ID
		public Assignment getIdentifierAssignment_2_1() { return cIdentifierAssignment_2_1; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_2_1_0() { return cIdentifierIDTerminalRuleCall_2_1_0; }
	}
	
	public class DirectionKindElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.DirectionKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInInKeyword_0_0 = (Keyword)cInEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cInoutEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cInoutInoutKeyword_1_0 = (Keyword)cInoutEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOutEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOutOutKeyword_2_0 = (Keyword)cOutEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum DirectionKind returns DirectionKind:
		//                in = 'in' | inout = 'inout' | out = 'out';
		public EnumRule getRule() { return rule; }
		
		//in = 'in' | inout = 'inout' | out = 'out'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//in = 'in'
		public EnumLiteralDeclaration getInEnumLiteralDeclaration_0() { return cInEnumLiteralDeclaration_0; }
		
		//'in'
		public Keyword getInInKeyword_0_0() { return cInInKeyword_0_0; }
		
		//inout = 'inout'
		public EnumLiteralDeclaration getInoutEnumLiteralDeclaration_1() { return cInoutEnumLiteralDeclaration_1; }
		
		//'inout'
		public Keyword getInoutInoutKeyword_1_0() { return cInoutInoutKeyword_1_0; }
		
		//out = 'out'
		public EnumLiteralDeclaration getOutEnumLiteralDeclaration_2() { return cOutEnumLiteralDeclaration_2; }
		
		//'out'
		public Keyword getOutOutKeyword_2_0() { return cOutOutKeyword_2_0; }
	}
	public class ComplexTypeKeyElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.ComplexTypeKey");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCollectionEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCollectionCollectionKeyword_0_0 = (Keyword)cCollectionEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSetEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSetSetKeyword_1_0 = (Keyword)cSetEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOrderedSetEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOrderedSetOrderedSetKeyword_2_0 = (Keyword)cOrderedSetEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSequenceEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSequenceSequenceKeyword_3_0 = (Keyword)cSequenceEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cBagEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cBagBagKeyword_4_0 = (Keyword)cBagEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cListEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cListListKeyword_5_0 = (Keyword)cListEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cDictEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cDictDictKeyword_6_0 = (Keyword)cDictEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cTupleEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cTupleTupleKeyword_7_0 = (Keyword)cTupleEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum ComplexTypeKey returns ComplexTypeKey:
		//                Collection = 'Collection' | Set = 'Set' | OrderedSet = 'OrderedSet' | Sequence = 'Sequence' | Bag = 'Bag' | List = 'List' | Dict = 'Dict' | Tuple = 'Tuple';
		public EnumRule getRule() { return rule; }
		
		//Collection = 'Collection' | Set = 'Set' | OrderedSet = 'OrderedSet' | Sequence = 'Sequence' | Bag = 'Bag' | List = 'List' | Dict = 'Dict' | Tuple = 'Tuple'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Collection = 'Collection'
		public EnumLiteralDeclaration getCollectionEnumLiteralDeclaration_0() { return cCollectionEnumLiteralDeclaration_0; }
		
		//'Collection'
		public Keyword getCollectionCollectionKeyword_0_0() { return cCollectionCollectionKeyword_0_0; }
		
		//Set = 'Set'
		public EnumLiteralDeclaration getSetEnumLiteralDeclaration_1() { return cSetEnumLiteralDeclaration_1; }
		
		//'Set'
		public Keyword getSetSetKeyword_1_0() { return cSetSetKeyword_1_0; }
		
		//OrderedSet = 'OrderedSet'
		public EnumLiteralDeclaration getOrderedSetEnumLiteralDeclaration_2() { return cOrderedSetEnumLiteralDeclaration_2; }
		
		//'OrderedSet'
		public Keyword getOrderedSetOrderedSetKeyword_2_0() { return cOrderedSetOrderedSetKeyword_2_0; }
		
		//Sequence = 'Sequence'
		public EnumLiteralDeclaration getSequenceEnumLiteralDeclaration_3() { return cSequenceEnumLiteralDeclaration_3; }
		
		//'Sequence'
		public Keyword getSequenceSequenceKeyword_3_0() { return cSequenceSequenceKeyword_3_0; }
		
		//Bag = 'Bag'
		public EnumLiteralDeclaration getBagEnumLiteralDeclaration_4() { return cBagEnumLiteralDeclaration_4; }
		
		//'Bag'
		public Keyword getBagBagKeyword_4_0() { return cBagBagKeyword_4_0; }
		
		//List = 'List'
		public EnumLiteralDeclaration getListEnumLiteralDeclaration_5() { return cListEnumLiteralDeclaration_5; }
		
		//'List'
		public Keyword getListListKeyword_5_0() { return cListListKeyword_5_0; }
		
		//Dict = 'Dict'
		public EnumLiteralDeclaration getDictEnumLiteralDeclaration_6() { return cDictEnumLiteralDeclaration_6; }
		
		//'Dict'
		public Keyword getDictDictKeyword_6_0() { return cDictDictKeyword_6_0; }
		
		//Tuple = 'Tuple'
		public EnumLiteralDeclaration getTupleEnumLiteralDeclaration_7() { return cTupleEnumLiteralDeclaration_7; }
		
		//'Tuple'
		public Keyword getTupleTupleKeyword_7_0() { return cTupleTupleKeyword_7_0; }
	}
	public class CollectionKeyElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.CollectionKey");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCollectionEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCollectionCollectionKeyword_0_0 = (Keyword)cCollectionEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSetEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSetSetKeyword_1_0 = (Keyword)cSetEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOrderedSetEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOrderedSetOrderedSetKeyword_2_0 = (Keyword)cOrderedSetEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSequenceEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSequenceSequenceKeyword_3_0 = (Keyword)cSequenceEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cBagEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cBagBagKeyword_4_0 = (Keyword)cBagEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cListEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cListListKeyword_5_0 = (Keyword)cListEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum CollectionKey returns CollectionKey:
		//                Collection = 'Collection' | Set = 'Set' | OrderedSet = 'OrderedSet' | Sequence = 'Sequence' | Bag = 'Bag' | List = 'List';
		public EnumRule getRule() { return rule; }
		
		//Collection = 'Collection' | Set = 'Set' | OrderedSet = 'OrderedSet' | Sequence = 'Sequence' | Bag = 'Bag' | List = 'List'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Collection = 'Collection'
		public EnumLiteralDeclaration getCollectionEnumLiteralDeclaration_0() { return cCollectionEnumLiteralDeclaration_0; }
		
		//'Collection'
		public Keyword getCollectionCollectionKeyword_0_0() { return cCollectionCollectionKeyword_0_0; }
		
		//Set = 'Set'
		public EnumLiteralDeclaration getSetEnumLiteralDeclaration_1() { return cSetEnumLiteralDeclaration_1; }
		
		//'Set'
		public Keyword getSetSetKeyword_1_0() { return cSetSetKeyword_1_0; }
		
		//OrderedSet = 'OrderedSet'
		public EnumLiteralDeclaration getOrderedSetEnumLiteralDeclaration_2() { return cOrderedSetEnumLiteralDeclaration_2; }
		
		//'OrderedSet'
		public Keyword getOrderedSetOrderedSetKeyword_2_0() { return cOrderedSetOrderedSetKeyword_2_0; }
		
		//Sequence = 'Sequence'
		public EnumLiteralDeclaration getSequenceEnumLiteralDeclaration_3() { return cSequenceEnumLiteralDeclaration_3; }
		
		//'Sequence'
		public Keyword getSequenceSequenceKeyword_3_0() { return cSequenceSequenceKeyword_3_0; }
		
		//Bag = 'Bag'
		public EnumLiteralDeclaration getBagEnumLiteralDeclaration_4() { return cBagEnumLiteralDeclaration_4; }
		
		//'Bag'
		public Keyword getBagBagKeyword_4_0() { return cBagBagKeyword_4_0; }
		
		//List = 'List'
		public EnumLiteralDeclaration getListEnumLiteralDeclaration_5() { return cListEnumLiteralDeclaration_5; }
		
		//'List'
		public Keyword getListListKeyword_5_0() { return cListListKeyword_5_0; }
	}
	public class GeneralQualifierElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.GeneralQualifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBlackboxEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBlackboxBlackboxKeyword_0_0 = (Keyword)cBlackboxEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAbstractEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_1_0 = (Keyword)cAbstractEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cStaticEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cStaticStaticKeyword_2_0 = (Keyword)cStaticEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum GeneralQualifier returns GeneralQualifier:
		//                blackbox = 'blackbox' | abstract = 'abstract' | static = 'static';
		public EnumRule getRule() { return rule; }
		
		//blackbox = 'blackbox' | abstract = 'abstract' | static = 'static'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//blackbox = 'blackbox'
		public EnumLiteralDeclaration getBlackboxEnumLiteralDeclaration_0() { return cBlackboxEnumLiteralDeclaration_0; }
		
		//'blackbox'
		public Keyword getBlackboxBlackboxKeyword_0_0() { return cBlackboxBlackboxKeyword_0_0; }
		
		//abstract = 'abstract'
		public EnumLiteralDeclaration getAbstractEnumLiteralDeclaration_1() { return cAbstractEnumLiteralDeclaration_1; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_1_0() { return cAbstractAbstractKeyword_1_0; }
		
		//static = 'static'
		public EnumLiteralDeclaration getStaticEnumLiteralDeclaration_2() { return cStaticEnumLiteralDeclaration_2; }
		
		//'static'
		public Keyword getStaticStaticKeyword_2_0() { return cStaticStaticKeyword_2_0; }
	}
	public class HelperKindElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.HelperKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHelperEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHelperHelperKeyword_0_0 = (Keyword)cHelperEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cQueryEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cQueryQueryKeyword_1_0 = (Keyword)cQueryEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum HelperKind returns HelperKind:
		//                helper = 'helper' | query = 'query';
		public EnumRule getRule() { return rule; }
		
		//helper = 'helper' | query = 'query'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//helper = 'helper'
		public EnumLiteralDeclaration getHelperEnumLiteralDeclaration_0() { return cHelperEnumLiteralDeclaration_0; }
		
		//'helper'
		public Keyword getHelperHelperKeyword_0_0() { return cHelperHelperKeyword_0_0; }
		
		//query = 'query'
		public EnumLiteralDeclaration getQueryEnumLiteralDeclaration_1() { return cQueryEnumLiteralDeclaration_1; }
		
		//'query'
		public Keyword getQueryQueryKeyword_1_0() { return cQueryQueryKeyword_1_0; }
	}
	public class ModuleKindElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.ModuleKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTransformationEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTransformationTransformationKeyword_0_0 = (Keyword)cTransformationEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLibraryEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLibraryLibraryKeyword_1_0 = (Keyword)cLibraryEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ModuleKind returns ModuleKind:
		//                transformation = 'transformation' | library = 'library';
		public EnumRule getRule() { return rule; }
		
		//transformation = 'transformation' | library = 'library'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//transformation = 'transformation'
		public EnumLiteralDeclaration getTransformationEnumLiteralDeclaration_0() { return cTransformationEnumLiteralDeclaration_0; }
		
		//'transformation'
		public Keyword getTransformationTransformationKeyword_0_0() { return cTransformationTransformationKeyword_0_0; }
		
		//library = 'library'
		public EnumLiteralDeclaration getLibraryEnumLiteralDeclaration_1() { return cLibraryEnumLiteralDeclaration_1; }
		
		//'library'
		public Keyword getLibraryLibraryKeyword_1_0() { return cLibraryLibraryKeyword_1_0; }
	}
	public class MappingExtensionKeyElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.MappingExtensionKey");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInheritsEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInheritsInheritsKeyword_0_0 = (Keyword)cInheritsEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMergesEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMergesMergesKeyword_1_0 = (Keyword)cMergesEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDisjunctsEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDisjunctsDisjunctsKeyword_2_0 = (Keyword)cDisjunctsEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum MappingExtensionKey returns MappingExtensionKey:
		//                inherits = 'inherits' | merges = 'merges' | disjuncts = 'disjuncts';
		public EnumRule getRule() { return rule; }
		
		//inherits = 'inherits' | merges = 'merges' | disjuncts = 'disjuncts'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//inherits = 'inherits'
		public EnumLiteralDeclaration getInheritsEnumLiteralDeclaration_0() { return cInheritsEnumLiteralDeclaration_0; }
		
		//'inherits'
		public Keyword getInheritsInheritsKeyword_0_0() { return cInheritsInheritsKeyword_0_0; }
		
		//merges = 'merges'
		public EnumLiteralDeclaration getMergesEnumLiteralDeclaration_1() { return cMergesEnumLiteralDeclaration_1; }
		
		//'merges'
		public Keyword getMergesMergesKeyword_1_0() { return cMergesMergesKeyword_1_0; }
		
		//disjuncts = 'disjuncts'
		public EnumLiteralDeclaration getDisjunctsEnumLiteralDeclaration_2() { return cDisjunctsEnumLiteralDeclaration_2; }
		
		//'disjuncts'
		public Keyword getDisjunctsDisjunctsKeyword_2_0() { return cDisjunctsDisjunctsKeyword_2_0; }
	}
	public class PropertyKeyElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.PropertyKey");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDerivedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDerivedDerivedKeyword_0_0 = (Keyword)cDerivedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLiteralEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLiteralLiteralKeyword_1_0 = (Keyword)cLiteralEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cConfigurationEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cConfigurationConfigurationKeyword_2_0 = (Keyword)cConfigurationEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPropertyEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPropertyPropertyKeyword_3_0 = (Keyword)cPropertyEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum PropertyKey returns PropertyKey:
		//                derived = 'derived' | literal = 'literal' | configuration = 'configuration' | property = 'property';
		public EnumRule getRule() { return rule; }
		
		//derived = 'derived' | literal = 'literal' | configuration = 'configuration' | property = 'property'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//derived = 'derived'
		public EnumLiteralDeclaration getDerivedEnumLiteralDeclaration_0() { return cDerivedEnumLiteralDeclaration_0; }
		
		//'derived'
		public Keyword getDerivedDerivedKeyword_0_0() { return cDerivedDerivedKeyword_0_0; }
		
		//literal = 'literal'
		public EnumLiteralDeclaration getLiteralEnumLiteralDeclaration_1() { return cLiteralEnumLiteralDeclaration_1; }
		
		//'literal'
		public Keyword getLiteralLiteralKeyword_1_0() { return cLiteralLiteralKeyword_1_0; }
		
		//configuration = 'configuration'
		public EnumLiteralDeclaration getConfigurationEnumLiteralDeclaration_2() { return cConfigurationEnumLiteralDeclaration_2; }
		
		//'configuration'
		public Keyword getConfigurationConfigurationKeyword_2_0() { return cConfigurationConfigurationKeyword_2_0; }
		
		//property = 'property'
		public EnumLiteralDeclaration getPropertyEnumLiteralDeclaration_3() { return cPropertyEnumLiteralDeclaration_3; }
		
		//'property'
		public Keyword getPropertyPropertyKeyword_3_0() { return cPropertyPropertyKeyword_3_0; }
	}
	public class FeatureKeyElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.FeatureKey");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cComposesEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cComposesComposesKeyword_0_0 = (Keyword)cComposesEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cReferencesEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cReferencesReferencesKeyword_1_0 = (Keyword)cReferencesEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cReadonlyEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cReadonlyReadonlyKeyword_2_0 = (Keyword)cReadonlyEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDerivedEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDerivedDerivedKeyword_3_0 = (Keyword)cDerivedEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cStaticEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cStaticStaticKeyword_4_0 = (Keyword)cStaticEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum FeatureKey returns FeatureKey:
		//                composes = 'composes' | references = 'references' | readonly = 'readonly' | derived = 'derived' | static = 'static';
		public EnumRule getRule() { return rule; }
		
		//composes = 'composes' | references = 'references' | readonly = 'readonly' | derived = 'derived' | static = 'static'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//composes = 'composes'
		public EnumLiteralDeclaration getComposesEnumLiteralDeclaration_0() { return cComposesEnumLiteralDeclaration_0; }
		
		//'composes'
		public Keyword getComposesComposesKeyword_0_0() { return cComposesComposesKeyword_0_0; }
		
		//references = 'references'
		public EnumLiteralDeclaration getReferencesEnumLiteralDeclaration_1() { return cReferencesEnumLiteralDeclaration_1; }
		
		//'references'
		public Keyword getReferencesReferencesKeyword_1_0() { return cReferencesReferencesKeyword_1_0; }
		
		//readonly = 'readonly'
		public EnumLiteralDeclaration getReadonlyEnumLiteralDeclaration_2() { return cReadonlyEnumLiteralDeclaration_2; }
		
		//'readonly'
		public Keyword getReadonlyReadonlyKeyword_2_0() { return cReadonlyReadonlyKeyword_2_0; }
		
		//derived = 'derived'
		public EnumLiteralDeclaration getDerivedEnumLiteralDeclaration_3() { return cDerivedEnumLiteralDeclaration_3; }
		
		//'derived'
		public Keyword getDerivedDerivedKeyword_3_0() { return cDerivedDerivedKeyword_3_0; }
		
		//static = 'static'
		public EnumLiteralDeclaration getStaticEnumLiteralDeclaration_4() { return cStaticEnumLiteralDeclaration_4; }
		
		//'static'
		public Keyword getStaticStaticKeyword_4_0() { return cStaticStaticKeyword_4_0; }
	}
	
	private final TopLevelGOElements pTopLevelGO;
	private final ModuleElements pModule;
	private final ImperativeOperationElements pImperativeOperation;
	private final ModuleImportElements pModuleImport;
	private final ModelTypeElements pModelType;
	private final ExpressionGOElements pExpressionGO;
	private final HelperElements pHelper;
	private final OperationalTransformationElements pOperationalTransformation;
	private final MappingOperationElements pMappingOperation;
	private final ConstructorElements pConstructor;
	private final ContextualPropertyElements pContextualProperty;
	private final EntryOperationElements pEntryOperation;
	private final LibraryElements pLibrary;
	private final TagGOElements pTagGO;
	private final MetaModelGOElements pMetaModelGO;
	private final AccessDeclElements pAccessDecl;
	private final TypeDefElements pTypeDef;
	private final ClassifierGOElements pClassifierGO;
	private final EStringElements pEString;
	private final PackageRefGOElements pPackageRefGO;
	private final ExpressionBlockElements pExpressionBlock;
	private final ScopedIdentifierElements pScopedIdentifier;
	private final ExpressionListElements pExpressionList;
	private final ExpressionSemiListElements pExpressionSemiList;
	private final VarParameterElements pVarParameter;
	private final DirectionKindElements eDirectionKind;
	private final DeclaratorElements pDeclarator;
	private final TypeSpecElements pTypeSpec;
	private final InitPartElements pInitPart;
	private final TypeReferenceElements pTypeReference;
	private final ComplexTypeElements pComplexType;
	private final ComplexTypeKeyElements eComplexTypeKey;
	private final CollectionKeyElements eCollectionKey;
	private final DeclaratorListElements pDeclaratorList;
	private final HelperHeaderElements pHelperHeader;
	private final MappingBodyElements pMappingBody;
	private final PopulationSectionElements pPopulationSection;
	private final HelperInfoElements pHelperInfo;
	private final CompleteSignatureElements pCompleteSignature;
	private final GeneralQualifierElements eGeneralQualifier;
	private final HelperKindElements eHelperKind;
	private final SimpleSignatureElements pSimpleSignature;
	private final ParamListElements pParamList;
	private final TransformationHeaderElements pTransformationHeader;
	private final TransformationUsageRefineElements pTransformationUsageRefine;
	private final ModuleUsageGOElements pModuleUsageGO;
	private final ModuleRefGOElements pModuleRefGO;
	private final AccessUsageElements pAccessUsage;
	private final ExtendsUsageElements pExtendsUsage;
	private final ModuleKindElements eModuleKind;
	private final MappingFullHeaderElements pMappingFullHeader;
	private final MappingHeaderElements pMappingHeader;
	private final MappingExtraElements pMappingExtra;
	private final MappingExtensionElements pMappingExtension;
	private final MappingRefinementElements pMappingRefinement;
	private final MappingExtensionKeyElements eMappingExtensionKey;
	private final ScopedIdentifierListElements pScopedIdentifierList;
	private final ConstructorHeaderElements pConstructorHeader;
	private final PropertyKeyElements ePropertyKey;
	private final EntryHeaderElements pEntryHeader;
	private final LibraryHeaderElements pLibraryHeader;
	private final MetaModelHeaderElements pMetaModelHeader;
	private final MetaModelElementElements pMetaModelElement;
	private final EnumerationGOElements pEnumerationGO;
	private final EnumerationHeaderElements pEnumerationHeader;
	private final ClassifierHeaderElements pClassifierHeader;
	private final ClassifierFeatureListElements pClassifierFeatureList;
	private final ClassifierInfoElements pClassifierInfo;
	private final ClassifierExtensionElements pClassifierExtension;
	private final ClassifierFeatureElements pClassifierFeature;
	private final FeatureQualifierElements pFeatureQualifier;
	private final MultiplicityElements pMultiplicity;
	private final OppositePropertyElements pOppositeProperty;
	private final StereotypeQualifierElements pStereotypeQualifier;
	private final FeatureKeyElements eFeatureKey;
	private final UnitRefGOElements pUnitRefGO;
	private final TerminalRule tMULTIPLICITYRANGE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyQvtoGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTopLevelGO = new TopLevelGOElements();
		this.pModule = new ModuleElements();
		this.pImperativeOperation = new ImperativeOperationElements();
		this.pModuleImport = new ModuleImportElements();
		this.pModelType = new ModelTypeElements();
		this.pExpressionGO = new ExpressionGOElements();
		this.pHelper = new HelperElements();
		this.pOperationalTransformation = new OperationalTransformationElements();
		this.pMappingOperation = new MappingOperationElements();
		this.pConstructor = new ConstructorElements();
		this.pContextualProperty = new ContextualPropertyElements();
		this.pEntryOperation = new EntryOperationElements();
		this.pLibrary = new LibraryElements();
		this.pTagGO = new TagGOElements();
		this.pMetaModelGO = new MetaModelGOElements();
		this.pAccessDecl = new AccessDeclElements();
		this.pTypeDef = new TypeDefElements();
		this.pClassifierGO = new ClassifierGOElements();
		this.pEString = new EStringElements();
		this.pPackageRefGO = new PackageRefGOElements();
		this.pExpressionBlock = new ExpressionBlockElements();
		this.pScopedIdentifier = new ScopedIdentifierElements();
		this.pExpressionList = new ExpressionListElements();
		this.pExpressionSemiList = new ExpressionSemiListElements();
		this.pVarParameter = new VarParameterElements();
		this.eDirectionKind = new DirectionKindElements();
		this.pDeclarator = new DeclaratorElements();
		this.pTypeSpec = new TypeSpecElements();
		this.pInitPart = new InitPartElements();
		this.pTypeReference = new TypeReferenceElements();
		this.pComplexType = new ComplexTypeElements();
		this.eComplexTypeKey = new ComplexTypeKeyElements();
		this.eCollectionKey = new CollectionKeyElements();
		this.pDeclaratorList = new DeclaratorListElements();
		this.pHelperHeader = new HelperHeaderElements();
		this.pMappingBody = new MappingBodyElements();
		this.pPopulationSection = new PopulationSectionElements();
		this.pHelperInfo = new HelperInfoElements();
		this.pCompleteSignature = new CompleteSignatureElements();
		this.eGeneralQualifier = new GeneralQualifierElements();
		this.eHelperKind = new HelperKindElements();
		this.pSimpleSignature = new SimpleSignatureElements();
		this.pParamList = new ParamListElements();
		this.pTransformationHeader = new TransformationHeaderElements();
		this.pTransformationUsageRefine = new TransformationUsageRefineElements();
		this.pModuleUsageGO = new ModuleUsageGOElements();
		this.pModuleRefGO = new ModuleRefGOElements();
		this.pAccessUsage = new AccessUsageElements();
		this.pExtendsUsage = new ExtendsUsageElements();
		this.eModuleKind = new ModuleKindElements();
		this.pMappingFullHeader = new MappingFullHeaderElements();
		this.pMappingHeader = new MappingHeaderElements();
		this.pMappingExtra = new MappingExtraElements();
		this.pMappingExtension = new MappingExtensionElements();
		this.pMappingRefinement = new MappingRefinementElements();
		this.eMappingExtensionKey = new MappingExtensionKeyElements();
		this.pScopedIdentifierList = new ScopedIdentifierListElements();
		this.pConstructorHeader = new ConstructorHeaderElements();
		this.ePropertyKey = new PropertyKeyElements();
		this.pEntryHeader = new EntryHeaderElements();
		this.pLibraryHeader = new LibraryHeaderElements();
		this.pMetaModelHeader = new MetaModelHeaderElements();
		this.pMetaModelElement = new MetaModelElementElements();
		this.pEnumerationGO = new EnumerationGOElements();
		this.pEnumerationHeader = new EnumerationHeaderElements();
		this.pClassifierHeader = new ClassifierHeaderElements();
		this.pClassifierFeatureList = new ClassifierFeatureListElements();
		this.pClassifierInfo = new ClassifierInfoElements();
		this.pClassifierExtension = new ClassifierExtensionElements();
		this.pClassifierFeature = new ClassifierFeatureElements();
		this.pFeatureQualifier = new FeatureQualifierElements();
		this.pMultiplicity = new MultiplicityElements();
		this.pOppositeProperty = new OppositePropertyElements();
		this.pStereotypeQualifier = new StereotypeQualifierElements();
		this.eFeatureKey = new FeatureKeyElements();
		this.pUnitRefGO = new UnitRefGOElements();
		this.tMULTIPLICITYRANGE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.qvt10.myqvto.MyQvto.MULTIPLICITYRANGE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.omg.qvt10.myqvto.MyQvto".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//TopLevelGO returns TopLevelGO:
	//    {TopLevelGO}
	//          (moduleimport+=ModuleImport)*
	//          (unit_element+=Module)*
	//    ;
	public TopLevelGOElements getTopLevelGOAccess() {
		return pTopLevelGO;
	}
	
	public ParserRule getTopLevelGORule() {
		return getTopLevelGOAccess().getRule();
	}
	
	//Module returns Module:
	//  Helper | OperationalTransformation | MappingOperation | Constructor | ContextualProperty | EntryOperation | Library | ModelType | TagGO | MetaModelGO | AccessDecl | TypeDef | ClassifierGO;
	public ModuleElements getModuleAccess() {
		return pModule;
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}
	
	//ImperativeOperation returns ImperativeOperation:
	//  Helper | MappingOperation | Constructor | ContextualProperty | EntryOperation | TagGO | AccessDecl | TypeDef | ClassifierGO;
	public ImperativeOperationElements getImperativeOperationAccess() {
		return pImperativeOperation;
	}
	
	public ParserRule getImperativeOperationRule() {
		return getImperativeOperationAccess().getRule();
	}
	
	//ModuleImport returns ModuleImport:
	//          'from' unit=UnitRefGO 'import' (identifier+=ID ( "," identifier+=ID)*  | '*') ';' |
	//        'import' unit=UnitRefGO ';'
	//    ;
	public ModuleImportElements getModuleImportAccess() {
		return pModuleImport;
	}
	
	public ParserRule getModuleImportRule() {
		return getModuleImportAccess().getRule();
	}
	
	//ModelType returns ModelType:
	//    {ModelType}
	//    'modeltype'
	//         name=ID
	//        ( compliance_kind=STRING)?
	//        'uses'  packageref_list+=PackageRefGO ( "," packageref_list+=PackageRefGO)*
	//        ( 'where'  modeltype_where=ExpressionBlock)?
	//     ';' ;
	public ModelTypeElements getModelTypeAccess() {
		return pModelType;
	}
	
	public ParserRule getModelTypeRule() {
		return getModelTypeAccess().getRule();
	}
	
	//ExpressionGO returns ExpressionGO:
	//    {ExpressionGO}
	//          (dummyContent+=EString)*
	//    ;
	public ExpressionGOElements getExpressionGOAccess() {
		return pExpressionGO;
	}
	
	public ParserRule getExpressionGORule() {
		return getExpressionGOAccess().getRule();
	}
	
	//Helper returns Helper:
	//         helper_header=HelperHeader ( ';' |
	//         '=' expression=ExpressionGO ';' |
	//         expression_block=ExpressionBlock (';')?)
	//    ;
	public HelperElements getHelperAccess() {
		return pHelper;
	}
	
	public ParserRule getHelperRule() {
		return getHelperAccess().getRule();
	}
	
	//OperationalTransformation returns OperationalTransformation:
	//         transformation_h=TransformationHeader ( ';' |
	//         '{' (module_element+=ImperativeOperation)* '}'  (';')? )
	//    ;
	public OperationalTransformationElements getOperationalTransformationAccess() {
		return pOperationalTransformation;
	}
	
	public ParserRule getOperationalTransformationRule() {
		return getOperationalTransformationAccess().getRule();
	}
	
	//MappingOperation returns MappingOperation:
	//         mapping_full_header=MappingFullHeader ( ';' |
	//         '{'mapping_body=MappingBody'}' (';')?)
	//    ;
	public MappingOperationElements getMappingOperationAccess() {
		return pMappingOperation;
	}
	
	public ParserRule getMappingOperationRule() {
		return getMappingOperationAccess().getRule();
	}
	
	//Constructor returns Constructor:
	//         constructor_header=ConstructorHeader ( ';' |
	//         expression_block=ExpressionBlock (';')?)
	//    ;
	public ConstructorElements getConstructorAccess() {
		return pConstructor;
	}
	
	public ParserRule getConstructorRule() {
		return getConstructorAccess().getRule();
	}
	
	//ContextualProperty returns ContextualProperty:
	//    ('intermediate')?
	//          (property_key+=PropertyKey)+
	//         declarator=Declarator
	//     ';' ;
	public ContextualPropertyElements getContextualPropertyAccess() {
		return pContextualProperty;
	}
	
	public ParserRule getContextualPropertyRule() {
		return getContextualPropertyAccess().getRule();
	}
	
	//EntryOperation returns EntryOperation:
	//         entry_header=EntryHeader ( ';' |
	//         expression_block=ExpressionBlock (';')?)
	//    ;
	public EntryOperationElements getEntryOperationAccess() {
		return pEntryOperation;
	}
	
	public ParserRule getEntryOperationRule() {
		return getEntryOperationAccess().getRule();
	}
	
	//Library returns Library:
	//         library_h=LibraryHeader ( ';' |
	//         '{' (module_element+=ImperativeOperation)* '}'  (';')?)
	//    ;
	public LibraryElements getLibraryAccess() {
		return pLibrary;
	}
	
	public ParserRule getLibraryRule() {
		return getLibraryAccess().getRule();
	}
	
	//TagGO returns TagGO:
	//    'tag'
	//         tagid=STRING
	//         scoped_identifier=ScopedIdentifier
	//        ('=' tagvalue=ExpressionGO)?
	//     ';' ;
	public TagGOElements getTagGOAccess() {
		return pTagGO;
	}
	
	public ParserRule getTagGORule() {
		return getTagGOAccess().getRule();
	}
	
	//MetaModelGO returns MetaModelGO:
	//         metamodel_h=MetaModelHeader ( ';' |
	//         '{' (metamodel_element+=MetaModelElement)* '}'  (';')?)
	//    ;
	public MetaModelGOElements getMetaModelGOAccess() {
		return pMetaModelGO;
	}
	
	public ParserRule getMetaModelGORule() {
		return getMetaModelGOAccess().getRule();
	}
	
	//AccessDecl returns AccessDecl:
	//         access_usage=AccessUsage ';'
	//    ;
	public AccessDeclElements getAccessDeclAccess() {
		return pAccessDecl;
	}
	
	public ParserRule getAccessDeclRule() {
		return getAccessDeclAccess().getRule();
	}
	
	//TypeDef returns TypeDef:
	//    'typedef'
	//         name=ID
	//         '=' typespec=TypeSpec
	//        ( '['typedef_condition=ExpressionGO']')?
	//     ';' ;
	public TypeDefElements getTypeDefAccess() {
		return pTypeDef;
	}
	
	public ParserRule getTypeDefRule() {
		return getTypeDefAccess().getRule();
	}
	
	//ClassifierGO returns ClassifierGO:
	//         classifier_h=ClassifierHeader ( ';' |
	//        '{'( classifier_feature_list=ClassifierFeatureList)?'}' (';')?)
	//    ;
	public ClassifierGOElements getClassifierGOAccess() {
		return pClassifierGO;
	}
	
	public ParserRule getClassifierGORule() {
		return getClassifierGOAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//PackageRefGO returns PackageRefGO:
	//    {PackageRefGO}
	//         (scoped_identifier=ScopedIdentifier
	//        ( '(' uri=STRING ')' )? | uri=STRING)
	//    ;
	public PackageRefGOElements getPackageRefGOAccess() {
		return pPackageRefGO;
	}
	
	public ParserRule getPackageRefGORule() {
		return getPackageRefGOAccess().getRule();
	}
	
	//ExpressionBlock returns ExpressionBlock:
	//    {ExpressionBlock}
	//    '{'
	//        ( expression_list=ExpressionList)?
	//    '}';
	public ExpressionBlockElements getExpressionBlockAccess() {
		return pExpressionBlock;
	}
	
	public ParserRule getExpressionBlockRule() {
		return getExpressionBlockAccess().getRule();
	}
	
	//ScopedIdentifier returns ScopedIdentifier:
	//    {ScopedIdentifier}
	//          identifier+=ID ( "::" identifier+=ID)*
	//    ;
	public ScopedIdentifierElements getScopedIdentifierAccess() {
		return pScopedIdentifier;
	}
	
	public ParserRule getScopedIdentifierRule() {
		return getScopedIdentifierAccess().getRule();
	}
	
	//ExpressionList returns ExpressionList:
	//         expression_semi_list=ExpressionSemiList (';')?
	//    ;
	public ExpressionListElements getExpressionListAccess() {
		return pExpressionList;
	}
	
	public ParserRule getExpressionListRule() {
		return getExpressionListAccess().getRule();
	}
	
	//ExpressionSemiList returns ExpressionSemiList:
	//    {ExpressionSemiList}
	//          expression+=ExpressionGO ( "," expression+=ExpressionGO)*
	//    ;
	public ExpressionSemiListElements getExpressionSemiListAccess() {
		return pExpressionSemiList;
	}
	
	public ParserRule getExpressionSemiListRule() {
		return getExpressionSemiListAccess().getRule();
	}
	
	//VarParameter returns VarParameter:
	//        ( kind=DirectionKind)?
	//         declarator=Declarator
	//    ;
	public VarParameterElements getVarParameterAccess() {
		return pVarParameter;
	}
	
	public ParserRule getVarParameterRule() {
		return getVarParameterAccess().getRule();
	}
	
	//enum DirectionKind returns DirectionKind:
	//                in = 'in' | inout = 'inout' | out = 'out';
	public DirectionKindElements getDirectionKindAccess() {
		return eDirectionKind;
	}
	
	public EnumRule getDirectionKindRule() {
		return getDirectionKindAccess().getRule();
	}
	
	//Declarator returns Declarator:
	//         typespec=TypeSpec
	//        ( init_part=InitPart)?|
	//         scoped_identifier=ScopedIdentifier ':' typespec=TypeSpec ( init_part=InitPart)?
	//    ;
	public DeclaratorElements getDeclaratorAccess() {
		return pDeclarator;
	}
	
	public ParserRule getDeclaratorRule() {
		return getDeclaratorAccess().getRule();
	}
	
	//TypeSpec returns TypeSpec:
	//         type_reference=TypeReference
	//        ('@' extent_location=ID)?
	//    ;
	public TypeSpecElements getTypeSpecAccess() {
		return pTypeSpec;
	}
	
	public ParserRule getTypeSpecRule() {
		return getTypeSpecAccess().getRule();
	}
	
	//InitPart returns InitPart:
	//         init_op=('=' | ':=' | '::=')
	//         expression=ExpressionGO
	//    ;
	public InitPartElements getInitPartAccess() {
		return pInitPart;
	}
	
	public ParserRule getInitPartRule() {
		return getInitPartAccess().getRule();
	}
	
	//TypeReference returns TypeReference:
	//    {TypeReference}
	//         scoped_identifier=ScopedIdentifier |
	//         complex_type=ComplexType
	//    ;
	public TypeReferenceElements getTypeReferenceAccess() {
		return pTypeReference;
	}
	
	public ParserRule getTypeReferenceRule() {
		return getTypeReferenceAccess().getRule();
	}
	
	//ComplexType returns ComplexType:
	//    {ComplexType}
	//         complex_type_key=ComplexTypeKey |
	//         collection_key=CollectionKey '(' typespec+=TypeSpec ')' |
	//          'Dict' '(' typespec+=TypeSpec','typespec+=TypeSpec   ')' |
	//         'Tuple' '('declarator_list=DeclaratorList')'
	//    ;
	public ComplexTypeElements getComplexTypeAccess() {
		return pComplexType;
	}
	
	public ParserRule getComplexTypeRule() {
		return getComplexTypeAccess().getRule();
	}
	
	//enum ComplexTypeKey returns ComplexTypeKey:
	//                Collection = 'Collection' | Set = 'Set' | OrderedSet = 'OrderedSet' | Sequence = 'Sequence' | Bag = 'Bag' | List = 'List' | Dict = 'Dict' | Tuple = 'Tuple';
	public ComplexTypeKeyElements getComplexTypeKeyAccess() {
		return eComplexTypeKey;
	}
	
	public EnumRule getComplexTypeKeyRule() {
		return getComplexTypeKeyAccess().getRule();
	}
	
	//enum CollectionKey returns CollectionKey:
	//                Collection = 'Collection' | Set = 'Set' | OrderedSet = 'OrderedSet' | Sequence = 'Sequence' | Bag = 'Bag' | List = 'List';
	public CollectionKeyElements getCollectionKeyAccess() {
		return eCollectionKey;
	}
	
	public EnumRule getCollectionKeyRule() {
		return getCollectionKeyAccess().getRule();
	}
	
	//DeclaratorList returns DeclaratorList:
	//    {DeclaratorList}
	//          declarator+=Declarator ( "," declarator+=Declarator)*
	//    ;
	public DeclaratorListElements getDeclaratorListAccess() {
		return pDeclaratorList;
	}
	
	public ParserRule getDeclaratorListRule() {
		return getDeclaratorListAccess().getRule();
	}
	
	//HelperHeader returns HelperHeader:
	//         helper_info=HelperInfo
	//         scope_identifier=ScopedIdentifier
	//         complete_signature=CompleteSignature
	//    ;
	public HelperHeaderElements getHelperHeaderAccess() {
		return pHelperHeader;
	}
	
	public ParserRule getHelperHeaderRule() {
		return getHelperHeaderAccess().getRule();
	}
	
	//MappingBody returns MappingBody:
	//    {MappingBody}
	//          ('init' '{'(initSection+=ExpressionGO ( ";" initSection+=ExpressionGO)*   (';')?)?'}')?
	//        ( population_section=PopulationSection)?
	//          ('end' '{'(endSection+=ExpressionGO ( ";" endSection+=ExpressionGO)*   (';')?)?'}')?
	//    ;
	public MappingBodyElements getMappingBodyAccess() {
		return pMappingBody;
	}
	
	public ParserRule getMappingBodyRule() {
		return getMappingBodyAccess().getRule();
	}
	
	//PopulationSection returns PopulationSection:
	//    {PopulationSection}
	//         expression_list=ExpressionList |
	//         'population' expression_block=ExpressionBlock
	//    ;
	public PopulationSectionElements getPopulationSectionAccess() {
		return pPopulationSection;
	}
	
	public ParserRule getPopulationSectionRule() {
		return getPopulationSectionAccess().getRule();
	}
	
	//HelperInfo returns HelperInfo:
	//    {HelperInfo}
	//          (qualifier+=GeneralQualifier)*
	//         helper_kind=HelperKind
	//    ;
	public HelperInfoElements getHelperInfoAccess() {
		return pHelperInfo;
	}
	
	public ParserRule getHelperInfoRule() {
		return getHelperInfoAccess().getRule();
	}
	
	//CompleteSignature returns CompleteSignature:
	//         simple_signature=SimpleSignature
	//        (':' param_list=ParamList)?
	//    ;
	public CompleteSignatureElements getCompleteSignatureAccess() {
		return pCompleteSignature;
	}
	
	public ParserRule getCompleteSignatureRule() {
		return getCompleteSignatureAccess().getRule();
	}
	
	//enum GeneralQualifier returns GeneralQualifier:
	//                blackbox = 'blackbox' | abstract = 'abstract' | static = 'static';
	public GeneralQualifierElements getGeneralQualifierAccess() {
		return eGeneralQualifier;
	}
	
	public EnumRule getGeneralQualifierRule() {
		return getGeneralQualifierAccess().getRule();
	}
	
	//enum HelperKind returns HelperKind:
	//                helper = 'helper' | query = 'query';
	public HelperKindElements getHelperKindAccess() {
		return eHelperKind;
	}
	
	public EnumRule getHelperKindRule() {
		return getHelperKindAccess().getRule();
	}
	
	//SimpleSignature returns SimpleSignature:
	//    {SimpleSignature}
	//    '('
	//        ( param_list=ParamList)?
	//    ')';
	public SimpleSignatureElements getSimpleSignatureAccess() {
		return pSimpleSignature;
	}
	
	public ParserRule getSimpleSignatureRule() {
		return getSimpleSignatureAccess().getRule();
	}
	
	//ParamList returns ParamList:
	//    {ParamList}
	//          param+=VarParameter ( "," param+=VarParameter)*
	//    ;
	public ParamListElements getParamListAccess() {
		return pParamList;
	}
	
	public ParserRule getParamListRule() {
		return getParamListAccess().getRule();
	}
	
	//TransformationHeader returns TransformationHeader:
	//          (qualifier+=GeneralQualifier)*
	//    'transformation'
	//    name=ID
	//         transformation_signature=SimpleSignature
	//        ( transformation_usage_refine=TransformationUsageRefine)?
	//    ;
	public TransformationHeaderElements getTransformationHeaderAccess() {
		return pTransformationHeader;
	}
	
	public ParserRule getTransformationHeaderRule() {
		return getTransformationHeaderAccess().getRule();
	}
	
	//TransformationUsageRefine returns TransformationUsageRefine:
	//    {TransformationUsageRefine}
	//         module_usage=ModuleUsageGO |
	//        'refines'  transformation_refine=ModuleRefGO
	//    ;
	public TransformationUsageRefineElements getTransformationUsageRefineAccess() {
		return pTransformationUsageRefine;
	}
	
	public ParserRule getTransformationUsageRefineRule() {
		return getTransformationUsageRefineAccess().getRule();
	}
	
	//ModuleUsageGO returns ModuleUsageGO:
	//    {ModuleUsageGO}
	//         access_usage=AccessUsage |
	//         extends_usage=ExtendsUsage
	//    ;
	public ModuleUsageGOElements getModuleUsageGOAccess() {
		return pModuleUsageGO;
	}
	
	public ParserRule getModuleUsageGORule() {
		return getModuleUsageGOAccess().getRule();
	}
	
	//ModuleRefGO returns ModuleRefGO:
	//         scoped_identifier=ScopedIdentifier
	//        ( simple_signature=SimpleSignature)?
	//    ;
	public ModuleRefGOElements getModuleRefGOAccess() {
		return pModuleRefGO;
	}
	
	public ParserRule getModuleRefGORule() {
		return getModuleRefGOAccess().getRule();
	}
	
	//AccessUsage returns AccessUsage:
	//    {AccessUsage}
	//    'access'
	//        ( module_kind=ModuleKind)?
	//          moduleref_list+=ModuleRefGO ( "," moduleref_list+=ModuleRefGO)*
	//    ;
	public AccessUsageElements getAccessUsageAccess() {
		return pAccessUsage;
	}
	
	public ParserRule getAccessUsageRule() {
		return getAccessUsageAccess().getRule();
	}
	
	//ExtendsUsage returns ExtendsUsage:
	//    {ExtendsUsage}
	//    'extends'
	//        ( module_kind=ModuleKind)?
	//          moduleref_list+=ModuleRefGO ( "," moduleref_list+=ModuleRefGO)*
	//    ;
	public ExtendsUsageElements getExtendsUsageAccess() {
		return pExtendsUsage;
	}
	
	public ParserRule getExtendsUsageRule() {
		return getExtendsUsageAccess().getRule();
	}
	
	//enum ModuleKind returns ModuleKind:
	//                transformation = 'transformation' | library = 'library';
	public ModuleKindElements getModuleKindAccess() {
		return eModuleKind;
	}
	
	public EnumRule getModuleKindRule() {
		return getModuleKindAccess().getRule();
	}
	
	//MappingFullHeader returns MappingFullHeader:
	//         mapping_header=MappingHeader
	//        ('when' when=ExpressionBlock)?
	//        ('where' where=ExpressionBlock)?
	//    ;
	public MappingFullHeaderElements getMappingFullHeaderAccess() {
		return pMappingFullHeader;
	}
	
	public ParserRule getMappingFullHeaderRule() {
		return getMappingFullHeaderAccess().getRule();
	}
	
	//MappingHeader returns MappingHeader:
	//          (qualifier+=GeneralQualifier)*
	//    'mapping'
	//         (param_direction=DirectionKind)?
	//         scoped_identifier=ScopedIdentifier
	//         complete_signature=CompleteSignature
	//          (mapping_extra+=MappingExtra)*
	//    ;
	public MappingHeaderElements getMappingHeaderAccess() {
		return pMappingHeader;
	}
	
	public ParserRule getMappingHeaderRule() {
		return getMappingHeaderAccess().getRule();
	}
	
	//MappingExtra returns MappingExtra:
	//    {MappingExtra}
	//         mapping_extension=MappingExtension |
	//         mapping_refinement=MappingRefinement
	//    ;
	public MappingExtraElements getMappingExtraAccess() {
		return pMappingExtra;
	}
	
	public ParserRule getMappingExtraRule() {
		return getMappingExtraAccess().getRule();
	}
	
	//MappingExtension returns MappingExtension:
	//         mapping_extension_key=MappingExtensionKey
	//         scoped_identifier_list=ScopedIdentifierList
	//    ;
	public MappingExtensionElements getMappingExtensionAccess() {
		return pMappingExtension;
	}
	
	public ParserRule getMappingExtensionRule() {
		return getMappingExtensionAccess().getRule();
	}
	
	//MappingRefinement returns MappingRefinement:
	//        'refines' scoped_identifier=ScopedIdentifier
	//    ;
	public MappingRefinementElements getMappingRefinementAccess() {
		return pMappingRefinement;
	}
	
	public ParserRule getMappingRefinementRule() {
		return getMappingRefinementAccess().getRule();
	}
	
	//enum MappingExtensionKey returns MappingExtensionKey:
	//                inherits = 'inherits' | merges = 'merges' | disjuncts = 'disjuncts';
	public MappingExtensionKeyElements getMappingExtensionKeyAccess() {
		return eMappingExtensionKey;
	}
	
	public EnumRule getMappingExtensionKeyRule() {
		return getMappingExtensionKeyAccess().getRule();
	}
	
	//ScopedIdentifierList returns ScopedIdentifierList:
	//    {ScopedIdentifierList}
	//          scoped_identifier_list+=ScopedIdentifier ( "," scoped_identifier_list+=ScopedIdentifier)*
	//    ;
	public ScopedIdentifierListElements getScopedIdentifierListAccess() {
		return pScopedIdentifierList;
	}
	
	public ParserRule getScopedIdentifierListRule() {
		return getScopedIdentifierListAccess().getRule();
	}
	
	//ConstructorHeader returns ConstructorHeader:
	//          (qualifier+=GeneralQualifier)*
	//    'constructor'
	//         scoped_identifier=ScopedIdentifier
	//         simple_signature=SimpleSignature
	//    ;
	public ConstructorHeaderElements getConstructorHeaderAccess() {
		return pConstructorHeader;
	}
	
	public ParserRule getConstructorHeaderRule() {
		return getConstructorHeaderAccess().getRule();
	}
	
	//enum PropertyKey returns PropertyKey:
	//                derived = 'derived' | literal = 'literal' | configuration = 'configuration' | property = 'property';
	public PropertyKeyElements getPropertyKeyAccess() {
		return ePropertyKey;
	}
	
	public EnumRule getPropertyKeyRule() {
		return getPropertyKeyAccess().getRule();
	}
	
	//EntryHeader returns EntryHeader:
	//        'main' simple_signature=SimpleSignature
	//    ;
	public EntryHeaderElements getEntryHeaderAccess() {
		return pEntryHeader;
	}
	
	public ParserRule getEntryHeaderRule() {
		return getEntryHeaderAccess().getRule();
	}
	
	//LibraryHeader returns LibraryHeader:
	//    {LibraryHeader}
	//    'library'
	//    name=ID
	//        ( library_signature=SimpleSignature)?
	//        ( module_usage=ModuleUsageGO)?
	//    ;
	public LibraryHeaderElements getLibraryHeaderAccess() {
		return pLibraryHeader;
	}
	
	public ParserRule getLibraryHeaderRule() {
		return getLibraryHeaderAccess().getRule();
	}
	
	//MetaModelHeader returns MetaModelHeader:
	//    ('metamodel' | 'package')
	//         scoped_identifier=ScopedIdentifier
	//    ;
	public MetaModelHeaderElements getMetaModelHeaderAccess() {
		return pMetaModelHeader;
	}
	
	public ParserRule getMetaModelHeaderRule() {
		return getMetaModelHeaderAccess().getRule();
	}
	
	//MetaModelElement returns MetaModelElement:
	//    {MetaModelElement}
	//         classifier=ClassifierGO |
	//         enumeration=EnumerationGO |
	//         tag=TagGO
	//    ;
	public MetaModelElementElements getMetaModelElementAccess() {
		return pMetaModelElement;
	}
	
	public ParserRule getMetaModelElementRule() {
		return getMetaModelElementAccess().getRule();
	}
	
	//EnumerationGO returns EnumerationGO:
	//    {EnumerationGO}
	//         enumeration_h=EnumerationHeader ( ';' |
	//         '{' identifier+=EString ( "," identifier+=EString)* '}'  (';')?)
	//    ;
	public EnumerationGOElements getEnumerationGOAccess() {
		return pEnumerationGO;
	}
	
	public ParserRule getEnumerationGORule() {
		return getEnumerationGOAccess().getRule();
	}
	
	//EnumerationHeader returns EnumerationHeader:
	//    'enum'
	//         identifier=ID
	//    ;
	public EnumerationHeaderElements getEnumerationHeaderAccess() {
		return pEnumerationHeader;
	}
	
	public ParserRule getEnumerationHeaderRule() {
		return getEnumerationHeaderAccess().getRule();
	}
	
	//ClassifierHeader returns ClassifierHeader:
	//         classifier_info=ClassifierInfo
	//         scoped_identifier=ScopedIdentifier
	//        ( classifier_extension=ClassifierExtension)?
	//    ;
	public ClassifierHeaderElements getClassifierHeaderAccess() {
		return pClassifierHeader;
	}
	
	public ParserRule getClassifierHeaderRule() {
		return getClassifierHeaderAccess().getRule();
	}
	
	//ClassifierFeatureList returns ClassifierFeatureList:
	//    {ClassifierFeatureList}
	//          classifier_feature+=ClassifierFeature ( ";" classifier_feature+=ClassifierFeature)*   (';')?
	//    ;
	public ClassifierFeatureListElements getClassifierFeatureListAccess() {
		return pClassifierFeatureList;
	}
	
	public ParserRule getClassifierFeatureListRule() {
		return getClassifierFeatureListAccess().getRule();
	}
	
	//ClassifierInfo returns ClassifierInfo:
	//    {ClassifierInfo}
	//    'datatype' | 'primitive' | 'exception' | ('intermediate')?
	//          (qualifier+=GeneralQualifier)*   'class'
	//    ;
	public ClassifierInfoElements getClassifierInfoAccess() {
		return pClassifierInfo;
	}
	
	public ParserRule getClassifierInfoRule() {
		return getClassifierInfoAccess().getRule();
	}
	
	//ClassifierExtension returns ClassifierExtension:
	//        'extends' scoped_identifier_list=ScopedIdentifierList
	//    ;
	public ClassifierExtensionElements getClassifierExtensionAccess() {
		return pClassifierExtension;
	}
	
	public ParserRule getClassifierExtensionRule() {
		return getClassifierExtensionAccess().getRule();
	}
	
	//ClassifierFeature returns ClassifierFeature:
	//        (( feature_qualifier=FeatureQualifier)?
	//         declarator=Declarator
	//        (( multiplicity=Multiplicity)?
	//        ( opposite_property=OppositeProperty)?|
	//         complete_signature=CompleteSignature))|
	//         tag=TagGO
	//    ;
	public ClassifierFeatureElements getClassifierFeatureAccess() {
		return pClassifierFeature;
	}
	
	public ParserRule getClassifierFeatureRule() {
		return getClassifierFeatureAccess().getRule();
	}
	
	//FeatureQualifier returns FeatureQualifier:
	//    {FeatureQualifier}
	//        ( stereotype_qualifier=StereotypeQualifier)?
	//          (feature_key+=FeatureKey)*
	//    ;
	public FeatureQualifierElements getFeatureQualifierAccess() {
		return pFeatureQualifier;
	}
	
	public ParserRule getFeatureQualifierRule() {
		return getFeatureQualifierAccess().getRule();
	}
	
	//Multiplicity returns Multiplicity:
	//    '['
	//         multiplicity_range=MULTIPLICITYRANGE
	//    ']';
	public MultiplicityElements getMultiplicityAccess() {
		return pMultiplicity;
	}
	
	public ParserRule getMultiplicityRule() {
		return getMultiplicityAccess().getRule();
	}
	
	//OppositeProperty returns OppositeProperty:
	//    {OppositeProperty}
	//    'opposites'
	//    ('~')? name=ID
	//        ( multiplicity=Multiplicity)?
	//    ;
	public OppositePropertyElements getOppositePropertyAccess() {
		return pOppositeProperty;
	}
	
	public ParserRule getOppositePropertyRule() {
		return getOppositePropertyAccess().getRule();
	}
	
	//StereotypeQualifier returns StereotypeQualifier:
	//    {StereotypeQualifier}
	//          '<<' identifier+=ID ( "," identifier+=ID)*   '>>'
	//    ;
	public StereotypeQualifierElements getStereotypeQualifierAccess() {
		return pStereotypeQualifier;
	}
	
	public ParserRule getStereotypeQualifierRule() {
		return getStereotypeQualifierAccess().getRule();
	}
	
	//enum FeatureKey returns FeatureKey:
	//                composes = 'composes' | references = 'references' | readonly = 'readonly' | derived = 'derived' | static = 'static';
	public FeatureKeyElements getFeatureKeyAccess() {
		return eFeatureKey;
	}
	
	public EnumRule getFeatureKeyRule() {
		return getFeatureKeyAccess().getRule();
	}
	
	//UnitRefGO returns UnitRefGO:
	//    {UnitRefGO}
	//          identifier+=ID ( "." identifier+=ID)*
	//    ;
	public UnitRefGOElements getUnitRefGOAccess() {
		return pUnitRefGO;
	}
	
	public ParserRule getUnitRefGORule() {
		return getUnitRefGOAccess().getRule();
	}
	
	//terminal MULTIPLICITYRANGE:
	//    INT | '*' | INT '...' INT | INT '...' '*';
	public TerminalRule getMULTIPLICITYRANGERule() {
		return tMULTIPLICITYRANGE;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
